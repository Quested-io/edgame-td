import {
  require_Reflect
} from "./chunk-4YXOSJ2Q.js";
import {
  __commonJS,
  __esm,
  __export,
  __privateAdd,
  __privateGet,
  __privateSet,
  __publicField,
  __toCommonJS
} from "./chunk-OCBYBPSH.js";

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/constants/metadata_keys.js
var require_metadata_keys = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/constants/metadata_keys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NON_CUSTOM_TAG_KEYS = exports.PRE_DESTROY = exports.POST_CONSTRUCT = exports.DESIGN_PARAM_TYPES = exports.PARAM_TYPES = exports.TAGGED_PROP = exports.TAGGED = exports.MULTI_INJECT_TAG = exports.INJECT_TAG = exports.OPTIONAL_TAG = exports.UNMANAGED_TAG = exports.NAME_TAG = exports.NAMED_TAG = void 0;
    exports.NAMED_TAG = "named";
    exports.NAME_TAG = "name";
    exports.UNMANAGED_TAG = "unmanaged";
    exports.OPTIONAL_TAG = "optional";
    exports.INJECT_TAG = "inject";
    exports.MULTI_INJECT_TAG = "multi_inject";
    exports.TAGGED = "inversify:tagged";
    exports.TAGGED_PROP = "inversify:tagged_props";
    exports.PARAM_TYPES = "inversify:paramtypes";
    exports.DESIGN_PARAM_TYPES = "design:paramtypes";
    exports.POST_CONSTRUCT = "post_construct";
    exports.PRE_DESTROY = "pre_destroy";
    function getNonCustomTagKeys() {
      return [
        exports.INJECT_TAG,
        exports.MULTI_INJECT_TAG,
        exports.NAME_TAG,
        exports.UNMANAGED_TAG,
        exports.NAMED_TAG,
        exports.OPTIONAL_TAG
      ];
    }
    exports.NON_CUSTOM_TAG_KEYS = getNonCustomTagKeys();
  }
});

// ../../node_modules/.pnpm/@inversifyjs+common@1.4.0/node_modules/@inversifyjs/common/lib/cjs/services/calculations/stringifyServiceIdentifier.js
var require_stringifyServiceIdentifier = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+common@1.4.0/node_modules/@inversifyjs/common/lib/cjs/services/calculations/stringifyServiceIdentifier.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringifyServiceIdentifier = stringifyServiceIdentifier;
    function stringifyServiceIdentifier(serviceIdentifier) {
      switch (typeof serviceIdentifier) {
        case "string":
        case "symbol":
          return serviceIdentifier.toString();
        case "function":
          return serviceIdentifier.name;
        default:
          throw new Error(`Unexpected ${typeof serviceIdentifier} service id type`);
      }
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+common@1.4.0/node_modules/@inversifyjs/common/lib/cjs/services/models/LazyServiceIdentifier.js
var require_LazyServiceIdentifier = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+common@1.4.0/node_modules/@inversifyjs/common/lib/cjs/services/models/LazyServiceIdentifier.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LazyServiceIdentifier = exports.islazyServiceIdentifierSymbol = void 0;
    exports.islazyServiceIdentifierSymbol = Symbol.for("@inversifyjs/common/islazyServiceIdentifier");
    var _a, _buildServiceId;
    _a = exports.islazyServiceIdentifierSymbol;
    var LazyServiceIdentifier = class {
      constructor(buildServiceId) {
        __publicField(this, _a);
        __privateAdd(this, _buildServiceId);
        __privateSet(this, _buildServiceId, buildServiceId);
        this[exports.islazyServiceIdentifierSymbol] = true;
      }
      static is(value) {
        return typeof value === "object" && value !== null && value[exports.islazyServiceIdentifierSymbol] === true;
      }
      unwrap() {
        return __privateGet(this, _buildServiceId).call(this);
      }
    };
    _buildServiceId = new WeakMap();
    exports.LazyServiceIdentifier = LazyServiceIdentifier;
  }
});

// ../../node_modules/.pnpm/@inversifyjs+common@1.4.0/node_modules/@inversifyjs/common/lib/cjs/index.js
var require_cjs = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+common@1.4.0/node_modules/@inversifyjs/common/lib/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stringifyServiceIdentifier = exports.LazyServiceIdentifier = void 0;
    var stringifyServiceIdentifier_1 = require_stringifyServiceIdentifier();
    Object.defineProperty(exports, "stringifyServiceIdentifier", { enumerable: true, get: function() {
      return stringifyServiceIdentifier_1.stringifyServiceIdentifier;
    } });
    var LazyServiceIdentifier_1 = require_LazyServiceIdentifier();
    Object.defineProperty(exports, "LazyServiceIdentifier", { enumerable: true, get: function() {
      return LazyServiceIdentifier_1.LazyServiceIdentifier;
    } });
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/constants/literal_types.js
var require_literal_types = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/constants/literal_types.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TargetTypeEnum = exports.BindingTypeEnum = exports.BindingScopeEnum = void 0;
    var BindingScopeEnum = {
      Request: "Request",
      Singleton: "Singleton",
      Transient: "Transient"
    };
    exports.BindingScopeEnum = BindingScopeEnum;
    var BindingTypeEnum = {
      ConstantValue: "ConstantValue",
      Constructor: "Constructor",
      DynamicValue: "DynamicValue",
      Factory: "Factory",
      Function: "Function",
      Instance: "Instance",
      Invalid: "Invalid",
      Provider: "Provider"
    };
    exports.BindingTypeEnum = BindingTypeEnum;
    var TargetTypeEnum = {
      ClassProperty: "ClassProperty",
      ConstructorArgument: "ConstructorArgument",
      Variable: "Variable"
    };
    exports.TargetTypeEnum = TargetTypeEnum;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/id.js
var require_id = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/id.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.id = id;
    var idCounter = 0;
    function id() {
      return idCounter++;
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/bindings/binding.js
var require_binding = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/bindings/binding.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Binding = void 0;
    var literal_types_1 = require_literal_types();
    var id_1 = require_id();
    var Binding = class _Binding {
      constructor(serviceIdentifier, scope) {
        __publicField(this, "id");
        __publicField(this, "moduleId");
        // Determines weather the bindings has been already activated
        // The activation action takes place when an instance is resolved
        // If the scope is singleton it only happens once
        __publicField(this, "activated");
        // A runtime identifier because at runtime we don't have interfaces
        __publicField(this, "serviceIdentifier");
        // constructor from binding to or toConstructor
        __publicField(this, "implementationType");
        // Cache used to allow singleton scope and BindingType.ConstantValue bindings
        __publicField(this, "cache");
        // Cache used to allow BindingType.DynamicValue bindings
        __publicField(this, "dynamicValue");
        // The scope mode to be used
        __publicField(this, "scope");
        // The kind of binding
        __publicField(this, "type");
        // A factory method used in BindingType.Factory bindings
        __publicField(this, "factory");
        // An async factory method used in BindingType.Provider bindings
        __publicField(this, "provider");
        // A constraint used to limit the contexts in which this binding is applicable
        __publicField(this, "constraint");
        // On activation handler (invoked just before an instance is added to cache and injected)
        __publicField(this, "onActivation");
        // On deactivation handler (invoked just before an instance is unbinded and removed from container)
        __publicField(this, "onDeactivation");
        this.id = (0, id_1.id)();
        this.activated = false;
        this.serviceIdentifier = serviceIdentifier;
        this.scope = scope;
        this.type = literal_types_1.BindingTypeEnum.Invalid;
        this.constraint = (_request) => true;
        this.implementationType = null;
        this.cache = null;
        this.factory = null;
        this.provider = null;
        this.onActivation = null;
        this.onDeactivation = null;
        this.dynamicValue = null;
      }
      clone() {
        const clone = new _Binding(this.serviceIdentifier, this.scope);
        clone.activated = clone.scope === literal_types_1.BindingScopeEnum.Singleton ? this.activated : false;
        clone.implementationType = this.implementationType;
        clone.dynamicValue = this.dynamicValue;
        clone.scope = this.scope;
        clone.type = this.type;
        clone.factory = this.factory;
        clone.provider = this.provider;
        clone.constraint = this.constraint;
        clone.onActivation = this.onActivation;
        clone.onDeactivation = this.onDeactivation;
        clone.cache = this.cache;
        return clone;
      }
    };
    exports.Binding = Binding;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/constants/error_msgs.js
var require_error_msgs = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/constants/error_msgs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.STACK_OVERFLOW = exports.CIRCULAR_DEPENDENCY_IN_FACTORY = exports.ON_DEACTIVATION_ERROR = exports.PRE_DESTROY_ERROR = exports.POST_CONSTRUCT_ERROR = exports.ASYNC_UNBIND_REQUIRED = exports.MULTIPLE_POST_CONSTRUCT_METHODS = exports.MULTIPLE_PRE_DESTROY_METHODS = exports.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = exports.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = exports.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = exports.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = exports.ARGUMENTS_LENGTH_MISMATCH = exports.INVALID_DECORATOR_OPERATION = exports.INVALID_TO_SELF_VALUE = exports.LAZY_IN_SYNC = exports.INVALID_FUNCTION_BINDING = exports.INVALID_MIDDLEWARE_RETURN = exports.NO_MORE_SNAPSHOTS_AVAILABLE = exports.INVALID_BINDING_TYPE = exports.CIRCULAR_DEPENDENCY = exports.UNDEFINED_INJECT_ANNOTATION = exports.TRYING_TO_RESOLVE_BINDINGS = exports.NOT_REGISTERED = exports.CANNOT_UNBIND = exports.AMBIGUOUS_MATCH = exports.KEY_NOT_FOUND = exports.NULL_ARGUMENT = exports.DUPLICATED_METADATA = exports.DUPLICATED_INJECTABLE_DECORATOR = void 0;
    exports.DUPLICATED_INJECTABLE_DECORATOR = "Cannot apply @injectable decorator multiple times.";
    exports.DUPLICATED_METADATA = "Metadata key was used more than once in a parameter:";
    exports.NULL_ARGUMENT = "NULL argument";
    exports.KEY_NOT_FOUND = "Key Not Found";
    exports.AMBIGUOUS_MATCH = "Ambiguous match found for serviceIdentifier:";
    exports.CANNOT_UNBIND = "Could not unbind serviceIdentifier:";
    exports.NOT_REGISTERED = "No matching bindings found for serviceIdentifier:";
    var TRYING_TO_RESOLVE_BINDINGS = (name) => `Trying to resolve bindings for "${name}"`;
    exports.TRYING_TO_RESOLVE_BINDINGS = TRYING_TO_RESOLVE_BINDINGS;
    var UNDEFINED_INJECT_ANNOTATION = (name) => `@inject called with undefined this could mean that the class ${name} has a circular dependency problem. You can use a LazyServiceIdentifer to overcome this limitation.`;
    exports.UNDEFINED_INJECT_ANNOTATION = UNDEFINED_INJECT_ANNOTATION;
    exports.CIRCULAR_DEPENDENCY = "Circular dependency found:";
    exports.INVALID_BINDING_TYPE = "Invalid binding type:";
    exports.NO_MORE_SNAPSHOTS_AVAILABLE = "No snapshot available to restore.";
    exports.INVALID_MIDDLEWARE_RETURN = "Invalid return type in middleware. Middleware must return!";
    exports.INVALID_FUNCTION_BINDING = "Value provided to function binding must be a function!";
    var LAZY_IN_SYNC = (key) => `You are attempting to construct ${keyToString(key)} in a synchronous way but it has asynchronous dependencies.`;
    exports.LAZY_IN_SYNC = LAZY_IN_SYNC;
    exports.INVALID_TO_SELF_VALUE = "The toSelf function can only be applied when a constructor is used as service identifier";
    exports.INVALID_DECORATOR_OPERATION = "The @inject @multiInject @tagged and @named decorators must be applied to the parameters of a class constructor or a class property.";
    var ARGUMENTS_LENGTH_MISMATCH = (name) => `The number of constructor arguments in the derived class ${name} must be >= than the number of constructor arguments of its base class.`;
    exports.ARGUMENTS_LENGTH_MISMATCH = ARGUMENTS_LENGTH_MISMATCH;
    exports.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT = "Invalid Container constructor argument. Container options must be an object.";
    exports.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE = 'Invalid Container option. Default scope must be a string ("singleton" or "transient").';
    exports.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE = "Invalid Container option. Auto bind injectable must be a boolean";
    exports.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK = "Invalid Container option. Skip base check must be a boolean";
    exports.MULTIPLE_PRE_DESTROY_METHODS = "Cannot apply @preDestroy decorator multiple times in the same class";
    exports.MULTIPLE_POST_CONSTRUCT_METHODS = "Cannot apply @postConstruct decorator multiple times in the same class";
    exports.ASYNC_UNBIND_REQUIRED = "Attempting to unbind dependency with asynchronous destruction (@preDestroy or onDeactivation)";
    var POST_CONSTRUCT_ERROR = (clazz, errorMessage) => `@postConstruct error in class ${clazz}: ${errorMessage}`;
    exports.POST_CONSTRUCT_ERROR = POST_CONSTRUCT_ERROR;
    var PRE_DESTROY_ERROR = (clazz, errorMessage) => `@preDestroy error in class ${clazz}: ${errorMessage}`;
    exports.PRE_DESTROY_ERROR = PRE_DESTROY_ERROR;
    var ON_DEACTIVATION_ERROR = (clazz, errorMessage) => `onDeactivation() error in class ${clazz}: ${errorMessage}`;
    exports.ON_DEACTIVATION_ERROR = ON_DEACTIVATION_ERROR;
    var CIRCULAR_DEPENDENCY_IN_FACTORY = (factoryType, serviceIdentifier) => `It looks like there is a circular dependency in one of the '${factoryType}' bindings. Please investigate bindings with service identifier '${serviceIdentifier}'.`;
    exports.CIRCULAR_DEPENDENCY_IN_FACTORY = CIRCULAR_DEPENDENCY_IN_FACTORY;
    exports.STACK_OVERFLOW = "Maximum call stack size exceeded";
    function keyToString(key) {
      if (typeof key === "function") {
        return `[function/class ${key.name || "<anonymous>"}]`;
      }
      if (typeof key === "symbol") {
        return key.toString();
      }
      return `'${key}'`;
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/metadata_reader.js
var require_metadata_reader = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/metadata_reader.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.MetadataReader = void 0;
    var METADATA_KEY = __importStar(require_metadata_keys());
    var MetadataReader = class {
      getConstructorMetadata(constructorFunc) {
        const compilerGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, constructorFunc) ?? [];
        const userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED, constructorFunc);
        return {
          compilerGeneratedMetadata,
          userGeneratedMetadata: userGeneratedMetadata ?? {}
        };
      }
      getPropertiesMetadata(constructorFunc) {
        const userGeneratedMetadata = Reflect.getMetadata(METADATA_KEY.TAGGED_PROP, constructorFunc) ?? {};
        return userGeneratedMetadata;
      }
    };
    exports.MetadataReader = MetadataReader;
  }
});

// ../../node_modules/.pnpm/@inversifyjs+reflect-metadata-utils@0.2.4_reflect-metadata@0.1.14/node_modules/@inversifyjs/reflect-metadata-utils/lib/cjs/reflectMetadata/utils/getReflectMetadata.js
var require_getReflectMetadata = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+reflect-metadata-utils@0.2.4_reflect-metadata@0.1.14/node_modules/@inversifyjs/reflect-metadata-utils/lib/cjs/reflectMetadata/utils/getReflectMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getReflectMetadata = getReflectMetadata;
    function getReflectMetadata(target, metadataKey) {
      return Reflect.getMetadata(metadataKey, target);
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+reflect-metadata-utils@0.2.4_reflect-metadata@0.1.14/node_modules/@inversifyjs/reflect-metadata-utils/lib/cjs/reflectMetadata/utils/updateReflectMetadata.js
var require_updateReflectMetadata = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+reflect-metadata-utils@0.2.4_reflect-metadata@0.1.14/node_modules/@inversifyjs/reflect-metadata-utils/lib/cjs/reflectMetadata/utils/updateReflectMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateReflectMetadata = updateReflectMetadata;
    var getReflectMetadata_1 = require_getReflectMetadata();
    function updateReflectMetadata(target, metadataKey, defaultValue, callback) {
      const metadata = (0, getReflectMetadata_1.getReflectMetadata)(target, metadataKey) ?? defaultValue;
      const updatedMetadata = callback(metadata);
      Reflect.defineMetadata(metadataKey, updatedMetadata, target);
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+reflect-metadata-utils@0.2.4_reflect-metadata@0.1.14/node_modules/@inversifyjs/reflect-metadata-utils/lib/cjs/index.js
var require_cjs2 = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+reflect-metadata-utils@0.2.4_reflect-metadata@0.1.14/node_modules/@inversifyjs/reflect-metadata-utils/lib/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateReflectMetadata = exports.getReflectMetadata = void 0;
    var getReflectMetadata_1 = require_getReflectMetadata();
    Object.defineProperty(exports, "getReflectMetadata", { enumerable: true, get: function() {
      return getReflectMetadata_1.getReflectMetadata;
    } });
    var updateReflectMetadata_1 = require_updateReflectMetadata();
    Object.defineProperty(exports, "updateReflectMetadata", { enumerable: true, get: function() {
      return updateReflectMetadata_1.updateReflectMetadata;
    } });
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/reflectMetadata/data/keys.js
var require_keys = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/reflectMetadata/data/keys.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.NON_CUSTOM_TAG_KEYS = exports.PRE_DESTROY = exports.POST_CONSTRUCT = exports.DESIGN_PARAM_TYPES = exports.PARAM_TYPES = exports.TAGGED_PROP = exports.TAGGED = exports.MULTI_INJECT_TAG = exports.INJECT_TAG = exports.OPTIONAL_TAG = exports.UNMANAGED_TAG = exports.NAME_TAG = exports.NAMED_TAG = void 0;
    exports.NAMED_TAG = "named";
    exports.NAME_TAG = "name";
    exports.UNMANAGED_TAG = "unmanaged";
    exports.OPTIONAL_TAG = "optional";
    exports.INJECT_TAG = "inject";
    exports.MULTI_INJECT_TAG = "multi_inject";
    exports.TAGGED = "inversify:tagged";
    exports.TAGGED_PROP = "inversify:tagged_props";
    exports.PARAM_TYPES = "inversify:paramtypes";
    exports.DESIGN_PARAM_TYPES = "design:paramtypes";
    exports.POST_CONSTRUCT = "post_construct";
    exports.PRE_DESTROY = "pre_destroy";
    function getNonCustomTagKeys() {
      return [
        exports.INJECT_TAG,
        exports.MULTI_INJECT_TAG,
        exports.NAME_TAG,
        exports.UNMANAGED_TAG,
        exports.NAMED_TAG,
        exports.OPTIONAL_TAG
      ];
    }
    exports.NON_CUSTOM_TAG_KEYS = getNonCustomTagKeys();
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/error/models/InversifyCoreError.js
var require_InversifyCoreError = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/error/models/InversifyCoreError.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InversifyCoreError = exports.isAppErrorSymbol = void 0;
    exports.isAppErrorSymbol = Symbol.for("@inversifyjs/core/InversifyCoreError");
    var _a, _b;
    var InversifyCoreError = class _InversifyCoreError extends (_b = Error, _a = exports.isAppErrorSymbol, _b) {
      constructor(kind, message, options) {
        super(message, options);
        __publicField(this, _a);
        __publicField(this, "kind");
        this[exports.isAppErrorSymbol] = true;
        this.kind = kind;
      }
      static is(value) {
        return typeof value === "object" && value !== null && value[exports.isAppErrorSymbol] === true;
      }
      static isErrorOfKind(value, kind) {
        return _InversifyCoreError.is(value) && value.kind === kind;
      }
    };
    exports.InversifyCoreError = InversifyCoreError;
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/error/models/InversifyCoreErrorKind.js
var require_InversifyCoreErrorKind = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/error/models/InversifyCoreErrorKind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.InversifyCoreErrorKind = void 0;
    var InversifyCoreErrorKind;
    (function(InversifyCoreErrorKind2) {
      InversifyCoreErrorKind2[InversifyCoreErrorKind2["injectionDecoratorConflict"] = 0] = "injectionDecoratorConflict";
      InversifyCoreErrorKind2[InversifyCoreErrorKind2["missingInjectionDecorator"] = 1] = "missingInjectionDecorator";
      InversifyCoreErrorKind2[InversifyCoreErrorKind2["planning"] = 2] = "planning";
      InversifyCoreErrorKind2[InversifyCoreErrorKind2["unknown"] = 3] = "unknown";
    })(InversifyCoreErrorKind || (exports.InversifyCoreErrorKind = InversifyCoreErrorKind = {}));
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/assertConstructorMetadataArrayFilled.js
var require_assertConstructorMetadataArrayFilled = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/assertConstructorMetadataArrayFilled.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assertConstructorMetadataArrayFilled = assertConstructorMetadataArrayFilled;
    var InversifyCoreError_1 = require_InversifyCoreError();
    var InversifyCoreErrorKind_1 = require_InversifyCoreErrorKind();
    function assertConstructorMetadataArrayFilled(type, value) {
      const undefinedIndexes = [];
      for (let i = 0; i < value.length; ++i) {
        const element = value[i];
        if (element === void 0) {
          undefinedIndexes.push(i);
        }
      }
      if (undefinedIndexes.length > 0) {
        throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, `Found unexpected missing metadata on type "${type.name}" at constructor indexes "${undefinedIndexes.join('", "')}".

Are you using @inject, @multiInject or @unmanaged decorators at those indexes?

If you're using typescript and want to rely on auto injection, set "emitDecoratorMetadata" compiler option to true`);
      }
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/models/ClassElementMetadataKind.js
var require_ClassElementMetadataKind = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/models/ClassElementMetadataKind.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ClassElementMetadataKind = void 0;
    var ClassElementMetadataKind;
    (function(ClassElementMetadataKind2) {
      ClassElementMetadataKind2[ClassElementMetadataKind2["multipleInjection"] = 0] = "multipleInjection";
      ClassElementMetadataKind2[ClassElementMetadataKind2["singleInjection"] = 1] = "singleInjection";
      ClassElementMetadataKind2[ClassElementMetadataKind2["unmanaged"] = 2] = "unmanaged";
    })(ClassElementMetadataKind || (exports.ClassElementMetadataKind = ClassElementMetadataKind = {}));
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassElementMetadataFromNewable.js
var require_getClassElementMetadataFromNewable = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassElementMetadataFromNewable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassElementMetadataFromNewable = getClassElementMetadataFromNewable;
    var ClassElementMetadataKind_1 = require_ClassElementMetadataKind();
    function getClassElementMetadataFromNewable(type) {
      return {
        kind: ClassElementMetadataKind_1.ClassElementMetadataKind.singleInjection,
        name: void 0,
        optional: false,
        tags: /* @__PURE__ */ new Map(),
        targetName: void 0,
        value: type
      };
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassElementMetadataFromLegacyMetadata.js
var require_getClassElementMetadataFromLegacyMetadata = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassElementMetadataFromLegacyMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassElementMetadataFromLegacyMetadata = getClassElementMetadataFromLegacyMetadata;
    var InversifyCoreError_1 = require_InversifyCoreError();
    var InversifyCoreErrorKind_1 = require_InversifyCoreErrorKind();
    var keys_1 = require_keys();
    var ClassElementMetadataKind_1 = require_ClassElementMetadataKind();
    function getClassElementMetadataFromLegacyMetadata(metadataList) {
      const injectMetadata = metadataList.find((metadata) => metadata.key === keys_1.INJECT_TAG);
      const multiInjectMetadata = metadataList.find((metadata) => metadata.key === keys_1.MULTI_INJECT_TAG);
      const unmanagedMetadata = metadataList.find((metadata) => metadata.key === keys_1.UNMANAGED_TAG);
      if (unmanagedMetadata !== void 0) {
        return getUnmanagedClassElementMetadata(injectMetadata, multiInjectMetadata);
      }
      if (multiInjectMetadata === void 0 && injectMetadata === void 0) {
        throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, "Expected @inject, @multiInject or @unmanaged metadata");
      }
      const nameMetadata = metadataList.find((metadata) => metadata.key === keys_1.NAMED_TAG);
      const optionalMetadata = metadataList.find((metadata) => metadata.key === keys_1.OPTIONAL_TAG);
      const targetNameMetadata = metadataList.find((metadata) => metadata.key === keys_1.NAME_TAG);
      const managedClassElementMetadata = {
        kind: injectMetadata === void 0 ? ClassElementMetadataKind_1.ClassElementMetadataKind.multipleInjection : ClassElementMetadataKind_1.ClassElementMetadataKind.singleInjection,
        name: nameMetadata == null ? void 0 : nameMetadata.value,
        optional: optionalMetadata !== void 0,
        tags: new Map(metadataList.filter((metadata) => keys_1.NON_CUSTOM_TAG_KEYS.every((customTagKey) => metadata.key !== customTagKey)).map((metadata) => [
          metadata.key,
          metadata.value
        ])),
        targetName: targetNameMetadata == null ? void 0 : targetNameMetadata.value,
        value: injectMetadata === void 0 ? multiInjectMetadata == null ? void 0 : multiInjectMetadata.value : injectMetadata.value
      };
      return managedClassElementMetadata;
    }
    function getUnmanagedClassElementMetadata(injectMetadata, multiInjectMetadata) {
      if (multiInjectMetadata !== void 0 || injectMetadata !== void 0) {
        throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, "Expected a single @inject, @multiInject or @unmanaged metadata");
      }
      return {
        kind: ClassElementMetadataKind_1.ClassElementMetadataKind.unmanaged
      };
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getConstructorArgumentMetadataFromLegacyMetadata.js
var require_getConstructorArgumentMetadataFromLegacyMetadata = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getConstructorArgumentMetadataFromLegacyMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getConstructorArgumentMetadataFromLegacyMetadata = getConstructorArgumentMetadataFromLegacyMetadata;
    var InversifyCoreError_1 = require_InversifyCoreError();
    var InversifyCoreErrorKind_1 = require_InversifyCoreErrorKind();
    var getClassElementMetadataFromLegacyMetadata_1 = require_getClassElementMetadataFromLegacyMetadata();
    function getConstructorArgumentMetadataFromLegacyMetadata(type, index2, metadataList) {
      try {
        return (0, getClassElementMetadataFromLegacyMetadata_1.getClassElementMetadataFromLegacyMetadata)(metadataList);
      } catch (error) {
        if (InversifyCoreError_1.InversifyCoreError.isErrorOfKind(error, InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator)) {
          throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, `Expected a single @inject, @multiInject or @unmanaged decorator at type "${type.name}" at constructor arguments at index "${index2.toString()}"`, { cause: error });
        } else {
          throw error;
        }
      }
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataConstructorArguments.js
var require_getClassMetadataConstructorArguments = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataConstructorArguments.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassMetadataConstructorArguments = getClassMetadataConstructorArguments;
    var reflect_metadata_utils_1 = require_cjs2();
    var keys_1 = require_keys();
    var assertConstructorMetadataArrayFilled_1 = require_assertConstructorMetadataArrayFilled();
    var getClassElementMetadataFromNewable_1 = require_getClassElementMetadataFromNewable();
    var getConstructorArgumentMetadataFromLegacyMetadata_1 = require_getConstructorArgumentMetadataFromLegacyMetadata();
    function getClassMetadataConstructorArguments(type) {
      const typescriptMetadataList = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.DESIGN_PARAM_TYPES);
      const constructorParametersLegacyMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.TAGGED);
      const constructorArgumentsMetadata = [];
      if (constructorParametersLegacyMetadata !== void 0) {
        for (const [stringifiedIndex, metadataList] of Object.entries(constructorParametersLegacyMetadata)) {
          const index2 = parseInt(stringifiedIndex);
          constructorArgumentsMetadata[index2] = (0, getConstructorArgumentMetadataFromLegacyMetadata_1.getConstructorArgumentMetadataFromLegacyMetadata)(type, index2, metadataList);
        }
      }
      if (typescriptMetadataList !== void 0) {
        for (let i = 0; i < typescriptMetadataList.length; ++i) {
          if (constructorArgumentsMetadata[i] === void 0) {
            const typescriptMetadata = typescriptMetadataList[i];
            constructorArgumentsMetadata[i] = (0, getClassElementMetadataFromNewable_1.getClassElementMetadataFromNewable)(typescriptMetadata);
          }
        }
      }
      (0, assertConstructorMetadataArrayFilled_1.assertConstructorMetadataArrayFilled)(type, constructorArgumentsMetadata);
      return constructorArgumentsMetadata;
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getPropertyMetadataFromLegacyMetadata.js
var require_getPropertyMetadataFromLegacyMetadata = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getPropertyMetadataFromLegacyMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getPropertyMetadataFromLegacyMetadata = getPropertyMetadataFromLegacyMetadata;
    var InversifyCoreError_1 = require_InversifyCoreError();
    var InversifyCoreErrorKind_1 = require_InversifyCoreErrorKind();
    var getClassElementMetadataFromLegacyMetadata_1 = require_getClassElementMetadataFromLegacyMetadata();
    function getPropertyMetadataFromLegacyMetadata(type, key, metadataList) {
      try {
        return (0, getClassElementMetadataFromLegacyMetadata_1.getClassElementMetadataFromLegacyMetadata)(metadataList);
      } catch (error) {
        if (InversifyCoreError_1.InversifyCoreError.isErrorOfKind(error, InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator)) {
          throw new InversifyCoreError_1.InversifyCoreError(InversifyCoreErrorKind_1.InversifyCoreErrorKind.missingInjectionDecorator, `Expected a single @inject, @multiInject or @unmanaged decorator at type "${type.name}" at property "${key.toString()}"`, { cause: error });
        } else {
          throw error;
        }
      }
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataProperties.js
var require_getClassMetadataProperties = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassMetadataProperties = getClassMetadataProperties;
    var reflect_metadata_utils_1 = require_cjs2();
    var keys_1 = require_keys();
    var getPropertyMetadataFromLegacyMetadata_1 = require_getPropertyMetadataFromLegacyMetadata();
    function getClassMetadataProperties(type) {
      const propertiesLegacyMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.TAGGED_PROP);
      const propertiesMetadata = /* @__PURE__ */ new Map();
      if (propertiesLegacyMetadata !== void 0) {
        for (const property of Reflect.ownKeys(propertiesLegacyMetadata)) {
          const legacyMetadata = propertiesLegacyMetadata[property];
          propertiesMetadata.set(property, (0, getPropertyMetadataFromLegacyMetadata_1.getPropertyMetadataFromLegacyMetadata)(type, property, legacyMetadata));
        }
      }
      return propertiesMetadata;
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadata.js
var require_getClassMetadata = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassMetadata = getClassMetadata;
    var reflect_metadata_utils_1 = require_cjs2();
    var keys_1 = require_keys();
    var getClassMetadataConstructorArguments_1 = require_getClassMetadataConstructorArguments();
    var getClassMetadataProperties_1 = require_getClassMetadataProperties();
    function getClassMetadata(type) {
      const postConstructMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.POST_CONSTRUCT);
      const preDestroyMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.PRE_DESTROY);
      const classMetadata = {
        constructorArguments: (0, getClassMetadataConstructorArguments_1.getClassMetadataConstructorArguments)(type),
        lifecycle: {
          postConstructMethodName: postConstructMetadata == null ? void 0 : postConstructMetadata.value,
          preDestroyMethodName: preDestroyMetadata == null ? void 0 : preDestroyMetadata.value
        },
        properties: (0, getClassMetadataProperties_1.getClassMetadataProperties)(type)
      };
      return classMetadata;
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataConstructorArgumentsFromMetadataReader.js
var require_getClassMetadataConstructorArgumentsFromMetadataReader = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataConstructorArgumentsFromMetadataReader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassMetadataConstructorArgumentsFromMetadataReader = getClassMetadataConstructorArgumentsFromMetadataReader;
    var assertConstructorMetadataArrayFilled_1 = require_assertConstructorMetadataArrayFilled();
    var getClassElementMetadataFromNewable_1 = require_getClassElementMetadataFromNewable();
    var getConstructorArgumentMetadataFromLegacyMetadata_1 = require_getConstructorArgumentMetadataFromLegacyMetadata();
    function getClassMetadataConstructorArgumentsFromMetadataReader(type, metadataReader) {
      const legacyConstructorMetadata = metadataReader.getConstructorMetadata(type);
      const constructorArgumentsMetadata = [];
      for (const [stringifiedIndex, metadataList] of Object.entries(legacyConstructorMetadata.userGeneratedMetadata)) {
        const index2 = parseInt(stringifiedIndex);
        constructorArgumentsMetadata[index2] = (0, getConstructorArgumentMetadataFromLegacyMetadata_1.getConstructorArgumentMetadataFromLegacyMetadata)(type, index2, metadataList);
      }
      if (legacyConstructorMetadata.compilerGeneratedMetadata !== void 0) {
        for (let i = 0; i < legacyConstructorMetadata.compilerGeneratedMetadata.length; ++i) {
          if (constructorArgumentsMetadata[i] === void 0) {
            const typescriptMetadata = legacyConstructorMetadata.compilerGeneratedMetadata[i];
            constructorArgumentsMetadata[i] = (0, getClassElementMetadataFromNewable_1.getClassElementMetadataFromNewable)(typescriptMetadata);
          }
        }
      }
      (0, assertConstructorMetadataArrayFilled_1.assertConstructorMetadataArrayFilled)(type, constructorArgumentsMetadata);
      return constructorArgumentsMetadata;
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataPropertiesFromMetadataReader.js
var require_getClassMetadataPropertiesFromMetadataReader = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataPropertiesFromMetadataReader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassMetadataPropertiesFromMetadataReader = getClassMetadataPropertiesFromMetadataReader;
    var getPropertyMetadataFromLegacyMetadata_1 = require_getPropertyMetadataFromLegacyMetadata();
    function getClassMetadataPropertiesFromMetadataReader(type, metadataReader) {
      const propertiesLegacyMetadata = metadataReader.getPropertiesMetadata(type);
      const propertiesMetadata = /* @__PURE__ */ new Map();
      for (const property of Reflect.ownKeys(propertiesLegacyMetadata)) {
        const legacyMetadata = propertiesLegacyMetadata[property];
        propertiesMetadata.set(property, (0, getPropertyMetadataFromLegacyMetadata_1.getPropertyMetadataFromLegacyMetadata)(type, property, legacyMetadata));
      }
      return propertiesMetadata;
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataFromMetadataReader.js
var require_getClassMetadataFromMetadataReader = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getClassMetadataFromMetadataReader.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getClassMetadataFromMetadataReader = getClassMetadataFromMetadataReader;
    var reflect_metadata_utils_1 = require_cjs2();
    var keys_1 = require_keys();
    var getClassMetadataConstructorArgumentsFromMetadataReader_1 = require_getClassMetadataConstructorArgumentsFromMetadataReader();
    var getClassMetadataPropertiesFromMetadataReader_1 = require_getClassMetadataPropertiesFromMetadataReader();
    function getClassMetadataFromMetadataReader(type, metadataReader) {
      const postConstructMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.POST_CONSTRUCT);
      const preDestroyMetadata = (0, reflect_metadata_utils_1.getReflectMetadata)(type, keys_1.PRE_DESTROY);
      const classMetadata = {
        constructorArguments: (0, getClassMetadataConstructorArgumentsFromMetadataReader_1.getClassMetadataConstructorArgumentsFromMetadataReader)(type, metadataReader),
        lifecycle: {
          postConstructMethodName: postConstructMetadata == null ? void 0 : postConstructMetadata.value,
          preDestroyMethodName: preDestroyMetadata == null ? void 0 : preDestroyMetadata.value
        },
        properties: (0, getClassMetadataPropertiesFromMetadataReader_1.getClassMetadataPropertiesFromMetadataReader)(type, metadataReader)
      };
      return classMetadata;
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/prototype/calculations/getBaseType.js
var require_getBaseType = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/prototype/calculations/getBaseType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBaseType = getBaseType;
    function getBaseType(type) {
      const prototype = Object.getPrototypeOf(type.prototype);
      const baseType = prototype == null ? void 0 : prototype.constructor;
      return baseType;
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getLegacyMetadata.js
var require_getLegacyMetadata = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/metadata/calculations/getLegacyMetadata.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getLegacyMetadata = getLegacyMetadata;
    var keys_1 = require_keys();
    var ClassElementMetadataKind_1 = require_ClassElementMetadataKind();
    function getLegacyMetadata(classElementMetadata) {
      switch (classElementMetadata.kind) {
        case ClassElementMetadataKind_1.ClassElementMetadataKind.unmanaged:
          return getUnmanagedLegacyMetadata();
        default:
          return getManagedLegacyMetadata(classElementMetadata);
      }
    }
    function getManagedLegacyMetadata(classElementMetadata) {
      const legacyMetadataList = [
        getManagedKindLegacyMetadata(classElementMetadata)
      ];
      if (classElementMetadata.name !== void 0) {
        legacyMetadataList.push({
          key: keys_1.NAMED_TAG,
          value: classElementMetadata.name
        });
      }
      if (classElementMetadata.optional) {
        legacyMetadataList.push({
          key: keys_1.OPTIONAL_TAG,
          value: true
        });
      }
      for (const [tagKey, tagValue] of classElementMetadata.tags) {
        legacyMetadataList.push({
          key: tagKey,
          value: tagValue
        });
      }
      if (classElementMetadata.targetName !== void 0) {
        legacyMetadataList.push({
          key: keys_1.NAME_TAG,
          value: classElementMetadata.targetName
        });
      }
      return legacyMetadataList;
    }
    function getManagedKindLegacyMetadata(classElementMetadata) {
      let kindLegacyMetadata;
      switch (classElementMetadata.kind) {
        case ClassElementMetadataKind_1.ClassElementMetadataKind.multipleInjection:
          kindLegacyMetadata = {
            key: keys_1.MULTI_INJECT_TAG,
            value: classElementMetadata.value
          };
          break;
        case ClassElementMetadataKind_1.ClassElementMetadataKind.singleInjection:
          kindLegacyMetadata = {
            key: keys_1.INJECT_TAG,
            value: classElementMetadata.value
          };
          break;
      }
      return kindLegacyMetadata;
    }
    function getUnmanagedLegacyMetadata() {
      return [
        {
          key: keys_1.UNMANAGED_TAG,
          value: true
        }
      ];
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/string/models/LegacyQueryableStringImpl.js
var require_LegacyQueryableStringImpl = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/string/models/LegacyQueryableStringImpl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LegacyQueryableStringImpl = void 0;
    var _str;
    var LegacyQueryableStringImpl = class {
      constructor(str) {
        __privateAdd(this, _str);
        __privateSet(this, _str, str);
      }
      startsWith(searchString) {
        return __privateGet(this, _str).startsWith(searchString);
      }
      endsWith(searchString) {
        return __privateGet(this, _str).endsWith(searchString);
      }
      contains(searchString) {
        return __privateGet(this, _str).includes(searchString);
      }
      equals(compareString) {
        return __privateGet(this, _str) === compareString;
      }
      value() {
        return __privateGet(this, _str);
      }
    };
    _str = new WeakMap();
    exports.LegacyQueryableStringImpl = LegacyQueryableStringImpl;
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/symbol/calculations/getDescription.js
var require_getDescription = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/symbol/calculations/getDescription.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDescription = getDescription;
    var SYMBOL_INDEX_START = 7;
    var SYMBOL_INDEX_END = -1;
    function getDescription(symbol) {
      return symbol.toString().slice(SYMBOL_INDEX_START, SYMBOL_INDEX_END);
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/legacyTarget/calculations/getTargetId.js
var require_getTargetId = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/legacyTarget/calculations/getTargetId.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTargetId = getTargetId;
    var reflect_metadata_utils_1 = require_cjs2();
    var ID_METADATA = "@inversifyjs/core/targetId";
    function getTargetId() {
      const targetId = (0, reflect_metadata_utils_1.getReflectMetadata)(Object, ID_METADATA) ?? 0;
      if (targetId === Number.MAX_SAFE_INTEGER) {
        (0, reflect_metadata_utils_1.updateReflectMetadata)(Object, ID_METADATA, targetId, () => Number.MIN_SAFE_INTEGER);
      } else {
        (0, reflect_metadata_utils_1.updateReflectMetadata)(Object, ID_METADATA, targetId, (id) => id + 1);
      }
      return targetId;
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/legacyTarget/models/LegacyTargetImpl.js
var require_LegacyTargetImpl = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/legacyTarget/models/LegacyTargetImpl.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LegacyTargetImpl = void 0;
    var common_1 = require_cjs();
    var getLegacyMetadata_1 = require_getLegacyMetadata();
    var ClassElementMetadataKind_1 = require_ClassElementMetadataKind();
    var keys_1 = require_keys();
    var LegacyQueryableStringImpl_1 = require_LegacyQueryableStringImpl();
    var getDescription_1 = require_getDescription();
    var getTargetId_1 = require_getTargetId();
    var _metadata, _id, _identifier, _lazyLegacyMetadata, _name, _type;
    var LegacyTargetImpl = class {
      constructor(identifier, metadata, type) {
        __privateAdd(this, _metadata);
        __privateAdd(this, _id);
        __privateAdd(this, _identifier);
        __privateAdd(this, _lazyLegacyMetadata);
        __privateAdd(this, _name);
        __privateAdd(this, _type);
        __privateSet(this, _id, (0, getTargetId_1.getTargetId)());
        __privateSet(this, _identifier, identifier);
        __privateSet(this, _lazyLegacyMetadata, void 0);
        __privateSet(this, _metadata, metadata);
        __privateSet(this, _name, new LegacyQueryableStringImpl_1.LegacyQueryableStringImpl(typeof identifier === "string" ? identifier : (0, getDescription_1.getDescription)(identifier)));
        __privateSet(this, _type, type);
      }
      get id() {
        return __privateGet(this, _id);
      }
      /**
       * If this is a class property target, this is the name of the property to be injected
       */
      get identifier() {
        return __privateGet(this, _identifier);
      }
      get metadata() {
        if (__privateGet(this, _lazyLegacyMetadata) === void 0) {
          __privateSet(this, _lazyLegacyMetadata, (0, getLegacyMetadata_1.getLegacyMetadata)(__privateGet(this, _metadata)));
        }
        return __privateGet(this, _lazyLegacyMetadata);
      }
      get name() {
        return __privateGet(this, _name);
      }
      get type() {
        return __privateGet(this, _type);
      }
      get serviceIdentifier() {
        if (common_1.LazyServiceIdentifier.is(__privateGet(this, _metadata).value)) {
          return __privateGet(this, _metadata).value.unwrap();
        } else {
          return __privateGet(this, _metadata).value;
        }
      }
      getCustomTags() {
        return [...__privateGet(this, _metadata).tags.entries()].map(([key, value]) => ({
          key,
          value
        }));
      }
      getNamedTag() {
        return __privateGet(this, _metadata).name === void 0 ? null : {
          key: keys_1.NAMED_TAG,
          value: __privateGet(this, _metadata).name
        };
      }
      hasTag(key) {
        return this.metadata.some((metadata) => metadata.key === key);
      }
      isArray() {
        return __privateGet(this, _metadata).kind === ClassElementMetadataKind_1.ClassElementMetadataKind.multipleInjection;
      }
      isNamed() {
        return __privateGet(this, _metadata).name !== void 0;
      }
      isOptional() {
        return __privateGet(this, _metadata).optional;
      }
      isTagged() {
        return __privateGet(this, _metadata).tags.size > 0;
      }
      matchesArray(name) {
        return this.isArray() && __privateGet(this, _metadata).value === name;
      }
      matchesNamedTag(name) {
        return __privateGet(this, _metadata).name === name;
      }
      matchesTag(key) {
        return (value) => this.metadata.some((metadata) => metadata.key === key && metadata.value === value);
      }
    };
    _metadata = new WeakMap();
    _id = new WeakMap();
    _identifier = new WeakMap();
    _lazyLegacyMetadata = new WeakMap();
    _name = new WeakMap();
    _type = new WeakMap();
    exports.LegacyTargetImpl = LegacyTargetImpl;
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/legacyTarget/calculations/getTargetsFromMetadataProviders.js
var require_getTargetsFromMetadataProviders = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/legacyTarget/calculations/getTargetsFromMetadataProviders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTargetsFromMetadataProviders = getTargetsFromMetadataProviders;
    var ClassElementMetadataKind_1 = require_ClassElementMetadataKind();
    var getBaseType_1 = require_getBaseType();
    var LegacyTargetImpl_1 = require_LegacyTargetImpl();
    function getTargetsFromMetadataProviders(getClassMetadata, getClassMetadataProperties) {
      return function getTagets(type) {
        const classMetadata = getClassMetadata(type);
        let baseType = (0, getBaseType_1.getBaseType)(type);
        while (baseType !== void 0 && baseType !== Object) {
          const classMetadataProperties = getClassMetadataProperties(baseType);
          for (const [propertyKey, propertyValue] of classMetadataProperties) {
            if (!classMetadata.properties.has(propertyKey)) {
              classMetadata.properties.set(propertyKey, propertyValue);
            }
          }
          baseType = (0, getBaseType_1.getBaseType)(baseType);
        }
        const targets = [];
        for (const constructorArgument of classMetadata.constructorArguments) {
          if (constructorArgument.kind !== ClassElementMetadataKind_1.ClassElementMetadataKind.unmanaged) {
            const targetName = constructorArgument.targetName ?? "";
            targets.push(new LegacyTargetImpl_1.LegacyTargetImpl(targetName, constructorArgument, "ConstructorArgument"));
          }
        }
        for (const [property, metadata] of classMetadata.properties) {
          if (metadata.kind !== ClassElementMetadataKind_1.ClassElementMetadataKind.unmanaged) {
            const targetName = metadata.targetName ?? property;
            targets.push(new LegacyTargetImpl_1.LegacyTargetImpl(targetName, metadata, "ClassProperty"));
          }
        }
        return targets;
      };
    }
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/legacyTarget/calculations/getTargets.js
var require_getTargets = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/legacyTarget/calculations/getTargets.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getTargets = void 0;
    var getClassMetadata_1 = require_getClassMetadata();
    var getClassMetadataFromMetadataReader_1 = require_getClassMetadataFromMetadataReader();
    var getClassMetadataProperties_1 = require_getClassMetadataProperties();
    var getClassMetadataPropertiesFromMetadataReader_1 = require_getClassMetadataPropertiesFromMetadataReader();
    var getTargetsFromMetadataProviders_1 = require_getTargetsFromMetadataProviders();
    var getTargets = (metadataReader) => {
      const getClassMetadataFn = metadataReader === void 0 ? getClassMetadata_1.getClassMetadata : (type) => (0, getClassMetadataFromMetadataReader_1.getClassMetadataFromMetadataReader)(type, metadataReader);
      const getClassMetadataPropertiesFn = metadataReader === void 0 ? getClassMetadataProperties_1.getClassMetadataProperties : (type) => (0, getClassMetadataPropertiesFromMetadataReader_1.getClassMetadataPropertiesFromMetadataReader)(type, metadataReader);
      return (0, getTargetsFromMetadataProviders_1.getTargetsFromMetadataProviders)(getClassMetadataFn, getClassMetadataPropertiesFn);
    };
    exports.getTargets = getTargets;
  }
});

// ../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/index.js
var require_cjs3 = __commonJS({
  "../../node_modules/.pnpm/@inversifyjs+core@1.3.5_reflect-metadata@0.1.14/node_modules/@inversifyjs/core/lib/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LegacyTargetImpl = exports.getTargets = exports.getClassMetadataFromMetadataReader = exports.getClassMetadata = exports.getClassElementMetadataFromLegacyMetadata = exports.ClassElementMetadataKind = void 0;
    var getTargets_1 = require_getTargets();
    Object.defineProperty(exports, "getTargets", { enumerable: true, get: function() {
      return getTargets_1.getTargets;
    } });
    var LegacyTargetImpl_1 = require_LegacyTargetImpl();
    Object.defineProperty(exports, "LegacyTargetImpl", { enumerable: true, get: function() {
      return LegacyTargetImpl_1.LegacyTargetImpl;
    } });
    var getClassElementMetadataFromLegacyMetadata_1 = require_getClassElementMetadataFromLegacyMetadata();
    Object.defineProperty(exports, "getClassElementMetadataFromLegacyMetadata", { enumerable: true, get: function() {
      return getClassElementMetadataFromLegacyMetadata_1.getClassElementMetadataFromLegacyMetadata;
    } });
    var getClassMetadata_1 = require_getClassMetadata();
    Object.defineProperty(exports, "getClassMetadata", { enumerable: true, get: function() {
      return getClassMetadata_1.getClassMetadata;
    } });
    var getClassMetadataFromMetadataReader_1 = require_getClassMetadataFromMetadataReader();
    Object.defineProperty(exports, "getClassMetadataFromMetadataReader", { enumerable: true, get: function() {
      return getClassMetadataFromMetadataReader_1.getClassMetadataFromMetadataReader;
    } });
    var ClassElementMetadataKind_1 = require_ClassElementMetadataKind();
    Object.defineProperty(exports, "ClassElementMetadataKind", { enumerable: true, get: function() {
      return ClassElementMetadataKind_1.ClassElementMetadataKind;
    } });
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/bindings/binding_count.js
var require_binding_count = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/bindings/binding_count.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingCount = void 0;
    var BindingCount;
    (function(BindingCount2) {
      BindingCount2[BindingCount2["MultipleBindingsAvailable"] = 2] = "MultipleBindingsAvailable";
      BindingCount2[BindingCount2["NoBindingsAvailable"] = 0] = "NoBindingsAvailable";
      BindingCount2[BindingCount2["OnlyOneBindingAvailable"] = 1] = "OnlyOneBindingAvailable";
    })(BindingCount || (exports.BindingCount = BindingCount = {}));
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/exceptions.js
var require_exceptions = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/exceptions.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tryAndThrowErrorIfStackOverflow = void 0;
    exports.isStackOverflowException = isStackOverflowException;
    var ERROR_MSGS = __importStar(require_error_msgs());
    function isStackOverflowException(error) {
      return error instanceof RangeError || error.message === ERROR_MSGS.STACK_OVERFLOW;
    }
    var tryAndThrowErrorIfStackOverflow = (fn, errorCallback) => {
      try {
        return fn();
      } catch (error) {
        if (isStackOverflowException(error)) {
          throw errorCallback();
        }
        throw error;
      }
    };
    exports.tryAndThrowErrorIfStackOverflow = tryAndThrowErrorIfStackOverflow;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/serialization.js
var require_serialization = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/serialization.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFunctionName = getFunctionName;
    exports.getServiceIdentifierAsString = getServiceIdentifierAsString;
    exports.listRegisteredBindingsForServiceIdentifier = listRegisteredBindingsForServiceIdentifier;
    exports.listMetadataForTarget = listMetadataForTarget;
    exports.circularDependencyToException = circularDependencyToException;
    exports.getSymbolDescription = getSymbolDescription;
    var ERROR_MSGS = __importStar(require_error_msgs());
    function getServiceIdentifierAsString(serviceIdentifier) {
      if (typeof serviceIdentifier === "function") {
        return serviceIdentifier.name;
      } else if (typeof serviceIdentifier === "symbol") {
        return serviceIdentifier.toString();
      } else {
        return serviceIdentifier;
      }
    }
    function listRegisteredBindingsForServiceIdentifier(container, serviceIdentifier, getBindings) {
      let registeredBindingsList = "";
      const registeredBindings = getBindings(container, serviceIdentifier);
      if (registeredBindings.length !== 0) {
        registeredBindingsList = "\nRegistered bindings:";
        registeredBindings.forEach((binding) => {
          let name = "Object";
          if (binding.implementationType !== null) {
            name = getFunctionName(binding.implementationType);
          }
          registeredBindingsList = `${registeredBindingsList}
 ${name}`;
          if (binding.constraint.metaData) {
            registeredBindingsList = `${registeredBindingsList} - ${binding.constraint.metaData}`;
          }
        });
      }
      return registeredBindingsList;
    }
    function alreadyDependencyChain(request, serviceIdentifier) {
      if (request.parentRequest === null) {
        return false;
      } else if (request.parentRequest.serviceIdentifier === serviceIdentifier) {
        return true;
      } else {
        return alreadyDependencyChain(request.parentRequest, serviceIdentifier);
      }
    }
    function dependencyChainToString(request) {
      function _createStringArr(req, result = []) {
        const serviceIdentifier = getServiceIdentifierAsString(req.serviceIdentifier);
        result.push(serviceIdentifier);
        if (req.parentRequest !== null) {
          return _createStringArr(req.parentRequest, result);
        }
        return result;
      }
      const stringArr = _createStringArr(request);
      return stringArr.reverse().join(" --> ");
    }
    function circularDependencyToException(request) {
      request.childRequests.forEach((childRequest) => {
        if (alreadyDependencyChain(request, childRequest.serviceIdentifier)) {
          const services = dependencyChainToString(childRequest);
          throw new Error(`${ERROR_MSGS.CIRCULAR_DEPENDENCY} ${services}`);
        } else {
          circularDependencyToException(childRequest);
        }
      });
    }
    function listMetadataForTarget(serviceIdentifierString, target) {
      if (target.isTagged() || target.isNamed()) {
        let m = "";
        const namedTag = target.getNamedTag();
        const otherTags = target.getCustomTags();
        if (namedTag !== null) {
          m += stringifyMetadata(namedTag) + "\n";
        }
        if (otherTags !== null) {
          otherTags.forEach((tag) => {
            m += stringifyMetadata(tag) + "\n";
          });
        }
        return ` ${serviceIdentifierString}
 ${serviceIdentifierString} - ${m}`;
      } else {
        return ` ${serviceIdentifierString}`;
      }
    }
    function getFunctionName(func) {
      if (func.name != null && func.name !== "") {
        return func.name;
      } else {
        const name = func.toString();
        const match = name.match(/^function\s*([^\s(]+)/);
        return match === null ? `Anonymous function: ${name}` : match[1];
      }
    }
    function getSymbolDescription(symbol) {
      return symbol.toString().slice(7, -1);
    }
    function stringifyMetadata(metadata) {
      return `{"key":"${metadata.key.toString()}","value":"${metadata.value.toString()}"}`;
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/context.js
var require_context = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/context.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Context = void 0;
    var id_1 = require_id();
    var Context = class {
      constructor(container) {
        __publicField(this, "id");
        __publicField(this, "container");
        __publicField(this, "plan");
        __publicField(this, "currentRequest");
        this.id = (0, id_1.id)();
        this.container = container;
      }
      addPlan(plan) {
        this.plan = plan;
      }
      setCurrentRequest(currentRequest) {
        this.currentRequest = currentRequest;
      }
    };
    exports.Context = Context;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/metadata.js
var require_metadata = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/metadata.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Metadata = void 0;
    var METADATA_KEY = __importStar(require_metadata_keys());
    var Metadata = class {
      constructor(key, value) {
        __publicField(this, "key");
        __publicField(this, "value");
        this.key = key;
        this.value = value;
      }
      toString() {
        if (this.key === METADATA_KEY.NAMED_TAG) {
          return `named: ${String(this.value).toString()} `;
        } else {
          return `tagged: { key:${this.key.toString()}, value: ${String(this.value)} }`;
        }
      }
    };
    exports.Metadata = Metadata;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/plan.js
var require_plan = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/plan.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Plan = void 0;
    var Plan = class {
      constructor(parentContext, rootRequest) {
        __publicField(this, "parentContext");
        __publicField(this, "rootRequest");
        this.parentContext = parentContext;
        this.rootRequest = rootRequest;
      }
    };
    exports.Plan = Plan;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/get_base_type.js
var require_get_base_type = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/get_base_type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBaseType = getBaseType;
    function getBaseType(type) {
      const prototype = Object.getPrototypeOf(type.prototype);
      const baseType = prototype == null ? void 0 : prototype.constructor;
      return baseType;
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/reflection_utils.js
var require_reflection_utils = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/reflection_utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFunctionName = void 0;
    exports.getDependencies = getDependencies;
    exports.getBaseClassDependencyCount = getBaseClassDependencyCount;
    var core_1 = require_cjs3();
    var METADATA_KEY = __importStar(require_metadata_keys());
    var get_base_type_1 = require_get_base_type();
    var serialization_1 = require_serialization();
    Object.defineProperty(exports, "getFunctionName", { enumerable: true, get: function() {
      return serialization_1.getFunctionName;
    } });
    function getDependencies(metadataReader, func) {
      return (0, core_1.getTargets)(metadataReader)(func);
    }
    function getBaseClassDependencyCount(metadataReader, func) {
      const baseConstructor = (0, get_base_type_1.getBaseType)(func);
      if (baseConstructor === void 0 || baseConstructor === Object) {
        return 0;
      }
      const targets = (0, core_1.getTargets)(metadataReader)(baseConstructor);
      const metadata = targets.map((t) => t.metadata.filter((m) => m.key === METADATA_KEY.UNMANAGED_TAG));
      const unmanagedCount = [].concat.apply([], metadata).length;
      const dependencyCount = targets.length - unmanagedCount;
      if (dependencyCount > 0) {
        return dependencyCount;
      } else {
        return getBaseClassDependencyCount(metadataReader, baseConstructor);
      }
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/request.js
var require_request = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Request = void 0;
    var id_1 = require_id();
    var Request2 = class _Request {
      constructor(serviceIdentifier, parentContext, parentRequest, bindings, target) {
        __publicField(this, "id");
        __publicField(this, "serviceIdentifier");
        __publicField(this, "parentContext");
        __publicField(this, "parentRequest");
        __publicField(this, "bindings");
        __publicField(this, "childRequests");
        __publicField(this, "target");
        __publicField(this, "requestScope");
        this.id = (0, id_1.id)();
        this.serviceIdentifier = serviceIdentifier;
        this.parentContext = parentContext;
        this.parentRequest = parentRequest;
        this.target = target;
        this.childRequests = [];
        this.bindings = Array.isArray(bindings) ? bindings : [bindings];
        this.requestScope = parentRequest === null ? /* @__PURE__ */ new Map() : null;
      }
      addChildRequest(serviceIdentifier, bindings, target) {
        const child = new _Request(serviceIdentifier, this.parentContext, this, bindings, target);
        this.childRequests.push(child);
        return child;
      }
    };
    exports.Request = Request2;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/planner.js
var require_planner = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/planning/planner.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getBindingDictionary = getBindingDictionary;
    exports.plan = plan;
    exports.createMockRequest = createMockRequest;
    var core_1 = require_cjs3();
    var binding_count_1 = require_binding_count();
    var ERROR_MSGS = __importStar(require_error_msgs());
    var literal_types_1 = require_literal_types();
    var METADATA_KEY = __importStar(require_metadata_keys());
    var exceptions_1 = require_exceptions();
    var serialization_1 = require_serialization();
    var context_1 = require_context();
    var metadata_1 = require_metadata();
    var plan_1 = require_plan();
    var reflection_utils_1 = require_reflection_utils();
    var request_1 = require_request();
    function getBindingDictionary(cntnr) {
      return cntnr._bindingDictionary;
    }
    function _createTarget(targetType, serviceIdentifier, metadata) {
      const metadataList = _getTargetMetadata(serviceIdentifier, metadata);
      const classElementMetadata = (0, core_1.getClassElementMetadataFromLegacyMetadata)(metadataList);
      if (classElementMetadata.kind === core_1.ClassElementMetadataKind.unmanaged) {
        throw new Error("Unexpected metadata when creating target");
      }
      const target = new core_1.LegacyTargetImpl("", classElementMetadata, targetType);
      return target;
    }
    function _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target) {
      let bindings = getBindings(context.container, target.serviceIdentifier);
      let activeBindings = [];
      if (bindings.length === binding_count_1.BindingCount.NoBindingsAvailable && context.container.options.autoBindInjectable === true && typeof target.serviceIdentifier === "function" && metadataReader.getConstructorMetadata(target.serviceIdentifier).compilerGeneratedMetadata) {
        context.container.bind(target.serviceIdentifier).toSelf();
        bindings = getBindings(context.container, target.serviceIdentifier);
      }
      if (!avoidConstraints) {
        activeBindings = bindings.filter((binding) => {
          const request = new request_1.Request(binding.serviceIdentifier, context, parentRequest, binding, target);
          return binding.constraint(request);
        });
      } else {
        activeBindings = bindings;
      }
      _validateActiveBindingCount(target.serviceIdentifier, activeBindings, parentRequest, target, context.container);
      return activeBindings;
    }
    function _getTargetMetadata(serviceIdentifier, metadata) {
      const metadataKey = metadata.isMultiInject ? METADATA_KEY.MULTI_INJECT_TAG : METADATA_KEY.INJECT_TAG;
      const metadataList = [
        new metadata_1.Metadata(metadataKey, serviceIdentifier)
      ];
      if (metadata.customTag !== void 0) {
        metadataList.push(new metadata_1.Metadata(metadata.customTag.key, metadata.customTag.value));
      }
      if (metadata.isOptional === true) {
        metadataList.push(new metadata_1.Metadata(METADATA_KEY.OPTIONAL_TAG, true));
      }
      return metadataList;
    }
    function _validateActiveBindingCount(serviceIdentifier, bindings, parentRequest, target, container) {
      switch (bindings.length) {
        case binding_count_1.BindingCount.NoBindingsAvailable:
          if (target.isOptional()) {
            return bindings;
          } else {
            const serviceIdentifierString = (0, serialization_1.getServiceIdentifierAsString)(serviceIdentifier);
            let msg = ERROR_MSGS.NOT_REGISTERED;
            msg += (0, serialization_1.listMetadataForTarget)(serviceIdentifierString, target);
            msg += (0, serialization_1.listRegisteredBindingsForServiceIdentifier)(container, serviceIdentifierString, getBindings);
            if (parentRequest !== null) {
              msg += `
${ERROR_MSGS.TRYING_TO_RESOLVE_BINDINGS((0, serialization_1.getServiceIdentifierAsString)(parentRequest.serviceIdentifier))}`;
            }
            throw new Error(msg);
          }
        case binding_count_1.BindingCount.OnlyOneBindingAvailable:
          return bindings;
        case binding_count_1.BindingCount.MultipleBindingsAvailable:
        default:
          if (!target.isArray()) {
            const serviceIdentifierString = (0, serialization_1.getServiceIdentifierAsString)(serviceIdentifier);
            let msg = `${ERROR_MSGS.AMBIGUOUS_MATCH} ${serviceIdentifierString}`;
            msg += (0, serialization_1.listRegisteredBindingsForServiceIdentifier)(container, serviceIdentifierString, getBindings);
            throw new Error(msg);
          } else {
            return bindings;
          }
      }
    }
    function _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, parentRequest, target) {
      let activeBindings;
      let childRequest;
      if (parentRequest === null) {
        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, null, target);
        childRequest = new request_1.Request(serviceIdentifier, context, null, activeBindings, target);
        const thePlan = new plan_1.Plan(context, childRequest);
        context.addPlan(thePlan);
      } else {
        activeBindings = _getActiveBindings(metadataReader, avoidConstraints, context, parentRequest, target);
        childRequest = parentRequest.addChildRequest(target.serviceIdentifier, activeBindings, target);
      }
      activeBindings.forEach((binding) => {
        let subChildRequest = null;
        if (target.isArray()) {
          subChildRequest = childRequest.addChildRequest(binding.serviceIdentifier, binding, target);
        } else {
          if (binding.cache !== null) {
            return;
          }
          subChildRequest = childRequest;
        }
        if (binding.type === literal_types_1.BindingTypeEnum.Instance && binding.implementationType !== null) {
          const dependencies = (0, reflection_utils_1.getDependencies)(metadataReader, binding.implementationType);
          if (context.container.options.skipBaseClassChecks !== true) {
            const baseClassDependencyCount = (0, reflection_utils_1.getBaseClassDependencyCount)(metadataReader, binding.implementationType);
            if (dependencies.length < baseClassDependencyCount) {
              const error = ERROR_MSGS.ARGUMENTS_LENGTH_MISMATCH((0, reflection_utils_1.getFunctionName)(binding.implementationType));
              throw new Error(error);
            }
          }
          dependencies.forEach((dependency) => {
            _createSubRequests(metadataReader, false, dependency.serviceIdentifier, context, subChildRequest, dependency);
          });
        }
      });
    }
    function getBindings(container, serviceIdentifier) {
      let bindings = [];
      const bindingDictionary = getBindingDictionary(container);
      if (bindingDictionary.hasKey(serviceIdentifier)) {
        bindings = bindingDictionary.get(serviceIdentifier);
      } else if (container.parent !== null) {
        bindings = getBindings(container.parent, serviceIdentifier);
      }
      return bindings;
    }
    function plan(metadataReader, container, targetType, serviceIdentifier, metadata, avoidConstraints = false) {
      const context = new context_1.Context(container);
      const target = _createTarget(targetType, serviceIdentifier, metadata);
      try {
        _createSubRequests(metadataReader, avoidConstraints, serviceIdentifier, context, null, target);
        return context;
      } catch (error) {
        if ((0, exceptions_1.isStackOverflowException)(error)) {
          (0, serialization_1.circularDependencyToException)(context.plan.rootRequest);
        }
        throw error;
      }
    }
    function createMockRequest(container, serviceIdentifier, metadata) {
      const metadataList = _getTargetMetadata(serviceIdentifier, metadata);
      const classElementMetadata = (0, core_1.getClassElementMetadataFromLegacyMetadata)(metadataList);
      if (classElementMetadata.kind === core_1.ClassElementMetadataKind.unmanaged) {
        throw new Error("Unexpected metadata when creating target");
      }
      const target = new core_1.LegacyTargetImpl("", classElementMetadata, "Variable");
      const context = new context_1.Context(container);
      const request = new request_1.Request(serviceIdentifier, context, null, [], target);
      return request;
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/async.js
var require_async = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/async.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isPromise = isPromise;
    exports.isPromiseOrContainsPromise = isPromiseOrContainsPromise;
    function isPromise(object) {
      const isObjectOrFunction = typeof object === "object" && object !== null || typeof object === "function";
      return isObjectOrFunction && typeof object.then === "function";
    }
    function isPromiseOrContainsPromise(object) {
      if (isPromise(object)) {
        return true;
      }
      return Array.isArray(object) && object.some(isPromise);
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/scope/scope.js
var require_scope = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/scope/scope.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.saveToScope = exports.tryGetFromScope = void 0;
    var literal_types_1 = require_literal_types();
    var async_1 = require_async();
    var tryGetFromScope = (requestScope, binding) => {
      if (binding.scope === literal_types_1.BindingScopeEnum.Singleton && binding.activated) {
        return binding.cache;
      }
      if (binding.scope === literal_types_1.BindingScopeEnum.Request && requestScope.has(binding.id)) {
        return requestScope.get(binding.id);
      }
      return null;
    };
    exports.tryGetFromScope = tryGetFromScope;
    var saveToScope = (requestScope, binding, result) => {
      if (binding.scope === literal_types_1.BindingScopeEnum.Singleton) {
        _saveToSingletonScope(binding, result);
      }
      if (binding.scope === literal_types_1.BindingScopeEnum.Request) {
        _saveToRequestScope(requestScope, binding, result);
      }
    };
    exports.saveToScope = saveToScope;
    var _saveToRequestScope = (requestScope, binding, result) => {
      if (!requestScope.has(binding.id)) {
        requestScope.set(binding.id, result);
      }
    };
    var _saveToSingletonScope = (binding, result) => {
      binding.cache = result;
      binding.activated = true;
      if ((0, async_1.isPromise)(result)) {
        void _saveAsyncResultToSingletonScope(binding, result);
      }
    };
    var _saveAsyncResultToSingletonScope = async (binding, asyncResult) => {
      try {
        const result = await asyncResult;
        binding.cache = result;
      } catch (ex) {
        binding.cache = null;
        binding.activated = false;
        throw ex;
      }
    };
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/factory_type.js
var require_factory_type = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/factory_type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FactoryType = void 0;
    var FactoryType;
    (function(FactoryType2) {
      FactoryType2["DynamicValue"] = "toDynamicValue";
      FactoryType2["Factory"] = "toFactory";
      FactoryType2["Provider"] = "toProvider";
    })(FactoryType || (exports.FactoryType = FactoryType = {}));
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/binding_utils.js
var require_binding_utils = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/binding_utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFactoryDetails = exports.ensureFullyBound = exports.multiBindToService = void 0;
    var ERROR_MSGS = __importStar(require_error_msgs());
    var literal_types_1 = require_literal_types();
    var serialization_1 = require_serialization();
    var factory_type_1 = require_factory_type();
    var multiBindToService = (container) => (service) => (...types) => {
      types.forEach((t) => {
        container.bind(t).toService(service);
      });
    };
    exports.multiBindToService = multiBindToService;
    var ensureFullyBound = (binding) => {
      let boundValue = null;
      switch (binding.type) {
        case literal_types_1.BindingTypeEnum.ConstantValue:
        case literal_types_1.BindingTypeEnum.Function:
          boundValue = binding.cache;
          break;
        case literal_types_1.BindingTypeEnum.Constructor:
        case literal_types_1.BindingTypeEnum.Instance:
          boundValue = binding.implementationType;
          break;
        case literal_types_1.BindingTypeEnum.DynamicValue:
          boundValue = binding.dynamicValue;
          break;
        case literal_types_1.BindingTypeEnum.Provider:
          boundValue = binding.provider;
          break;
        case literal_types_1.BindingTypeEnum.Factory:
          boundValue = binding.factory;
          break;
      }
      if (boundValue === null) {
        const serviceIdentifierAsString = (0, serialization_1.getServiceIdentifierAsString)(binding.serviceIdentifier);
        throw new Error(`${ERROR_MSGS.INVALID_BINDING_TYPE} ${serviceIdentifierAsString}`);
      }
    };
    exports.ensureFullyBound = ensureFullyBound;
    var getFactoryDetails = (binding) => {
      switch (binding.type) {
        case literal_types_1.BindingTypeEnum.Factory:
          return { factory: binding.factory, factoryType: factory_type_1.FactoryType.Factory };
        case literal_types_1.BindingTypeEnum.Provider:
          return { factory: binding.provider, factoryType: factory_type_1.FactoryType.Provider };
        case literal_types_1.BindingTypeEnum.DynamicValue:
          return {
            factory: binding.dynamicValue,
            factoryType: factory_type_1.FactoryType.DynamicValue
          };
        default:
          throw new Error(`Unexpected factory type ${binding.type}`);
      }
    };
    exports.getFactoryDetails = getFactoryDetails;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/resolution/instantiation.js
var require_instantiation = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/resolution/instantiation.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolveInstance = resolveInstance;
    var error_msgs_1 = require_error_msgs();
    var literal_types_1 = require_literal_types();
    var METADATA_KEY = __importStar(require_metadata_keys());
    var async_1 = require_async();
    function _resolveRequests(childRequests, resolveRequest) {
      return childRequests.reduce((resolvedRequests, childRequest) => {
        const injection = resolveRequest(childRequest);
        const targetType = childRequest.target.type;
        if (targetType === literal_types_1.TargetTypeEnum.ConstructorArgument) {
          resolvedRequests.constructorInjections.push(injection);
        } else {
          resolvedRequests.propertyRequests.push(childRequest);
          resolvedRequests.propertyInjections.push(injection);
        }
        if (!resolvedRequests.isAsync) {
          resolvedRequests.isAsync = (0, async_1.isPromiseOrContainsPromise)(injection);
        }
        return resolvedRequests;
      }, {
        constructorInjections: [],
        isAsync: false,
        propertyInjections: [],
        propertyRequests: []
      });
    }
    function _createInstance(constr, childRequests, resolveRequest) {
      let result;
      if (childRequests.length > 0) {
        const resolved = _resolveRequests(childRequests, resolveRequest);
        const createInstanceWithInjectionsArg = {
          ...resolved,
          constr
        };
        if (resolved.isAsync) {
          result = createInstanceWithInjectionsAsync(createInstanceWithInjectionsArg);
        } else {
          result = createInstanceWithInjections(createInstanceWithInjectionsArg);
        }
      } else {
        result = new constr();
      }
      return result;
    }
    function createInstanceWithInjections(args) {
      const instance = new args.constr(...args.constructorInjections);
      args.propertyRequests.forEach((r, index2) => {
        const property = r.target.identifier;
        const injection = args.propertyInjections[index2];
        if (!r.target.isOptional() || injection !== void 0) {
          instance[property] = injection;
        }
      });
      return instance;
    }
    async function createInstanceWithInjectionsAsync(args) {
      const constructorInjections = await possiblyWaitInjections(args.constructorInjections);
      const propertyInjections = await possiblyWaitInjections(args.propertyInjections);
      return createInstanceWithInjections({
        ...args,
        constructorInjections,
        propertyInjections
      });
    }
    async function possiblyWaitInjections(possiblePromiseinjections) {
      const injections = [];
      for (const injection of possiblePromiseinjections) {
        if (Array.isArray(injection)) {
          injections.push(Promise.all(injection));
        } else {
          injections.push(injection);
        }
      }
      return Promise.all(injections);
    }
    function _getInstanceAfterPostConstruct(constr, result) {
      const postConstructResult = _postConstruct(constr, result);
      if ((0, async_1.isPromise)(postConstructResult)) {
        return postConstructResult.then(() => result);
      } else {
        return result;
      }
    }
    function _postConstruct(constr, instance) {
      var _a;
      if (Reflect.hasMetadata(METADATA_KEY.POST_CONSTRUCT, constr)) {
        const data = Reflect.getMetadata(METADATA_KEY.POST_CONSTRUCT, constr);
        try {
          return (_a = instance[data.value]) == null ? void 0 : _a.call(instance);
        } catch (e) {
          if (e instanceof Error) {
            throw new Error((0, error_msgs_1.POST_CONSTRUCT_ERROR)(constr.name, e.message));
          }
        }
      }
    }
    function _validateInstanceResolution(binding, constr) {
      if (binding.scope !== literal_types_1.BindingScopeEnum.Singleton) {
        _throwIfHandlingDeactivation(binding, constr);
      }
    }
    function _throwIfHandlingDeactivation(binding, constr) {
      const scopeErrorMessage = `Class cannot be instantiated in ${binding.scope === literal_types_1.BindingScopeEnum.Request ? "request" : "transient"} scope.`;
      if (typeof binding.onDeactivation === "function") {
        throw new Error((0, error_msgs_1.ON_DEACTIVATION_ERROR)(constr.name, scopeErrorMessage));
      }
      if (Reflect.hasMetadata(METADATA_KEY.PRE_DESTROY, constr)) {
        throw new Error((0, error_msgs_1.PRE_DESTROY_ERROR)(constr.name, scopeErrorMessage));
      }
    }
    function resolveInstance(binding, constr, childRequests, resolveRequest) {
      _validateInstanceResolution(binding, constr);
      const result = _createInstance(constr, childRequests, resolveRequest);
      if ((0, async_1.isPromise)(result)) {
        return result.then((resolvedResult) => _getInstanceAfterPostConstruct(constr, resolvedResult));
      } else {
        return _getInstanceAfterPostConstruct(constr, result);
      }
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/resolution/resolver.js
var require_resolver = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/resolution/resolver.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.resolve = resolve;
    var ERROR_MSGS = __importStar(require_error_msgs());
    var literal_types_1 = require_literal_types();
    var planner_1 = require_planner();
    var scope_1 = require_scope();
    var async_1 = require_async();
    var binding_utils_1 = require_binding_utils();
    var exceptions_1 = require_exceptions();
    var instantiation_1 = require_instantiation();
    var _resolveRequest = (requestScope) => (request) => {
      request.parentContext.setCurrentRequest(request);
      const bindings = request.bindings;
      const childRequests = request.childRequests;
      const targetIsAnArray = request.target && request.target.isArray();
      const targetParentIsNotAnArray = !request.parentRequest || // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions
      !request.parentRequest.target || // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, @typescript-eslint/strict-boolean-expressions
      !request.target || !request.parentRequest.target.matchesArray(request.target.serviceIdentifier);
      if (targetIsAnArray && targetParentIsNotAnArray) {
        return childRequests.map((childRequest) => {
          const resolveRequest = _resolveRequest(requestScope);
          return resolveRequest(childRequest);
        });
      } else {
        if (request.target.isOptional() && bindings.length === 0) {
          return void 0;
        }
        const binding = bindings[0];
        return _resolveBinding(requestScope, request, binding);
      }
    };
    var _resolveFactoryFromBinding = (binding, context) => {
      const factoryDetails = (0, binding_utils_1.getFactoryDetails)(binding);
      return (0, exceptions_1.tryAndThrowErrorIfStackOverflow)(() => factoryDetails.factory.bind(binding)(context), () => new Error(ERROR_MSGS.CIRCULAR_DEPENDENCY_IN_FACTORY(factoryDetails.factoryType, context.currentRequest.serviceIdentifier.toString())));
    };
    var _getResolvedFromBinding = (requestScope, request, binding) => {
      let result;
      const childRequests = request.childRequests;
      (0, binding_utils_1.ensureFullyBound)(binding);
      switch (binding.type) {
        case literal_types_1.BindingTypeEnum.ConstantValue:
        case literal_types_1.BindingTypeEnum.Function:
          result = binding.cache;
          break;
        case literal_types_1.BindingTypeEnum.Constructor:
          result = binding.implementationType;
          break;
        case literal_types_1.BindingTypeEnum.Instance:
          result = (0, instantiation_1.resolveInstance)(binding, binding.implementationType, childRequests, _resolveRequest(requestScope));
          break;
        default:
          result = _resolveFactoryFromBinding(binding, request.parentContext);
      }
      return result;
    };
    var _resolveInScope = (requestScope, binding, resolveFromBinding) => {
      let result = (0, scope_1.tryGetFromScope)(requestScope, binding);
      if (result !== null) {
        return result;
      }
      result = resolveFromBinding();
      (0, scope_1.saveToScope)(requestScope, binding, result);
      return result;
    };
    var _resolveBinding = (requestScope, request, binding) => {
      return _resolveInScope(requestScope, binding, () => {
        let result = _getResolvedFromBinding(requestScope, request, binding);
        if ((0, async_1.isPromise)(result)) {
          result = result.then((resolved) => _onActivation(request, binding, resolved));
        } else {
          result = _onActivation(request, binding, result);
        }
        return result;
      });
    };
    function _onActivation(request, binding, resolved) {
      let result = _bindingActivation(request.parentContext, binding, resolved);
      const containersIterator = _getContainersIterator(request.parentContext.container);
      let container;
      let containersIteratorResult = containersIterator.next();
      do {
        container = containersIteratorResult.value;
        const context = request.parentContext;
        const serviceIdentifier = request.serviceIdentifier;
        const activationsIterator = _getContainerActivationsForService(container, serviceIdentifier);
        if ((0, async_1.isPromise)(result)) {
          result = _activateContainerAsync(activationsIterator, context, result);
        } else {
          result = _activateContainer(activationsIterator, context, result);
        }
        containersIteratorResult = containersIterator.next();
      } while (containersIteratorResult.done !== true && !(0, planner_1.getBindingDictionary)(container).hasKey(request.serviceIdentifier));
      return result;
    }
    var _bindingActivation = (context, binding, previousResult) => {
      let result;
      if (typeof binding.onActivation === "function") {
        result = binding.onActivation(context, previousResult);
      } else {
        result = previousResult;
      }
      return result;
    };
    var _activateContainer = (activationsIterator, context, result) => {
      let activation = activationsIterator.next();
      while (activation.done !== true) {
        result = activation.value(context, result);
        if ((0, async_1.isPromise)(result)) {
          return _activateContainerAsync(activationsIterator, context, result);
        }
        activation = activationsIterator.next();
      }
      return result;
    };
    var _activateContainerAsync = async (activationsIterator, context, resultPromise) => {
      let result = await resultPromise;
      let activation = activationsIterator.next();
      while (activation.done !== true) {
        result = await activation.value(context, result);
        activation = activationsIterator.next();
      }
      return result;
    };
    var _getContainerActivationsForService = (container, serviceIdentifier) => {
      const activations = container._activations;
      return activations.hasKey(serviceIdentifier) ? activations.get(serviceIdentifier).values() : [].values();
    };
    var _getContainersIterator = (container) => {
      const containersStack = [container];
      let parent = container.parent;
      while (parent !== null) {
        containersStack.push(parent);
        parent = parent.parent;
      }
      const getNextContainer = () => {
        const nextContainer = containersStack.pop();
        if (nextContainer !== void 0) {
          return { done: false, value: nextContainer };
        } else {
          return { done: true, value: void 0 };
        }
      };
      const containersIterator = {
        next: getNextContainer
      };
      return containersIterator;
    };
    function resolve(context) {
      const resolveRequestFunction = _resolveRequest(context.plan.rootRequest.requestScope);
      return resolveRequestFunction(context.plan.rootRequest);
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/constraint_helpers.js
var require_constraint_helpers = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/constraint_helpers.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.typeConstraint = exports.namedConstraint = exports.taggedConstraint = exports.traverseAncerstors = void 0;
    var METADATA_KEY = __importStar(require_metadata_keys());
    var metadata_1 = require_metadata();
    var traverseAncerstors = (request, constraint) => {
      const parent = request.parentRequest;
      if (parent !== null) {
        return constraint(parent) ? true : traverseAncerstors(parent, constraint);
      } else {
        return false;
      }
    };
    exports.traverseAncerstors = traverseAncerstors;
    var taggedConstraint = (key) => (value) => {
      const constraint = (request) => request !== null && // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
      request.target !== null && request.target.matchesTag(key)(value);
      constraint.metaData = new metadata_1.Metadata(key, value);
      return constraint;
    };
    exports.taggedConstraint = taggedConstraint;
    var namedConstraint = taggedConstraint(METADATA_KEY.NAMED_TAG);
    exports.namedConstraint = namedConstraint;
    var typeConstraint = (type) => (request) => {
      let binding = null;
      if (request !== null) {
        binding = request.bindings[0];
        if (typeof type === "string") {
          return binding.serviceIdentifier === type;
        } else {
          const constructor = request.bindings[0].implementationType;
          return type === constructor;
        }
      }
      return false;
    };
    exports.typeConstraint = typeConstraint;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/binding_when_syntax.js
var require_binding_when_syntax = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/binding_when_syntax.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingWhenSyntax = void 0;
    var binding_on_syntax_1 = require_binding_on_syntax();
    var constraint_helpers_1 = require_constraint_helpers();
    var BindingWhenSyntax = class {
      constructor(binding) {
        __publicField(this, "_binding");
        this._binding = binding;
      }
      when(constraint) {
        this._binding.constraint = constraint;
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenTargetNamed(name) {
        this._binding.constraint = (0, constraint_helpers_1.namedConstraint)(name);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenTargetIsDefault() {
        this._binding.constraint = (request) => {
          if (request === null) {
            return false;
          }
          const targetIsDefault = (
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            request.target !== null && !request.target.isNamed() && !request.target.isTagged()
          );
          return targetIsDefault;
        };
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenTargetTagged(tag, value) {
        this._binding.constraint = (0, constraint_helpers_1.taggedConstraint)(tag)(value);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenInjectedInto(parent) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.typeConstraint)(parent)(request.parentRequest);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenParentNamed(name) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.namedConstraint)(name)(request.parentRequest);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenParentTagged(tag, value) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.taggedConstraint)(tag)(value)(request.parentRequest);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenAnyAncestorIs(ancestor) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.traverseAncerstors)(request, (0, constraint_helpers_1.typeConstraint)(ancestor));
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenNoAncestorIs(ancestor) {
        this._binding.constraint = (request) => request !== null && !(0, constraint_helpers_1.traverseAncerstors)(request, (0, constraint_helpers_1.typeConstraint)(ancestor));
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenAnyAncestorNamed(name) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.traverseAncerstors)(request, (0, constraint_helpers_1.namedConstraint)(name));
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenNoAncestorNamed(name) {
        this._binding.constraint = (request) => request !== null && !(0, constraint_helpers_1.traverseAncerstors)(request, (0, constraint_helpers_1.namedConstraint)(name));
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenAnyAncestorTagged(tag, value) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.traverseAncerstors)(request, (0, constraint_helpers_1.taggedConstraint)(tag)(value));
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenNoAncestorTagged(tag, value) {
        this._binding.constraint = (request) => request !== null && !(0, constraint_helpers_1.traverseAncerstors)(request, (0, constraint_helpers_1.taggedConstraint)(tag)(value));
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenAnyAncestorMatches(constraint) {
        this._binding.constraint = (request) => request !== null && (0, constraint_helpers_1.traverseAncerstors)(request, constraint);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      whenNoAncestorMatches(constraint) {
        this._binding.constraint = (request) => request !== null && !(0, constraint_helpers_1.traverseAncerstors)(request, constraint);
        return new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
    };
    exports.BindingWhenSyntax = BindingWhenSyntax;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/binding_on_syntax.js
var require_binding_on_syntax = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/binding_on_syntax.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingOnSyntax = void 0;
    var binding_when_syntax_1 = require_binding_when_syntax();
    var BindingOnSyntax = class {
      constructor(binding) {
        __publicField(this, "_binding");
        this._binding = binding;
      }
      onActivation(handler) {
        this._binding.onActivation = handler;
        return new binding_when_syntax_1.BindingWhenSyntax(this._binding);
      }
      onDeactivation(handler) {
        this._binding.onDeactivation = handler;
        return new binding_when_syntax_1.BindingWhenSyntax(this._binding);
      }
    };
    exports.BindingOnSyntax = BindingOnSyntax;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/binding_when_on_syntax.js
var require_binding_when_on_syntax = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/binding_when_on_syntax.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingWhenOnSyntax = void 0;
    var binding_on_syntax_1 = require_binding_on_syntax();
    var binding_when_syntax_1 = require_binding_when_syntax();
    var BindingWhenOnSyntax = class {
      constructor(binding) {
        __publicField(this, "_bindingWhenSyntax");
        __publicField(this, "_bindingOnSyntax");
        __publicField(this, "_binding");
        this._binding = binding;
        this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);
        this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);
      }
      when(constraint) {
        return this._bindingWhenSyntax.when(constraint);
      }
      whenTargetNamed(name) {
        return this._bindingWhenSyntax.whenTargetNamed(name);
      }
      whenTargetIsDefault() {
        return this._bindingWhenSyntax.whenTargetIsDefault();
      }
      whenTargetTagged(tag, value) {
        return this._bindingWhenSyntax.whenTargetTagged(tag, value);
      }
      whenInjectedInto(parent) {
        return this._bindingWhenSyntax.whenInjectedInto(parent);
      }
      whenParentNamed(name) {
        return this._bindingWhenSyntax.whenParentNamed(name);
      }
      whenParentTagged(tag, value) {
        return this._bindingWhenSyntax.whenParentTagged(tag, value);
      }
      whenAnyAncestorIs(ancestor) {
        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);
      }
      whenNoAncestorIs(ancestor) {
        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);
      }
      whenAnyAncestorNamed(name) {
        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);
      }
      whenAnyAncestorTagged(tag, value) {
        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);
      }
      whenNoAncestorNamed(name) {
        return this._bindingWhenSyntax.whenNoAncestorNamed(name);
      }
      whenNoAncestorTagged(tag, value) {
        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);
      }
      whenAnyAncestorMatches(constraint) {
        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);
      }
      whenNoAncestorMatches(constraint) {
        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);
      }
      onActivation(handler) {
        return this._bindingOnSyntax.onActivation(handler);
      }
      onDeactivation(handler) {
        return this._bindingOnSyntax.onDeactivation(handler);
      }
    };
    exports.BindingWhenOnSyntax = BindingWhenOnSyntax;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/binding_in_syntax.js
var require_binding_in_syntax = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/binding_in_syntax.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingInSyntax = void 0;
    var literal_types_1 = require_literal_types();
    var binding_when_on_syntax_1 = require_binding_when_on_syntax();
    var BindingInSyntax = class {
      constructor(binding) {
        __publicField(this, "_binding");
        this._binding = binding;
      }
      inRequestScope() {
        this._binding.scope = literal_types_1.BindingScopeEnum.Request;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      inSingletonScope() {
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      inTransientScope() {
        this._binding.scope = literal_types_1.BindingScopeEnum.Transient;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
    };
    exports.BindingInSyntax = BindingInSyntax;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/binding_in_when_on_syntax.js
var require_binding_in_when_on_syntax = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/binding_in_when_on_syntax.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingInWhenOnSyntax = void 0;
    var binding_in_syntax_1 = require_binding_in_syntax();
    var binding_on_syntax_1 = require_binding_on_syntax();
    var binding_when_syntax_1 = require_binding_when_syntax();
    var BindingInWhenOnSyntax = class {
      constructor(binding) {
        __publicField(this, "_bindingInSyntax");
        __publicField(this, "_bindingWhenSyntax");
        __publicField(this, "_bindingOnSyntax");
        __publicField(this, "_binding");
        this._binding = binding;
        this._bindingWhenSyntax = new binding_when_syntax_1.BindingWhenSyntax(this._binding);
        this._bindingOnSyntax = new binding_on_syntax_1.BindingOnSyntax(this._binding);
        this._bindingInSyntax = new binding_in_syntax_1.BindingInSyntax(binding);
      }
      inRequestScope() {
        return this._bindingInSyntax.inRequestScope();
      }
      inSingletonScope() {
        return this._bindingInSyntax.inSingletonScope();
      }
      inTransientScope() {
        return this._bindingInSyntax.inTransientScope();
      }
      when(constraint) {
        return this._bindingWhenSyntax.when(constraint);
      }
      whenTargetNamed(name) {
        return this._bindingWhenSyntax.whenTargetNamed(name);
      }
      whenTargetIsDefault() {
        return this._bindingWhenSyntax.whenTargetIsDefault();
      }
      whenTargetTagged(tag, value) {
        return this._bindingWhenSyntax.whenTargetTagged(tag, value);
      }
      whenInjectedInto(parent) {
        return this._bindingWhenSyntax.whenInjectedInto(parent);
      }
      whenParentNamed(name) {
        return this._bindingWhenSyntax.whenParentNamed(name);
      }
      whenParentTagged(tag, value) {
        return this._bindingWhenSyntax.whenParentTagged(tag, value);
      }
      whenAnyAncestorIs(ancestor) {
        return this._bindingWhenSyntax.whenAnyAncestorIs(ancestor);
      }
      whenNoAncestorIs(ancestor) {
        return this._bindingWhenSyntax.whenNoAncestorIs(ancestor);
      }
      whenAnyAncestorNamed(name) {
        return this._bindingWhenSyntax.whenAnyAncestorNamed(name);
      }
      whenAnyAncestorTagged(tag, value) {
        return this._bindingWhenSyntax.whenAnyAncestorTagged(tag, value);
      }
      whenNoAncestorNamed(name) {
        return this._bindingWhenSyntax.whenNoAncestorNamed(name);
      }
      whenNoAncestorTagged(tag, value) {
        return this._bindingWhenSyntax.whenNoAncestorTagged(tag, value);
      }
      whenAnyAncestorMatches(constraint) {
        return this._bindingWhenSyntax.whenAnyAncestorMatches(constraint);
      }
      whenNoAncestorMatches(constraint) {
        return this._bindingWhenSyntax.whenNoAncestorMatches(constraint);
      }
      onActivation(handler) {
        return this._bindingOnSyntax.onActivation(handler);
      }
      onDeactivation(handler) {
        return this._bindingOnSyntax.onDeactivation(handler);
      }
    };
    exports.BindingInWhenOnSyntax = BindingInWhenOnSyntax;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/binding_to_syntax.js
var require_binding_to_syntax = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/syntax/binding_to_syntax.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.BindingToSyntax = void 0;
    var ERROR_MSGS = __importStar(require_error_msgs());
    var literal_types_1 = require_literal_types();
    var binding_in_when_on_syntax_1 = require_binding_in_when_on_syntax();
    var binding_when_on_syntax_1 = require_binding_when_on_syntax();
    var BindingToSyntax = class {
      constructor(binding) {
        // TODO: Implement an internal type `_BindingToSyntax<T>` wherein this member
        // can be public. Let `BindingToSyntax<T>` be the presentational type that
        // depends on it, and does not expose this member as public.
        __publicField(this, "_binding");
        this._binding = binding;
      }
      to(constructor) {
        this._binding.type = literal_types_1.BindingTypeEnum.Instance;
        this._binding.implementationType = constructor;
        return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);
      }
      toSelf() {
        if (typeof this._binding.serviceIdentifier !== "function") {
          throw new Error(ERROR_MSGS.INVALID_TO_SELF_VALUE);
        }
        const self2 = this._binding.serviceIdentifier;
        return this.to(self2);
      }
      toConstantValue(value) {
        this._binding.type = literal_types_1.BindingTypeEnum.ConstantValue;
        this._binding.cache = value;
        this._binding.dynamicValue = null;
        this._binding.implementationType = null;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      toDynamicValue(func) {
        this._binding.type = literal_types_1.BindingTypeEnum.DynamicValue;
        this._binding.cache = null;
        this._binding.dynamicValue = func;
        this._binding.implementationType = null;
        return new binding_in_when_on_syntax_1.BindingInWhenOnSyntax(this._binding);
      }
      toConstructor(constructor) {
        this._binding.type = literal_types_1.BindingTypeEnum.Constructor;
        this._binding.implementationType = constructor;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      toFactory(factory) {
        this._binding.type = literal_types_1.BindingTypeEnum.Factory;
        this._binding.factory = factory;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      toFunction(func) {
        if (typeof func !== "function") {
          throw new Error(ERROR_MSGS.INVALID_FUNCTION_BINDING);
        }
        const bindingWhenOnSyntax = this.toConstantValue(func);
        this._binding.type = literal_types_1.BindingTypeEnum.Function;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return bindingWhenOnSyntax;
      }
      toAutoFactory(serviceIdentifier) {
        this._binding.type = literal_types_1.BindingTypeEnum.Factory;
        this._binding.factory = (context) => {
          const autofactory = () => context.container.get(serviceIdentifier);
          return autofactory;
        };
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      toAutoNamedFactory(serviceIdentifier) {
        this._binding.type = literal_types_1.BindingTypeEnum.Factory;
        this._binding.factory = (context) => {
          return (named) => context.container.getNamed(serviceIdentifier, named);
        };
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      toProvider(provider) {
        this._binding.type = literal_types_1.BindingTypeEnum.Provider;
        this._binding.provider = provider;
        this._binding.scope = literal_types_1.BindingScopeEnum.Singleton;
        return new binding_when_on_syntax_1.BindingWhenOnSyntax(this._binding);
      }
      toService(service) {
        this._binding.type = literal_types_1.BindingTypeEnum.DynamicValue;
        Object.defineProperty(this._binding, "cache", {
          configurable: true,
          enumerable: true,
          get() {
            return null;
          },
          set(_value) {
          }
        });
        this._binding.dynamicValue = (context) => {
          try {
            return context.container.get(service);
          } catch (_error) {
            return context.container.getAsync(service);
          }
        };
        this._binding.implementationType = null;
      }
    };
    exports.BindingToSyntax = BindingToSyntax;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/container/container_snapshot.js
var require_container_snapshot = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/container/container_snapshot.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ContainerSnapshot = void 0;
    var ContainerSnapshot = class _ContainerSnapshot {
      constructor() {
        __publicField(this, "bindings");
        __publicField(this, "activations");
        __publicField(this, "deactivations");
        __publicField(this, "middleware");
        __publicField(this, "moduleActivationStore");
      }
      static of(bindings, middleware, activations, deactivations, moduleActivationStore) {
        const snapshot = new _ContainerSnapshot();
        snapshot.bindings = bindings;
        snapshot.middleware = middleware;
        snapshot.deactivations = deactivations;
        snapshot.activations = activations;
        snapshot.moduleActivationStore = moduleActivationStore;
        return snapshot;
      }
    };
    exports.ContainerSnapshot = ContainerSnapshot;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/clonable.js
var require_clonable = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/clonable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isClonable = isClonable;
    function isClonable(obj) {
      return typeof obj === "object" && obj !== null && "clone" in obj && typeof obj.clone === "function";
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/container/lookup.js
var require_lookup = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/container/lookup.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Lookup = void 0;
    var ERROR_MSGS = __importStar(require_error_msgs());
    var clonable_1 = require_clonable();
    var Lookup = class _Lookup {
      constructor() {
        // dictionary used store multiple values for each key <key>
        __publicField(this, "_map");
        this._map = /* @__PURE__ */ new Map();
      }
      getMap() {
        return this._map;
      }
      // adds a new entry to _map
      add(serviceIdentifier, value) {
        this._checkNonNulish(serviceIdentifier);
        if (value === null || value === void 0) {
          throw new Error(ERROR_MSGS.NULL_ARGUMENT);
        }
        const entry = this._map.get(serviceIdentifier);
        if (entry !== void 0) {
          entry.push(value);
        } else {
          this._map.set(serviceIdentifier, [value]);
        }
      }
      // gets the value of a entry by its key (serviceIdentifier)
      get(serviceIdentifier) {
        this._checkNonNulish(serviceIdentifier);
        const entry = this._map.get(serviceIdentifier);
        if (entry !== void 0) {
          return entry;
        } else {
          throw new Error(ERROR_MSGS.KEY_NOT_FOUND);
        }
      }
      // removes a entry from _map by its key (serviceIdentifier)
      remove(serviceIdentifier) {
        this._checkNonNulish(serviceIdentifier);
        if (!this._map.delete(serviceIdentifier)) {
          throw new Error(ERROR_MSGS.KEY_NOT_FOUND);
        }
      }
      removeIntersection(lookup) {
        this.traverse((serviceIdentifier, value) => {
          const lookupActivations = lookup.hasKey(serviceIdentifier) ? lookup.get(serviceIdentifier) : void 0;
          if (lookupActivations !== void 0) {
            const filteredValues = value.filter((lookupValue) => !lookupActivations.some((moduleActivation) => lookupValue === moduleActivation));
            this._setValue(serviceIdentifier, filteredValues);
          }
        });
      }
      removeByCondition(condition) {
        const removals = [];
        this._map.forEach((entries, key) => {
          const updatedEntries = [];
          for (const entry of entries) {
            const remove = condition(entry);
            if (remove) {
              removals.push(entry);
            } else {
              updatedEntries.push(entry);
            }
          }
          this._setValue(key, updatedEntries);
        });
        return removals;
      }
      // returns true if _map contains a key (serviceIdentifier)
      hasKey(serviceIdentifier) {
        this._checkNonNulish(serviceIdentifier);
        return this._map.has(serviceIdentifier);
      }
      // returns a new Lookup instance; note: this is not a deep clone, only Lookup related data structure (dictionary) is
      // cloned, content remains the same
      clone() {
        const copy = new _Lookup();
        this._map.forEach((value, key) => {
          value.forEach((b) => {
            copy.add(key, (0, clonable_1.isClonable)(b) ? b.clone() : b);
          });
        });
        return copy;
      }
      traverse(func) {
        this._map.forEach((value, key) => {
          func(key, value);
        });
      }
      _checkNonNulish(value) {
        if (value == null) {
          throw new Error(ERROR_MSGS.NULL_ARGUMENT);
        }
      }
      _setValue(serviceIdentifier, value) {
        if (value.length > 0) {
          this._map.set(serviceIdentifier, value);
        } else {
          this._map.delete(serviceIdentifier);
        }
      }
    };
    exports.Lookup = Lookup;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/container/module_activation_store.js
var require_module_activation_store = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/container/module_activation_store.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ModuleActivationStore = void 0;
    var lookup_1 = require_lookup();
    var ModuleActivationStore = class _ModuleActivationStore {
      constructor() {
        __publicField(this, "_map", /* @__PURE__ */ new Map());
      }
      remove(moduleId) {
        const handlers = this._map.get(moduleId);
        if (handlers === void 0) {
          return this._getEmptyHandlersStore();
        }
        this._map.delete(moduleId);
        return handlers;
      }
      addDeactivation(moduleId, serviceIdentifier, onDeactivation) {
        this._getModuleActivationHandlers(moduleId).onDeactivations.add(serviceIdentifier, onDeactivation);
      }
      addActivation(moduleId, serviceIdentifier, onActivation) {
        this._getModuleActivationHandlers(moduleId).onActivations.add(serviceIdentifier, onActivation);
      }
      clone() {
        const clone = new _ModuleActivationStore();
        this._map.forEach((handlersStore, moduleId) => {
          clone._map.set(moduleId, {
            onActivations: handlersStore.onActivations.clone(),
            onDeactivations: handlersStore.onDeactivations.clone()
          });
        });
        return clone;
      }
      _getModuleActivationHandlers(moduleId) {
        let moduleActivationHandlers = this._map.get(moduleId);
        if (moduleActivationHandlers === void 0) {
          moduleActivationHandlers = this._getEmptyHandlersStore();
          this._map.set(moduleId, moduleActivationHandlers);
        }
        return moduleActivationHandlers;
      }
      _getEmptyHandlersStore() {
        const handlersStore = {
          onActivations: new lookup_1.Lookup(),
          onDeactivations: new lookup_1.Lookup()
        };
        return handlersStore;
      }
    };
    exports.ModuleActivationStore = ModuleActivationStore;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/container/container.js
var require_container = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/container/container.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Container = void 0;
    var binding_1 = require_binding();
    var ERROR_MSGS = __importStar(require_error_msgs());
    var literal_types_1 = require_literal_types();
    var METADATA_KEY = __importStar(require_metadata_keys());
    var metadata_reader_1 = require_metadata_reader();
    var planner_1 = require_planner();
    var resolver_1 = require_resolver();
    var binding_to_syntax_1 = require_binding_to_syntax();
    var async_1 = require_async();
    var id_1 = require_id();
    var serialization_1 = require_serialization();
    var container_snapshot_1 = require_container_snapshot();
    var lookup_1 = require_lookup();
    var module_activation_store_1 = require_module_activation_store();
    var Container = class _Container {
      constructor(containerOptions) {
        __publicField(this, "id");
        __publicField(this, "parent");
        __publicField(this, "options");
        __publicField(this, "_middleware");
        __publicField(this, "_bindingDictionary");
        __publicField(this, "_activations");
        __publicField(this, "_deactivations");
        __publicField(this, "_snapshots");
        __publicField(this, "_metadataReader");
        __publicField(this, "_moduleActivationStore");
        const options = containerOptions || {};
        if (typeof options !== "object") {
          throw new Error(ERROR_MSGS.CONTAINER_OPTIONS_MUST_BE_AN_OBJECT);
        }
        if (options.defaultScope === void 0) {
          options.defaultScope = literal_types_1.BindingScopeEnum.Transient;
        } else if (options.defaultScope !== literal_types_1.BindingScopeEnum.Singleton && options.defaultScope !== literal_types_1.BindingScopeEnum.Transient && options.defaultScope !== literal_types_1.BindingScopeEnum.Request) {
          throw new Error(ERROR_MSGS.CONTAINER_OPTIONS_INVALID_DEFAULT_SCOPE);
        }
        if (options.autoBindInjectable === void 0) {
          options.autoBindInjectable = false;
        } else if (typeof options.autoBindInjectable !== "boolean") {
          throw new Error(ERROR_MSGS.CONTAINER_OPTIONS_INVALID_AUTO_BIND_INJECTABLE);
        }
        if (options.skipBaseClassChecks === void 0) {
          options.skipBaseClassChecks = false;
        } else if (typeof options.skipBaseClassChecks !== "boolean") {
          throw new Error(ERROR_MSGS.CONTAINER_OPTIONS_INVALID_SKIP_BASE_CHECK);
        }
        this.options = {
          autoBindInjectable: options.autoBindInjectable,
          defaultScope: options.defaultScope,
          skipBaseClassChecks: options.skipBaseClassChecks
        };
        this.id = (0, id_1.id)();
        this._bindingDictionary = new lookup_1.Lookup();
        this._snapshots = [];
        this._middleware = null;
        this._activations = new lookup_1.Lookup();
        this._deactivations = new lookup_1.Lookup();
        this.parent = null;
        this._metadataReader = new metadata_reader_1.MetadataReader();
        this._moduleActivationStore = new module_activation_store_1.ModuleActivationStore();
      }
      static merge(container1, container2, ...containers) {
        const container = new _Container();
        const targetContainers = [
          container1,
          container2,
          ...containers
        ].map((targetContainer) => (0, planner_1.getBindingDictionary)(targetContainer));
        const bindingDictionary = (0, planner_1.getBindingDictionary)(container);
        function copyDictionary(origin, destination) {
          origin.traverse((_key, value) => {
            value.forEach((binding) => {
              destination.add(binding.serviceIdentifier, binding.clone());
            });
          });
        }
        targetContainers.forEach((targetBindingDictionary) => {
          copyDictionary(targetBindingDictionary, bindingDictionary);
        });
        return container;
      }
      load(...modules) {
        const getHelpers = this._getContainerModuleHelpersFactory();
        for (const currentModule of modules) {
          const containerModuleHelpers = getHelpers(currentModule.id);
          currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction, containerModuleHelpers.unbindAsyncFunction, containerModuleHelpers.onActivationFunction, containerModuleHelpers.onDeactivationFunction);
        }
      }
      async loadAsync(...modules) {
        const getHelpers = this._getContainerModuleHelpersFactory();
        for (const currentModule of modules) {
          const containerModuleHelpers = getHelpers(currentModule.id);
          await currentModule.registry(containerModuleHelpers.bindFunction, containerModuleHelpers.unbindFunction, containerModuleHelpers.isboundFunction, containerModuleHelpers.rebindFunction, containerModuleHelpers.unbindAsyncFunction, containerModuleHelpers.onActivationFunction, containerModuleHelpers.onDeactivationFunction);
        }
      }
      unload(...modules) {
        modules.forEach((module2) => {
          const deactivations = this._removeModuleBindings(module2.id);
          this._deactivateSingletons(deactivations);
          this._removeModuleHandlers(module2.id);
        });
      }
      async unloadAsync(...modules) {
        for (const module2 of modules) {
          const deactivations = this._removeModuleBindings(module2.id);
          await this._deactivateSingletonsAsync(deactivations);
          this._removeModuleHandlers(module2.id);
        }
      }
      // Registers a type binding
      bind(serviceIdentifier) {
        return this._bind(this._buildBinding(serviceIdentifier));
      }
      rebind(serviceIdentifier) {
        this.unbind(serviceIdentifier);
        return this.bind(serviceIdentifier);
      }
      async rebindAsync(serviceIdentifier) {
        await this.unbindAsync(serviceIdentifier);
        return this.bind(serviceIdentifier);
      }
      // Removes a type binding from the registry by its key
      unbind(serviceIdentifier) {
        if (this._bindingDictionary.hasKey(serviceIdentifier)) {
          const bindings = this._bindingDictionary.get(serviceIdentifier);
          this._deactivateSingletons(bindings);
        }
        this._removeServiceFromDictionary(serviceIdentifier);
      }
      async unbindAsync(serviceIdentifier) {
        if (this._bindingDictionary.hasKey(serviceIdentifier)) {
          const bindings = this._bindingDictionary.get(serviceIdentifier);
          await this._deactivateSingletonsAsync(bindings);
        }
        this._removeServiceFromDictionary(serviceIdentifier);
      }
      // Removes all the type bindings from the registry
      unbindAll() {
        this._bindingDictionary.traverse((_key, value) => {
          this._deactivateSingletons(value);
        });
        this._bindingDictionary = new lookup_1.Lookup();
      }
      async unbindAllAsync() {
        const promises = [];
        this._bindingDictionary.traverse((_key, value) => {
          promises.push(this._deactivateSingletonsAsync(value));
        });
        await Promise.all(promises);
        this._bindingDictionary = new lookup_1.Lookup();
      }
      onActivation(serviceIdentifier, onActivation) {
        this._activations.add(serviceIdentifier, onActivation);
      }
      onDeactivation(serviceIdentifier, onDeactivation) {
        this._deactivations.add(serviceIdentifier, onDeactivation);
      }
      // Allows to check if there are bindings available for serviceIdentifier
      isBound(serviceIdentifier) {
        let bound = this._bindingDictionary.hasKey(serviceIdentifier);
        if (!bound && this.parent) {
          bound = this.parent.isBound(serviceIdentifier);
        }
        return bound;
      }
      // check binding dependency only in current container
      isCurrentBound(serviceIdentifier) {
        return this._bindingDictionary.hasKey(serviceIdentifier);
      }
      isBoundNamed(serviceIdentifier, named) {
        return this.isBoundTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      // Check if a binding with a complex constraint is available without throwing a error. Ancestors are also verified.
      isBoundTagged(serviceIdentifier, key, value) {
        let bound = false;
        if (this._bindingDictionary.hasKey(serviceIdentifier)) {
          const bindings = this._bindingDictionary.get(serviceIdentifier);
          const request = (0, planner_1.createMockRequest)(this, serviceIdentifier, {
            customTag: {
              key,
              value
            },
            isMultiInject: false
          });
          bound = bindings.some((b) => b.constraint(request));
        }
        if (!bound && this.parent) {
          bound = this.parent.isBoundTagged(serviceIdentifier, key, value);
        }
        return bound;
      }
      snapshot() {
        this._snapshots.push(container_snapshot_1.ContainerSnapshot.of(this._bindingDictionary.clone(), this._middleware, this._activations.clone(), this._deactivations.clone(), this._moduleActivationStore.clone()));
      }
      restore() {
        const snapshot = this._snapshots.pop();
        if (snapshot === void 0) {
          throw new Error(ERROR_MSGS.NO_MORE_SNAPSHOTS_AVAILABLE);
        }
        this._bindingDictionary = snapshot.bindings;
        this._activations = snapshot.activations;
        this._deactivations = snapshot.deactivations;
        this._middleware = snapshot.middleware;
        this._moduleActivationStore = snapshot.moduleActivationStore;
      }
      createChild(containerOptions) {
        const child = new _Container(containerOptions || this.options);
        child.parent = this;
        return child;
      }
      applyMiddleware(...middlewares) {
        const initial = this._middleware ? this._middleware : this._planAndResolve();
        this._middleware = middlewares.reduce((prev, curr) => curr(prev), initial);
      }
      applyCustomMetadataReader(metadataReader) {
        this._metadataReader = metadataReader;
      }
      // Resolves a dependency by its runtime identifier
      // The runtime identifier must be associated with only one binding
      // use getAll when the runtime identifier is associated with multiple bindings
      get(serviceIdentifier) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, false);
        return this._getButThrowIfAsync(getArgs);
      }
      async getAsync(serviceIdentifier) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, false);
        return this._get(getArgs);
      }
      getTagged(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, false, key, value);
        return this._getButThrowIfAsync(getArgs);
      }
      async getTaggedAsync(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, false, key, value);
        return this._get(getArgs);
      }
      getNamed(serviceIdentifier, named) {
        return this.getTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      async getNamedAsync(serviceIdentifier, named) {
        return this.getTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      // Resolves a dependency by its runtime identifier
      // The runtime identifier can be associated with one or multiple bindings
      getAll(serviceIdentifier, options) {
        const getArgs = this._getAllArgs(serviceIdentifier, options, false);
        return this._getButThrowIfAsync(getArgs);
      }
      async getAllAsync(serviceIdentifier, options) {
        const getArgs = this._getAllArgs(serviceIdentifier, options, false);
        return this._getAll(getArgs);
      }
      getAllTagged(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, true, false, key, value);
        return this._getButThrowIfAsync(getArgs);
      }
      async getAllTaggedAsync(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, true, false, key, value);
        return this._getAll(getArgs);
      }
      getAllNamed(serviceIdentifier, named) {
        return this.getAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      async getAllNamedAsync(serviceIdentifier, named) {
        return this.getAllTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      resolve(constructorFunction) {
        const isBound = this.isBound(constructorFunction);
        if (!isBound) {
          this.bind(constructorFunction).toSelf();
        }
        const resolved = this.get(constructorFunction);
        if (!isBound) {
          this.unbind(constructorFunction);
        }
        return resolved;
      }
      tryGet(serviceIdentifier) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, true);
        return this._getButThrowIfAsync(getArgs);
      }
      async tryGetAsync(serviceIdentifier) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, true);
        return this._get(getArgs);
      }
      tryGetTagged(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, true, key, value);
        return this._getButThrowIfAsync(getArgs);
      }
      async tryGetTaggedAsync(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, false, true, key, value);
        return this._get(getArgs);
      }
      tryGetNamed(serviceIdentifier, named) {
        return this.tryGetTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      async tryGetNamedAsync(serviceIdentifier, named) {
        return this.tryGetTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      tryGetAll(serviceIdentifier, options) {
        const getArgs = this._getAllArgs(serviceIdentifier, options, true);
        return this._getButThrowIfAsync(getArgs);
      }
      async tryGetAllAsync(serviceIdentifier, options) {
        const getArgs = this._getAllArgs(serviceIdentifier, options, true);
        return this._getAll(getArgs);
      }
      tryGetAllTagged(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, true, true, key, value);
        return this._getButThrowIfAsync(getArgs);
      }
      async tryGetAllTaggedAsync(serviceIdentifier, key, value) {
        const getArgs = this._getNotAllArgs(serviceIdentifier, true, true, key, value);
        return this._getAll(getArgs);
      }
      tryGetAllNamed(serviceIdentifier, named) {
        return this.tryGetAllTagged(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      async tryGetAllNamedAsync(serviceIdentifier, named) {
        return this.tryGetAllTaggedAsync(serviceIdentifier, METADATA_KEY.NAMED_TAG, named);
      }
      _preDestroy(constructor, instance) {
        var _a;
        if (constructor !== void 0 && Reflect.hasMetadata(METADATA_KEY.PRE_DESTROY, constructor)) {
          const data = Reflect.getMetadata(METADATA_KEY.PRE_DESTROY, constructor);
          return (_a = instance[data.value]) == null ? void 0 : _a.call(instance);
        }
      }
      _removeModuleHandlers(moduleId) {
        const moduleActivationsHandlers = this._moduleActivationStore.remove(moduleId);
        this._activations.removeIntersection(moduleActivationsHandlers.onActivations);
        this._deactivations.removeIntersection(moduleActivationsHandlers.onDeactivations);
      }
      _removeModuleBindings(moduleId) {
        return this._bindingDictionary.removeByCondition((binding) => binding.moduleId === moduleId);
      }
      _deactivate(binding, instance) {
        const constructor = instance == void 0 ? void 0 : (
          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
          Object.getPrototypeOf(instance).constructor
        );
        try {
          if (this._deactivations.hasKey(binding.serviceIdentifier)) {
            const result = this._deactivateContainer(instance, this._deactivations.get(binding.serviceIdentifier).values());
            if ((0, async_1.isPromise)(result)) {
              return this._handleDeactivationError(result.then(async () => this._propagateContainerDeactivationThenBindingAndPreDestroyAsync(binding, instance, constructor)), binding.serviceIdentifier);
            }
          }
          const propagateDeactivationResult = this._propagateContainerDeactivationThenBindingAndPreDestroy(binding, instance, constructor);
          if ((0, async_1.isPromise)(propagateDeactivationResult)) {
            return this._handleDeactivationError(propagateDeactivationResult, binding.serviceIdentifier);
          }
        } catch (ex) {
          if (ex instanceof Error) {
            throw new Error(ERROR_MSGS.ON_DEACTIVATION_ERROR((0, serialization_1.getServiceIdentifierAsString)(binding.serviceIdentifier), ex.message));
          }
        }
      }
      async _handleDeactivationError(asyncResult, serviceIdentifier) {
        try {
          await asyncResult;
        } catch (ex) {
          if (ex instanceof Error) {
            throw new Error(ERROR_MSGS.ON_DEACTIVATION_ERROR((0, serialization_1.getServiceIdentifierAsString)(serviceIdentifier), ex.message));
          }
        }
      }
      _deactivateContainer(instance, deactivationsIterator) {
        let deactivation = deactivationsIterator.next();
        while (typeof deactivation.value === "function") {
          const result = deactivation.value(instance);
          if ((0, async_1.isPromise)(result)) {
            return result.then(async () => this._deactivateContainerAsync(instance, deactivationsIterator));
          }
          deactivation = deactivationsIterator.next();
        }
      }
      async _deactivateContainerAsync(instance, deactivationsIterator) {
        let deactivation = deactivationsIterator.next();
        while (typeof deactivation.value === "function") {
          await deactivation.value(instance);
          deactivation = deactivationsIterator.next();
        }
      }
      _getContainerModuleHelpersFactory() {
        const getBindFunction = (moduleId) => (serviceIdentifier) => {
          const binding = this._buildBinding(serviceIdentifier);
          binding.moduleId = moduleId;
          return this._bind(binding);
        };
        const getUnbindFunction = () => (serviceIdentifier) => {
          this.unbind(serviceIdentifier);
        };
        const getUnbindAsyncFunction = () => async (serviceIdentifier) => {
          return this.unbindAsync(serviceIdentifier);
        };
        const getIsboundFunction = () => (serviceIdentifier) => {
          return this.isBound(serviceIdentifier);
        };
        const getRebindFunction = (moduleId) => {
          const bind = getBindFunction(moduleId);
          return (serviceIdentifier) => {
            this.unbind(serviceIdentifier);
            return bind(serviceIdentifier);
          };
        };
        const getOnActivationFunction = (moduleId) => (serviceIdentifier, onActivation) => {
          this._moduleActivationStore.addActivation(moduleId, serviceIdentifier, onActivation);
          this.onActivation(serviceIdentifier, onActivation);
        };
        const getOnDeactivationFunction = (moduleId) => (serviceIdentifier, onDeactivation) => {
          this._moduleActivationStore.addDeactivation(moduleId, serviceIdentifier, onDeactivation);
          this.onDeactivation(serviceIdentifier, onDeactivation);
        };
        return (mId) => ({
          bindFunction: getBindFunction(mId),
          isboundFunction: getIsboundFunction(),
          onActivationFunction: getOnActivationFunction(mId),
          onDeactivationFunction: getOnDeactivationFunction(mId),
          rebindFunction: getRebindFunction(mId),
          unbindAsyncFunction: getUnbindAsyncFunction(),
          unbindFunction: getUnbindFunction()
        });
      }
      _bind(binding) {
        this._bindingDictionary.add(binding.serviceIdentifier, binding);
        return new binding_to_syntax_1.BindingToSyntax(binding);
      }
      _buildBinding(serviceIdentifier) {
        const scope = this.options.defaultScope || literal_types_1.BindingScopeEnum.Transient;
        return new binding_1.Binding(serviceIdentifier, scope);
      }
      async _getAll(getArgs) {
        return Promise.all(this._get(getArgs));
      }
      // Prepares arguments required for resolution and
      // delegates resolution to _middleware if available
      // otherwise it delegates resolution to _planAndResolve
      _get(getArgs) {
        const planAndResolveArgs = {
          ...getArgs,
          contextInterceptor: (context) => context,
          targetType: literal_types_1.TargetTypeEnum.Variable
        };
        if (this._middleware) {
          const middlewareResult = this._middleware(planAndResolveArgs);
          if (middlewareResult === void 0 || middlewareResult === null) {
            throw new Error(ERROR_MSGS.INVALID_MIDDLEWARE_RETURN);
          }
          return middlewareResult;
        }
        return this._planAndResolve()(planAndResolveArgs);
      }
      _getButThrowIfAsync(getArgs) {
        const result = this._get(getArgs);
        if ((0, async_1.isPromiseOrContainsPromise)(result)) {
          throw new Error(ERROR_MSGS.LAZY_IN_SYNC(getArgs.serviceIdentifier));
        }
        return result;
      }
      _getAllArgs(serviceIdentifier, options, isOptional) {
        const getAllArgs = {
          avoidConstraints: !((options == null ? void 0 : options.enforceBindingConstraints) ?? false),
          isMultiInject: true,
          isOptional,
          serviceIdentifier
        };
        return getAllArgs;
      }
      _getNotAllArgs(serviceIdentifier, isMultiInject, isOptional, key, value) {
        const getNotAllArgs = {
          avoidConstraints: false,
          isMultiInject,
          isOptional,
          key,
          serviceIdentifier,
          value
        };
        return getNotAllArgs;
      }
      _getPlanMetadataFromNextArgs(args) {
        const planMetadata = {
          isMultiInject: args.isMultiInject
        };
        if (args.key !== void 0) {
          planMetadata.customTag = {
            key: args.key,
            value: args.value
          };
        }
        if (args.isOptional === true) {
          planMetadata.isOptional = true;
        }
        return planMetadata;
      }
      // Planner creates a plan and Resolver resolves a plan
      // one of the jobs of the Container is to links the Planner
      // with the Resolver and that is what this function is about
      _planAndResolve() {
        return (args) => {
          let context = (0, planner_1.plan)(this._metadataReader, this, args.targetType, args.serviceIdentifier, this._getPlanMetadataFromNextArgs(args), args.avoidConstraints);
          context = args.contextInterceptor(context);
          const result = (0, resolver_1.resolve)(context);
          return result;
        };
      }
      _deactivateIfSingleton(binding) {
        if (!binding.activated) {
          return;
        }
        if ((0, async_1.isPromise)(binding.cache)) {
          return binding.cache.then((resolved) => this._deactivate(binding, resolved));
        }
        return this._deactivate(binding, binding.cache);
      }
      _deactivateSingletons(bindings) {
        for (const binding of bindings) {
          const result = this._deactivateIfSingleton(binding);
          if ((0, async_1.isPromise)(result)) {
            throw new Error(ERROR_MSGS.ASYNC_UNBIND_REQUIRED);
          }
        }
      }
      async _deactivateSingletonsAsync(bindings) {
        await Promise.all(bindings.map(async (b) => this._deactivateIfSingleton(b)));
      }
      _propagateContainerDeactivationThenBindingAndPreDestroy(binding, instance, constructor) {
        if (this.parent) {
          return this._deactivate.bind(this.parent)(binding, instance);
        } else {
          return this._bindingDeactivationAndPreDestroy(binding, instance, constructor);
        }
      }
      async _propagateContainerDeactivationThenBindingAndPreDestroyAsync(binding, instance, constructor) {
        if (this.parent) {
          await this._deactivate.bind(this.parent)(binding, instance);
        } else {
          await this._bindingDeactivationAndPreDestroyAsync(binding, instance, constructor);
        }
      }
      _removeServiceFromDictionary(serviceIdentifier) {
        try {
          this._bindingDictionary.remove(serviceIdentifier);
        } catch (_e) {
          throw new Error(`${ERROR_MSGS.CANNOT_UNBIND} ${(0, serialization_1.getServiceIdentifierAsString)(serviceIdentifier)}`);
        }
      }
      _bindingDeactivationAndPreDestroy(binding, instance, constructor) {
        if (typeof binding.onDeactivation === "function") {
          const result = binding.onDeactivation(instance);
          if ((0, async_1.isPromise)(result)) {
            return result.then(() => this._preDestroy(constructor, instance));
          }
        }
        return this._preDestroy(constructor, instance);
      }
      async _bindingDeactivationAndPreDestroyAsync(binding, instance, constructor) {
        if (typeof binding.onDeactivation === "function") {
          await binding.onDeactivation(instance);
        }
        await this._preDestroy(constructor, instance);
      }
    };
    exports.Container = Container;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/container/container_module.js
var require_container_module = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/container/container_module.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AsyncContainerModule = exports.ContainerModule = void 0;
    var id_1 = require_id();
    var ContainerModule = class {
      constructor(registry) {
        __publicField(this, "id");
        __publicField(this, "registry");
        this.id = (0, id_1.id)();
        this.registry = registry;
      }
    };
    exports.ContainerModule = ContainerModule;
    var AsyncContainerModule = class {
      constructor(registry) {
        __publicField(this, "id");
        __publicField(this, "registry");
        this.id = (0, id_1.id)();
        this.registry = registry;
      }
    };
    exports.AsyncContainerModule = AsyncContainerModule;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/js.js
var require_js = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/utils/js.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getFirstArrayDuplicate = getFirstArrayDuplicate;
    function getFirstArrayDuplicate(array) {
      const seenValues = /* @__PURE__ */ new Set();
      for (const entry of array) {
        if (seenValues.has(entry)) {
          return entry;
        } else {
          seenValues.add(entry);
        }
      }
      return void 0;
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/decorator_utils.js
var require_decorator_utils = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/decorator_utils.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decorate = decorate;
    exports.tagParameter = tagParameter;
    exports.tagProperty = tagProperty;
    exports.createTaggedDecorator = createTaggedDecorator;
    var ERROR_MSGS = __importStar(require_error_msgs());
    var METADATA_KEY = __importStar(require_metadata_keys());
    var js_1 = require_js();
    function targetIsConstructorFunction(target) {
      return target.prototype !== void 0;
    }
    function _throwIfMethodParameter(parameterName) {
      if (parameterName !== void 0) {
        throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);
      }
    }
    function tagParameter(annotationTarget, parameterName, parameterIndex, metadata) {
      _throwIfMethodParameter(parameterName);
      _tagParameterOrProperty(METADATA_KEY.TAGGED, annotationTarget, parameterIndex.toString(), metadata);
    }
    function tagProperty(annotationTarget, propertyName, metadata) {
      if (targetIsConstructorFunction(annotationTarget)) {
        throw new Error(ERROR_MSGS.INVALID_DECORATOR_OPERATION);
      }
      _tagParameterOrProperty(METADATA_KEY.TAGGED_PROP, annotationTarget.constructor, propertyName, metadata);
    }
    function _ensureNoMetadataKeyDuplicates(metadata) {
      let metadatas = [];
      if (Array.isArray(metadata)) {
        metadatas = metadata;
        const duplicate = (0, js_1.getFirstArrayDuplicate)(metadatas.map((md) => md.key));
        if (duplicate !== void 0) {
          throw new Error(`${ERROR_MSGS.DUPLICATED_METADATA} ${duplicate.toString()}`);
        }
      } else {
        metadatas = [metadata];
      }
      return metadatas;
    }
    function _tagParameterOrProperty(metadataKey, annotationTarget, key, metadata) {
      const metadatas = _ensureNoMetadataKeyDuplicates(metadata);
      let paramsOrPropertiesMetadata = {};
      if (Reflect.hasOwnMetadata(metadataKey, annotationTarget)) {
        paramsOrPropertiesMetadata = Reflect.getMetadata(metadataKey, annotationTarget);
      }
      let paramOrPropertyMetadata = paramsOrPropertiesMetadata[key];
      if (paramOrPropertyMetadata === void 0) {
        paramOrPropertyMetadata = [];
      } else {
        for (const m of paramOrPropertyMetadata) {
          if (metadatas.some((md) => md.key === m.key)) {
            throw new Error(`${ERROR_MSGS.DUPLICATED_METADATA} ${m.key.toString()}`);
          }
        }
      }
      paramOrPropertyMetadata.push(...metadatas);
      paramsOrPropertiesMetadata[key] = paramOrPropertyMetadata;
      Reflect.defineMetadata(metadataKey, paramsOrPropertiesMetadata, annotationTarget);
    }
    function createTaggedDecorator(metadata) {
      return (target, targetKey, indexOrPropertyDescriptor) => {
        if (typeof indexOrPropertyDescriptor === "number") {
          tagParameter(target, targetKey, indexOrPropertyDescriptor, metadata);
        } else {
          tagProperty(target, targetKey, metadata);
        }
      };
    }
    function _decorate(decorators, target) {
      Reflect.decorate(decorators, target);
    }
    function _param(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    }
    function decorate(decorator, target, parameterIndexOrProperty) {
      if (typeof parameterIndexOrProperty === "number") {
        _decorate([_param(parameterIndexOrProperty, decorator)], target);
      } else if (typeof parameterIndexOrProperty === "string") {
        Reflect.decorate([decorator], target, parameterIndexOrProperty);
      } else {
        _decorate([decorator], target);
      }
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/injectable.js
var require_injectable = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/injectable.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.injectable = injectable;
    var ERRORS_MSGS = __importStar(require_error_msgs());
    var METADATA_KEY = __importStar(require_metadata_keys());
    function injectable() {
      return function(target) {
        if (Reflect.hasOwnMetadata(METADATA_KEY.PARAM_TYPES, target)) {
          throw new Error(ERRORS_MSGS.DUPLICATED_INJECTABLE_DECORATOR);
        }
        const types = Reflect.getMetadata(METADATA_KEY.DESIGN_PARAM_TYPES, target) || [];
        Reflect.defineMetadata(METADATA_KEY.PARAM_TYPES, types, target);
        return target;
      };
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/tagged.js
var require_tagged = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/tagged.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.tagged = tagged;
    var metadata_1 = require_metadata();
    var decorator_utils_1 = require_decorator_utils();
    function tagged(metadataKey, metadataValue) {
      return (0, decorator_utils_1.createTaggedDecorator)(new metadata_1.Metadata(metadataKey, metadataValue));
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/named.js
var require_named = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/named.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.named = named;
    var METADATA_KEY = __importStar(require_metadata_keys());
    var metadata_1 = require_metadata();
    var decorator_utils_1 = require_decorator_utils();
    function named(name) {
      return (0, decorator_utils_1.createTaggedDecorator)(new metadata_1.Metadata(METADATA_KEY.NAMED_TAG, name));
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/inject_base.js
var require_inject_base = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/inject_base.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.injectBase = injectBase;
    var error_msgs_1 = require_error_msgs();
    var metadata_1 = require_metadata();
    var decorator_utils_1 = require_decorator_utils();
    function injectBase(metadataKey) {
      return (serviceIdentifier) => {
        return (target, targetKey, indexOrPropertyDescriptor) => {
          if (serviceIdentifier === void 0) {
            const className = typeof target === "function" ? target.name : target.constructor.name;
            throw new Error((0, error_msgs_1.UNDEFINED_INJECT_ANNOTATION)(className));
          }
          (0, decorator_utils_1.createTaggedDecorator)(new metadata_1.Metadata(metadataKey, serviceIdentifier))(target, targetKey, indexOrPropertyDescriptor);
        };
      };
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/inject.js
var require_inject = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/inject.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.inject = void 0;
    var METADATA_KEY = __importStar(require_metadata_keys());
    var inject_base_1 = require_inject_base();
    var inject = (0, inject_base_1.injectBase)(METADATA_KEY.INJECT_TAG);
    exports.inject = inject;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/optional.js
var require_optional = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/optional.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.optional = optional;
    var METADATA_KEY = __importStar(require_metadata_keys());
    var metadata_1 = require_metadata();
    var decorator_utils_1 = require_decorator_utils();
    function optional() {
      return (0, decorator_utils_1.createTaggedDecorator)(new metadata_1.Metadata(METADATA_KEY.OPTIONAL_TAG, true));
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/unmanaged.js
var require_unmanaged = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/unmanaged.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.unmanaged = unmanaged;
    var METADATA_KEY = __importStar(require_metadata_keys());
    var metadata_1 = require_metadata();
    var decorator_utils_1 = require_decorator_utils();
    function unmanaged() {
      return function(target, targetKey, index2) {
        const metadata = new metadata_1.Metadata(METADATA_KEY.UNMANAGED_TAG, true);
        (0, decorator_utils_1.tagParameter)(target, targetKey, index2, metadata);
      };
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/multi_inject.js
var require_multi_inject = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/multi_inject.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.multiInject = void 0;
    var METADATA_KEY = __importStar(require_metadata_keys());
    var inject_base_1 = require_inject_base();
    var multiInject = (0, inject_base_1.injectBase)(METADATA_KEY.MULTI_INJECT_TAG);
    exports.multiInject = multiInject;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/target_name.js
var require_target_name = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/target_name.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.targetName = targetName;
    var METADATA_KEY = __importStar(require_metadata_keys());
    var metadata_1 = require_metadata();
    var decorator_utils_1 = require_decorator_utils();
    function targetName(name) {
      return function(target, targetKey, index2) {
        const metadata = new metadata_1.Metadata(METADATA_KEY.NAME_TAG, name);
        (0, decorator_utils_1.tagParameter)(target, targetKey, index2, metadata);
      };
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/property_event_decorator.js
var require_property_event_decorator = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/property_event_decorator.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.propertyEventDecorator = propertyEventDecorator;
    var metadata_1 = require_metadata();
    function propertyEventDecorator(eventKey, errorMessage) {
      return () => {
        return (target, propertyKey) => {
          const metadata = new metadata_1.Metadata(eventKey, propertyKey);
          if (Reflect.hasOwnMetadata(eventKey, target.constructor)) {
            throw new Error(errorMessage);
          }
          Reflect.defineMetadata(eventKey, metadata, target.constructor);
        };
      };
    }
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/post_construct.js
var require_post_construct = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/post_construct.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.postConstruct = void 0;
    var ERRORS_MSGS = __importStar(require_error_msgs());
    var METADATA_KEY = __importStar(require_metadata_keys());
    var property_event_decorator_1 = require_property_event_decorator();
    var postConstruct = (0, property_event_decorator_1.propertyEventDecorator)(METADATA_KEY.POST_CONSTRUCT, ERRORS_MSGS.MULTIPLE_POST_CONSTRUCT_METHODS);
    exports.postConstruct = postConstruct;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/pre_destroy.js
var require_pre_destroy = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/annotation/pre_destroy.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.preDestroy = void 0;
    var ERRORS_MSGS = __importStar(require_error_msgs());
    var METADATA_KEY = __importStar(require_metadata_keys());
    var property_event_decorator_1 = require_property_event_decorator();
    var preDestroy = (0, property_event_decorator_1.propertyEventDecorator)(METADATA_KEY.PRE_DESTROY, ERRORS_MSGS.MULTIPLE_PRE_DESTROY_METHODS);
    exports.preDestroy = preDestroy;
  }
});

// ../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/index.js
var require_cjs4 = __commonJS({
  "../../node_modules/.pnpm/inversify@6.2.0_reflect-metadata@0.1.14/node_modules/inversify/lib/cjs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || /* @__PURE__ */ function() {
      var ownKeys2 = function(o) {
        ownKeys2 = Object.getOwnPropertyNames || function(o2) {
          var ar = [];
          for (var k in o2) if (Object.prototype.hasOwnProperty.call(o2, k)) ar[ar.length] = k;
          return ar;
        };
        return ownKeys2(o);
      };
      return function(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) {
          for (var k = ownKeys2(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        }
        __setModuleDefault(result, mod);
        return result;
      };
    }();
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.multiBindToService = exports.getServiceIdentifierAsString = exports.typeConstraint = exports.namedConstraint = exports.taggedConstraint = exports.traverseAncerstors = exports.decorate = exports.id = exports.MetadataReader = exports.preDestroy = exports.postConstruct = exports.targetName = exports.multiInject = exports.unmanaged = exports.optional = exports.inject = exports.named = exports.tagged = exports.injectable = exports.createTaggedDecorator = exports.ContainerModule = exports.AsyncContainerModule = exports.TargetTypeEnum = exports.BindingTypeEnum = exports.BindingScopeEnum = exports.Container = exports.METADATA_KEY = exports.LazyServiceIdentifier = void 0;
    require_Reflect();
    var keys = __importStar(require_metadata_keys());
    var common_1 = require_cjs();
    Object.defineProperty(exports, "LazyServiceIdentifier", { enumerable: true, get: function() {
      return common_1.LazyServiceIdentifier;
    } });
    exports.METADATA_KEY = keys;
    var container_1 = require_container();
    Object.defineProperty(exports, "Container", { enumerable: true, get: function() {
      return container_1.Container;
    } });
    var literal_types_1 = require_literal_types();
    Object.defineProperty(exports, "BindingScopeEnum", { enumerable: true, get: function() {
      return literal_types_1.BindingScopeEnum;
    } });
    Object.defineProperty(exports, "BindingTypeEnum", { enumerable: true, get: function() {
      return literal_types_1.BindingTypeEnum;
    } });
    Object.defineProperty(exports, "TargetTypeEnum", { enumerable: true, get: function() {
      return literal_types_1.TargetTypeEnum;
    } });
    var container_module_1 = require_container_module();
    Object.defineProperty(exports, "AsyncContainerModule", { enumerable: true, get: function() {
      return container_module_1.AsyncContainerModule;
    } });
    Object.defineProperty(exports, "ContainerModule", { enumerable: true, get: function() {
      return container_module_1.ContainerModule;
    } });
    var decorator_utils_1 = require_decorator_utils();
    Object.defineProperty(exports, "createTaggedDecorator", { enumerable: true, get: function() {
      return decorator_utils_1.createTaggedDecorator;
    } });
    var injectable_1 = require_injectable();
    Object.defineProperty(exports, "injectable", { enumerable: true, get: function() {
      return injectable_1.injectable;
    } });
    var tagged_1 = require_tagged();
    Object.defineProperty(exports, "tagged", { enumerable: true, get: function() {
      return tagged_1.tagged;
    } });
    var named_1 = require_named();
    Object.defineProperty(exports, "named", { enumerable: true, get: function() {
      return named_1.named;
    } });
    var inject_1 = require_inject();
    Object.defineProperty(exports, "inject", { enumerable: true, get: function() {
      return inject_1.inject;
    } });
    var optional_1 = require_optional();
    Object.defineProperty(exports, "optional", { enumerable: true, get: function() {
      return optional_1.optional;
    } });
    var unmanaged_1 = require_unmanaged();
    Object.defineProperty(exports, "unmanaged", { enumerable: true, get: function() {
      return unmanaged_1.unmanaged;
    } });
    var multi_inject_1 = require_multi_inject();
    Object.defineProperty(exports, "multiInject", { enumerable: true, get: function() {
      return multi_inject_1.multiInject;
    } });
    var target_name_1 = require_target_name();
    Object.defineProperty(exports, "targetName", { enumerable: true, get: function() {
      return target_name_1.targetName;
    } });
    var post_construct_1 = require_post_construct();
    Object.defineProperty(exports, "postConstruct", { enumerable: true, get: function() {
      return post_construct_1.postConstruct;
    } });
    var pre_destroy_1 = require_pre_destroy();
    Object.defineProperty(exports, "preDestroy", { enumerable: true, get: function() {
      return pre_destroy_1.preDestroy;
    } });
    var metadata_reader_1 = require_metadata_reader();
    Object.defineProperty(exports, "MetadataReader", { enumerable: true, get: function() {
      return metadata_reader_1.MetadataReader;
    } });
    var id_1 = require_id();
    Object.defineProperty(exports, "id", { enumerable: true, get: function() {
      return id_1.id;
    } });
    var decorator_utils_2 = require_decorator_utils();
    Object.defineProperty(exports, "decorate", { enumerable: true, get: function() {
      return decorator_utils_2.decorate;
    } });
    var constraint_helpers_1 = require_constraint_helpers();
    Object.defineProperty(exports, "traverseAncerstors", { enumerable: true, get: function() {
      return constraint_helpers_1.traverseAncerstors;
    } });
    Object.defineProperty(exports, "taggedConstraint", { enumerable: true, get: function() {
      return constraint_helpers_1.taggedConstraint;
    } });
    Object.defineProperty(exports, "namedConstraint", { enumerable: true, get: function() {
      return constraint_helpers_1.namedConstraint;
    } });
    Object.defineProperty(exports, "typeConstraint", { enumerable: true, get: function() {
      return constraint_helpers_1.typeConstraint;
    } });
    var serialization_1 = require_serialization();
    Object.defineProperty(exports, "getServiceIdentifierAsString", { enumerable: true, get: function() {
      return serialization_1.getServiceIdentifierAsString;
    } });
    var binding_utils_1 = require_binding_utils();
    Object.defineProperty(exports, "multiBindToService", { enumerable: true, get: function() {
      return binding_utils_1.multiBindToService;
    } });
  }
});

// ../../node_modules/.pnpm/axios@1.7.7/node_modules/axios/dist/browser/axios.cjs
var require_axios = __commonJS({
  "../../node_modules/.pnpm/axios@1.7.7/node_modules/axios/dist/browser/axios.cjs"(exports, module) {
    "use strict";
    function bind(fn, thisArg) {
      return function wrap() {
        return fn.apply(thisArg, arguments);
      };
    }
    var { toString } = Object.prototype;
    var { getPrototypeOf } = Object;
    var kindOf = /* @__PURE__ */ ((cache) => (thing) => {
      const str = toString.call(thing);
      return cache[str] || (cache[str] = str.slice(8, -1).toLowerCase());
    })(/* @__PURE__ */ Object.create(null));
    var kindOfTest = (type) => {
      type = type.toLowerCase();
      return (thing) => kindOf(thing) === type;
    };
    var typeOfTest = (type) => (thing) => typeof thing === type;
    var { isArray } = Array;
    var isUndefined = typeOfTest("undefined");
    function isBuffer(val) {
      return val !== null && !isUndefined(val) && val.constructor !== null && !isUndefined(val.constructor) && isFunction(val.constructor.isBuffer) && val.constructor.isBuffer(val);
    }
    var isArrayBuffer = kindOfTest("ArrayBuffer");
    function isArrayBufferView(val) {
      let result;
      if (typeof ArrayBuffer !== "undefined" && ArrayBuffer.isView) {
        result = ArrayBuffer.isView(val);
      } else {
        result = val && val.buffer && isArrayBuffer(val.buffer);
      }
      return result;
    }
    var isString = typeOfTest("string");
    var isFunction = typeOfTest("function");
    var isNumber = typeOfTest("number");
    var isObject = (thing) => thing !== null && typeof thing === "object";
    var isBoolean = (thing) => thing === true || thing === false;
    var isPlainObject = (val) => {
      if (kindOf(val) !== "object") {
        return false;
      }
      const prototype2 = getPrototypeOf(val);
      return (prototype2 === null || prototype2 === Object.prototype || Object.getPrototypeOf(prototype2) === null) && !(Symbol.toStringTag in val) && !(Symbol.iterator in val);
    };
    var isDate = kindOfTest("Date");
    var isFile = kindOfTest("File");
    var isBlob = kindOfTest("Blob");
    var isFileList = kindOfTest("FileList");
    var isStream = (val) => isObject(val) && isFunction(val.pipe);
    var isFormData = (thing) => {
      let kind;
      return thing && (typeof FormData === "function" && thing instanceof FormData || isFunction(thing.append) && ((kind = kindOf(thing)) === "formdata" || // detect form-data instance
      kind === "object" && isFunction(thing.toString) && thing.toString() === "[object FormData]"));
    };
    var isURLSearchParams = kindOfTest("URLSearchParams");
    var [isReadableStream, isRequest, isResponse, isHeaders] = ["ReadableStream", "Request", "Response", "Headers"].map(kindOfTest);
    var trim = (str) => str.trim ? str.trim() : str.replace(/^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g, "");
    function forEach(obj, fn, { allOwnKeys = false } = {}) {
      if (obj === null || typeof obj === "undefined") {
        return;
      }
      let i;
      let l;
      if (typeof obj !== "object") {
        obj = [obj];
      }
      if (isArray(obj)) {
        for (i = 0, l = obj.length; i < l; i++) {
          fn.call(null, obj[i], i, obj);
        }
      } else {
        const keys = allOwnKeys ? Object.getOwnPropertyNames(obj) : Object.keys(obj);
        const len = keys.length;
        let key;
        for (i = 0; i < len; i++) {
          key = keys[i];
          fn.call(null, obj[key], key, obj);
        }
      }
    }
    function findKey(obj, key) {
      key = key.toLowerCase();
      const keys = Object.keys(obj);
      let i = keys.length;
      let _key;
      while (i-- > 0) {
        _key = keys[i];
        if (key === _key.toLowerCase()) {
          return _key;
        }
      }
      return null;
    }
    var _global = (() => {
      if (typeof globalThis !== "undefined") return globalThis;
      return typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : global;
    })();
    var isContextDefined = (context) => !isUndefined(context) && context !== _global;
    function merge() {
      const { caseless } = isContextDefined(this) && this || {};
      const result = {};
      const assignValue = (val, key) => {
        const targetKey = caseless && findKey(result, key) || key;
        if (isPlainObject(result[targetKey]) && isPlainObject(val)) {
          result[targetKey] = merge(result[targetKey], val);
        } else if (isPlainObject(val)) {
          result[targetKey] = merge({}, val);
        } else if (isArray(val)) {
          result[targetKey] = val.slice();
        } else {
          result[targetKey] = val;
        }
      };
      for (let i = 0, l = arguments.length; i < l; i++) {
        arguments[i] && forEach(arguments[i], assignValue);
      }
      return result;
    }
    var extend = (a, b, thisArg, { allOwnKeys } = {}) => {
      forEach(b, (val, key) => {
        if (thisArg && isFunction(val)) {
          a[key] = bind(val, thisArg);
        } else {
          a[key] = val;
        }
      }, { allOwnKeys });
      return a;
    };
    var stripBOM = (content) => {
      if (content.charCodeAt(0) === 65279) {
        content = content.slice(1);
      }
      return content;
    };
    var inherits = (constructor, superConstructor, props, descriptors2) => {
      constructor.prototype = Object.create(superConstructor.prototype, descriptors2);
      constructor.prototype.constructor = constructor;
      Object.defineProperty(constructor, "super", {
        value: superConstructor.prototype
      });
      props && Object.assign(constructor.prototype, props);
    };
    var toFlatObject = (sourceObj, destObj, filter, propFilter) => {
      let props;
      let i;
      let prop;
      const merged = {};
      destObj = destObj || {};
      if (sourceObj == null) return destObj;
      do {
        props = Object.getOwnPropertyNames(sourceObj);
        i = props.length;
        while (i-- > 0) {
          prop = props[i];
          if ((!propFilter || propFilter(prop, sourceObj, destObj)) && !merged[prop]) {
            destObj[prop] = sourceObj[prop];
            merged[prop] = true;
          }
        }
        sourceObj = filter !== false && getPrototypeOf(sourceObj);
      } while (sourceObj && (!filter || filter(sourceObj, destObj)) && sourceObj !== Object.prototype);
      return destObj;
    };
    var endsWith = (str, searchString, position) => {
      str = String(str);
      if (position === void 0 || position > str.length) {
        position = str.length;
      }
      position -= searchString.length;
      const lastIndex = str.indexOf(searchString, position);
      return lastIndex !== -1 && lastIndex === position;
    };
    var toArray = (thing) => {
      if (!thing) return null;
      if (isArray(thing)) return thing;
      let i = thing.length;
      if (!isNumber(i)) return null;
      const arr = new Array(i);
      while (i-- > 0) {
        arr[i] = thing[i];
      }
      return arr;
    };
    var isTypedArray = /* @__PURE__ */ ((TypedArray) => {
      return (thing) => {
        return TypedArray && thing instanceof TypedArray;
      };
    })(typeof Uint8Array !== "undefined" && getPrototypeOf(Uint8Array));
    var forEachEntry = (obj, fn) => {
      const generator = obj && obj[Symbol.iterator];
      const iterator = generator.call(obj);
      let result;
      while ((result = iterator.next()) && !result.done) {
        const pair = result.value;
        fn.call(obj, pair[0], pair[1]);
      }
    };
    var matchAll = (regExp, str) => {
      let matches;
      const arr = [];
      while ((matches = regExp.exec(str)) !== null) {
        arr.push(matches);
      }
      return arr;
    };
    var isHTMLForm = kindOfTest("HTMLFormElement");
    var toCamelCase = (str) => {
      return str.toLowerCase().replace(
        /[-_\s]([a-z\d])(\w*)/g,
        function replacer(m, p1, p2) {
          return p1.toUpperCase() + p2;
        }
      );
    };
    var hasOwnProperty = (({ hasOwnProperty: hasOwnProperty2 }) => (obj, prop) => hasOwnProperty2.call(obj, prop))(Object.prototype);
    var isRegExp = kindOfTest("RegExp");
    var reduceDescriptors = (obj, reducer) => {
      const descriptors2 = Object.getOwnPropertyDescriptors(obj);
      const reducedDescriptors = {};
      forEach(descriptors2, (descriptor, name) => {
        let ret;
        if ((ret = reducer(descriptor, name, obj)) !== false) {
          reducedDescriptors[name] = ret || descriptor;
        }
      });
      Object.defineProperties(obj, reducedDescriptors);
    };
    var freezeMethods = (obj) => {
      reduceDescriptors(obj, (descriptor, name) => {
        if (isFunction(obj) && ["arguments", "caller", "callee"].indexOf(name) !== -1) {
          return false;
        }
        const value = obj[name];
        if (!isFunction(value)) return;
        descriptor.enumerable = false;
        if ("writable" in descriptor) {
          descriptor.writable = false;
          return;
        }
        if (!descriptor.set) {
          descriptor.set = () => {
            throw Error("Can not rewrite read-only method '" + name + "'");
          };
        }
      });
    };
    var toObjectSet = (arrayOrString, delimiter) => {
      const obj = {};
      const define = (arr) => {
        arr.forEach((value) => {
          obj[value] = true;
        });
      };
      isArray(arrayOrString) ? define(arrayOrString) : define(String(arrayOrString).split(delimiter));
      return obj;
    };
    var noop = () => {
    };
    var toFiniteNumber = (value, defaultValue) => {
      return value != null && Number.isFinite(value = +value) ? value : defaultValue;
    };
    var ALPHA = "abcdefghijklmnopqrstuvwxyz";
    var DIGIT = "0123456789";
    var ALPHABET = {
      DIGIT,
      ALPHA,
      ALPHA_DIGIT: ALPHA + ALPHA.toUpperCase() + DIGIT
    };
    var generateString = (size = 16, alphabet = ALPHABET.ALPHA_DIGIT) => {
      let str = "";
      const { length } = alphabet;
      while (size--) {
        str += alphabet[Math.random() * length | 0];
      }
      return str;
    };
    function isSpecCompliantForm(thing) {
      return !!(thing && isFunction(thing.append) && thing[Symbol.toStringTag] === "FormData" && thing[Symbol.iterator]);
    }
    var toJSONObject = (obj) => {
      const stack = new Array(10);
      const visit = (source, i) => {
        if (isObject(source)) {
          if (stack.indexOf(source) >= 0) {
            return;
          }
          if (!("toJSON" in source)) {
            stack[i] = source;
            const target = isArray(source) ? [] : {};
            forEach(source, (value, key) => {
              const reducedValue = visit(value, i + 1);
              !isUndefined(reducedValue) && (target[key] = reducedValue);
            });
            stack[i] = void 0;
            return target;
          }
        }
        return source;
      };
      return visit(obj, 0);
    };
    var isAsyncFn = kindOfTest("AsyncFunction");
    var isThenable = (thing) => thing && (isObject(thing) || isFunction(thing)) && isFunction(thing.then) && isFunction(thing.catch);
    var _setImmediate = ((setImmediateSupported, postMessageSupported) => {
      if (setImmediateSupported) {
        return setImmediate;
      }
      return postMessageSupported ? ((token, callbacks) => {
        _global.addEventListener("message", ({ source, data }) => {
          if (source === _global && data === token) {
            callbacks.length && callbacks.shift()();
          }
        }, false);
        return (cb) => {
          callbacks.push(cb);
          _global.postMessage(token, "*");
        };
      })(`axios@${Math.random()}`, []) : (cb) => setTimeout(cb);
    })(
      typeof setImmediate === "function",
      isFunction(_global.postMessage)
    );
    var asap = typeof queueMicrotask !== "undefined" ? queueMicrotask.bind(_global) : typeof process !== "undefined" && process.nextTick || _setImmediate;
    var utils$1 = {
      isArray,
      isArrayBuffer,
      isBuffer,
      isFormData,
      isArrayBufferView,
      isString,
      isNumber,
      isBoolean,
      isObject,
      isPlainObject,
      isReadableStream,
      isRequest,
      isResponse,
      isHeaders,
      isUndefined,
      isDate,
      isFile,
      isBlob,
      isRegExp,
      isFunction,
      isStream,
      isURLSearchParams,
      isTypedArray,
      isFileList,
      forEach,
      merge,
      extend,
      trim,
      stripBOM,
      inherits,
      toFlatObject,
      kindOf,
      kindOfTest,
      endsWith,
      toArray,
      forEachEntry,
      matchAll,
      isHTMLForm,
      hasOwnProperty,
      hasOwnProp: hasOwnProperty,
      // an alias to avoid ESLint no-prototype-builtins detection
      reduceDescriptors,
      freezeMethods,
      toObjectSet,
      toCamelCase,
      noop,
      toFiniteNumber,
      findKey,
      global: _global,
      isContextDefined,
      ALPHABET,
      generateString,
      isSpecCompliantForm,
      toJSONObject,
      isAsyncFn,
      isThenable,
      setImmediate: _setImmediate,
      asap
    };
    function AxiosError(message, code, config, request, response) {
      Error.call(this);
      if (Error.captureStackTrace) {
        Error.captureStackTrace(this, this.constructor);
      } else {
        this.stack = new Error().stack;
      }
      this.message = message;
      this.name = "AxiosError";
      code && (this.code = code);
      config && (this.config = config);
      request && (this.request = request);
      if (response) {
        this.response = response;
        this.status = response.status ? response.status : null;
      }
    }
    utils$1.inherits(AxiosError, Error, {
      toJSON: function toJSON() {
        return {
          // Standard
          message: this.message,
          name: this.name,
          // Microsoft
          description: this.description,
          number: this.number,
          // Mozilla
          fileName: this.fileName,
          lineNumber: this.lineNumber,
          columnNumber: this.columnNumber,
          stack: this.stack,
          // Axios
          config: utils$1.toJSONObject(this.config),
          code: this.code,
          status: this.status
        };
      }
    });
    var prototype$1 = AxiosError.prototype;
    var descriptors = {};
    [
      "ERR_BAD_OPTION_VALUE",
      "ERR_BAD_OPTION",
      "ECONNABORTED",
      "ETIMEDOUT",
      "ERR_NETWORK",
      "ERR_FR_TOO_MANY_REDIRECTS",
      "ERR_DEPRECATED",
      "ERR_BAD_RESPONSE",
      "ERR_BAD_REQUEST",
      "ERR_CANCELED",
      "ERR_NOT_SUPPORT",
      "ERR_INVALID_URL"
      // eslint-disable-next-line func-names
    ].forEach((code) => {
      descriptors[code] = { value: code };
    });
    Object.defineProperties(AxiosError, descriptors);
    Object.defineProperty(prototype$1, "isAxiosError", { value: true });
    AxiosError.from = (error, code, config, request, response, customProps) => {
      const axiosError = Object.create(prototype$1);
      utils$1.toFlatObject(error, axiosError, function filter(obj) {
        return obj !== Error.prototype;
      }, (prop) => {
        return prop !== "isAxiosError";
      });
      AxiosError.call(axiosError, error.message, code, config, request, response);
      axiosError.cause = error;
      axiosError.name = error.name;
      customProps && Object.assign(axiosError, customProps);
      return axiosError;
    };
    var httpAdapter = null;
    function isVisitable(thing) {
      return utils$1.isPlainObject(thing) || utils$1.isArray(thing);
    }
    function removeBrackets(key) {
      return utils$1.endsWith(key, "[]") ? key.slice(0, -2) : key;
    }
    function renderKey(path, key, dots) {
      if (!path) return key;
      return path.concat(key).map(function each(token, i) {
        token = removeBrackets(token);
        return !dots && i ? "[" + token + "]" : token;
      }).join(dots ? "." : "");
    }
    function isFlatArray(arr) {
      return utils$1.isArray(arr) && !arr.some(isVisitable);
    }
    var predicates = utils$1.toFlatObject(utils$1, {}, null, function filter(prop) {
      return /^is[A-Z]/.test(prop);
    });
    function toFormData(obj, formData, options) {
      if (!utils$1.isObject(obj)) {
        throw new TypeError("target must be an object");
      }
      formData = formData || new FormData();
      options = utils$1.toFlatObject(options, {
        metaTokens: true,
        dots: false,
        indexes: false
      }, false, function defined(option, source) {
        return !utils$1.isUndefined(source[option]);
      });
      const metaTokens = options.metaTokens;
      const visitor = options.visitor || defaultVisitor;
      const dots = options.dots;
      const indexes = options.indexes;
      const _Blob = options.Blob || typeof Blob !== "undefined" && Blob;
      const useBlob = _Blob && utils$1.isSpecCompliantForm(formData);
      if (!utils$1.isFunction(visitor)) {
        throw new TypeError("visitor must be a function");
      }
      function convertValue(value) {
        if (value === null) return "";
        if (utils$1.isDate(value)) {
          return value.toISOString();
        }
        if (!useBlob && utils$1.isBlob(value)) {
          throw new AxiosError("Blob is not supported. Use a Buffer instead.");
        }
        if (utils$1.isArrayBuffer(value) || utils$1.isTypedArray(value)) {
          return useBlob && typeof Blob === "function" ? new Blob([value]) : Buffer.from(value);
        }
        return value;
      }
      function defaultVisitor(value, key, path) {
        let arr = value;
        if (value && !path && typeof value === "object") {
          if (utils$1.endsWith(key, "{}")) {
            key = metaTokens ? key : key.slice(0, -2);
            value = JSON.stringify(value);
          } else if (utils$1.isArray(value) && isFlatArray(value) || (utils$1.isFileList(value) || utils$1.endsWith(key, "[]")) && (arr = utils$1.toArray(value))) {
            key = removeBrackets(key);
            arr.forEach(function each(el, index2) {
              !(utils$1.isUndefined(el) || el === null) && formData.append(
                // eslint-disable-next-line no-nested-ternary
                indexes === true ? renderKey([key], index2, dots) : indexes === null ? key : key + "[]",
                convertValue(el)
              );
            });
            return false;
          }
        }
        if (isVisitable(value)) {
          return true;
        }
        formData.append(renderKey(path, key, dots), convertValue(value));
        return false;
      }
      const stack = [];
      const exposedHelpers = Object.assign(predicates, {
        defaultVisitor,
        convertValue,
        isVisitable
      });
      function build(value, path) {
        if (utils$1.isUndefined(value)) return;
        if (stack.indexOf(value) !== -1) {
          throw Error("Circular reference detected in " + path.join("."));
        }
        stack.push(value);
        utils$1.forEach(value, function each(el, key) {
          const result = !(utils$1.isUndefined(el) || el === null) && visitor.call(
            formData,
            el,
            utils$1.isString(key) ? key.trim() : key,
            path,
            exposedHelpers
          );
          if (result === true) {
            build(el, path ? path.concat(key) : [key]);
          }
        });
        stack.pop();
      }
      if (!utils$1.isObject(obj)) {
        throw new TypeError("data must be an object");
      }
      build(obj);
      return formData;
    }
    function encode$1(str) {
      const charMap = {
        "!": "%21",
        "'": "%27",
        "(": "%28",
        ")": "%29",
        "~": "%7E",
        "%20": "+",
        "%00": "\0"
      };
      return encodeURIComponent(str).replace(/[!'()~]|%20|%00/g, function replacer(match) {
        return charMap[match];
      });
    }
    function AxiosURLSearchParams(params, options) {
      this._pairs = [];
      params && toFormData(params, this, options);
    }
    var prototype = AxiosURLSearchParams.prototype;
    prototype.append = function append(name, value) {
      this._pairs.push([name, value]);
    };
    prototype.toString = function toString2(encoder) {
      const _encode = encoder ? function(value) {
        return encoder.call(this, value, encode$1);
      } : encode$1;
      return this._pairs.map(function each(pair) {
        return _encode(pair[0]) + "=" + _encode(pair[1]);
      }, "").join("&");
    };
    function encode(val) {
      return encodeURIComponent(val).replace(/%3A/gi, ":").replace(/%24/g, "$").replace(/%2C/gi, ",").replace(/%20/g, "+").replace(/%5B/gi, "[").replace(/%5D/gi, "]");
    }
    function buildURL(url, params, options) {
      if (!params) {
        return url;
      }
      const _encode = options && options.encode || encode;
      const serializeFn = options && options.serialize;
      let serializedParams;
      if (serializeFn) {
        serializedParams = serializeFn(params, options);
      } else {
        serializedParams = utils$1.isURLSearchParams(params) ? params.toString() : new AxiosURLSearchParams(params, options).toString(_encode);
      }
      if (serializedParams) {
        const hashmarkIndex = url.indexOf("#");
        if (hashmarkIndex !== -1) {
          url = url.slice(0, hashmarkIndex);
        }
        url += (url.indexOf("?") === -1 ? "?" : "&") + serializedParams;
      }
      return url;
    }
    var InterceptorManager = class {
      constructor() {
        this.handlers = [];
      }
      /**
       * Add a new interceptor to the stack
       *
       * @param {Function} fulfilled The function to handle `then` for a `Promise`
       * @param {Function} rejected The function to handle `reject` for a `Promise`
       *
       * @return {Number} An ID used to remove interceptor later
       */
      use(fulfilled, rejected, options) {
        this.handlers.push({
          fulfilled,
          rejected,
          synchronous: options ? options.synchronous : false,
          runWhen: options ? options.runWhen : null
        });
        return this.handlers.length - 1;
      }
      /**
       * Remove an interceptor from the stack
       *
       * @param {Number} id The ID that was returned by `use`
       *
       * @returns {Boolean} `true` if the interceptor was removed, `false` otherwise
       */
      eject(id) {
        if (this.handlers[id]) {
          this.handlers[id] = null;
        }
      }
      /**
       * Clear all interceptors from the stack
       *
       * @returns {void}
       */
      clear() {
        if (this.handlers) {
          this.handlers = [];
        }
      }
      /**
       * Iterate over all the registered interceptors
       *
       * This method is particularly useful for skipping over any
       * interceptors that may have become `null` calling `eject`.
       *
       * @param {Function} fn The function to call for each interceptor
       *
       * @returns {void}
       */
      forEach(fn) {
        utils$1.forEach(this.handlers, function forEachHandler(h) {
          if (h !== null) {
            fn(h);
          }
        });
      }
    };
    var InterceptorManager$1 = InterceptorManager;
    var transitionalDefaults = {
      silentJSONParsing: true,
      forcedJSONParsing: true,
      clarifyTimeoutError: false
    };
    var URLSearchParams$1 = typeof URLSearchParams !== "undefined" ? URLSearchParams : AxiosURLSearchParams;
    var FormData$1 = typeof FormData !== "undefined" ? FormData : null;
    var Blob$1 = typeof Blob !== "undefined" ? Blob : null;
    var platform$1 = {
      isBrowser: true,
      classes: {
        URLSearchParams: URLSearchParams$1,
        FormData: FormData$1,
        Blob: Blob$1
      },
      protocols: ["http", "https", "file", "blob", "url", "data"]
    };
    var hasBrowserEnv = typeof window !== "undefined" && typeof document !== "undefined";
    var _navigator = typeof navigator === "object" && navigator || void 0;
    var hasStandardBrowserEnv = hasBrowserEnv && (!_navigator || ["ReactNative", "NativeScript", "NS"].indexOf(_navigator.product) < 0);
    var hasStandardBrowserWebWorkerEnv = (() => {
      return typeof WorkerGlobalScope !== "undefined" && // eslint-disable-next-line no-undef
      self instanceof WorkerGlobalScope && typeof self.importScripts === "function";
    })();
    var origin = hasBrowserEnv && window.location.href || "http://localhost";
    var utils = Object.freeze({
      __proto__: null,
      hasBrowserEnv,
      hasStandardBrowserWebWorkerEnv,
      hasStandardBrowserEnv,
      navigator: _navigator,
      origin
    });
    var platform = {
      ...utils,
      ...platform$1
    };
    function toURLEncodedForm(data, options) {
      return toFormData(data, new platform.classes.URLSearchParams(), Object.assign({
        visitor: function(value, key, path, helpers) {
          if (platform.isNode && utils$1.isBuffer(value)) {
            this.append(key, value.toString("base64"));
            return false;
          }
          return helpers.defaultVisitor.apply(this, arguments);
        }
      }, options));
    }
    function parsePropPath(name) {
      return utils$1.matchAll(/\w+|\[(\w*)]/g, name).map((match) => {
        return match[0] === "[]" ? "" : match[1] || match[0];
      });
    }
    function arrayToObject(arr) {
      const obj = {};
      const keys = Object.keys(arr);
      let i;
      const len = keys.length;
      let key;
      for (i = 0; i < len; i++) {
        key = keys[i];
        obj[key] = arr[key];
      }
      return obj;
    }
    function formDataToJSON(formData) {
      function buildPath(path, value, target, index2) {
        let name = path[index2++];
        if (name === "__proto__") return true;
        const isNumericKey = Number.isFinite(+name);
        const isLast = index2 >= path.length;
        name = !name && utils$1.isArray(target) ? target.length : name;
        if (isLast) {
          if (utils$1.hasOwnProp(target, name)) {
            target[name] = [target[name], value];
          } else {
            target[name] = value;
          }
          return !isNumericKey;
        }
        if (!target[name] || !utils$1.isObject(target[name])) {
          target[name] = [];
        }
        const result = buildPath(path, value, target[name], index2);
        if (result && utils$1.isArray(target[name])) {
          target[name] = arrayToObject(target[name]);
        }
        return !isNumericKey;
      }
      if (utils$1.isFormData(formData) && utils$1.isFunction(formData.entries)) {
        const obj = {};
        utils$1.forEachEntry(formData, (name, value) => {
          buildPath(parsePropPath(name), value, obj, 0);
        });
        return obj;
      }
      return null;
    }
    function stringifySafely(rawValue, parser, encoder) {
      if (utils$1.isString(rawValue)) {
        try {
          (parser || JSON.parse)(rawValue);
          return utils$1.trim(rawValue);
        } catch (e) {
          if (e.name !== "SyntaxError") {
            throw e;
          }
        }
      }
      return (encoder || JSON.stringify)(rawValue);
    }
    var defaults = {
      transitional: transitionalDefaults,
      adapter: ["xhr", "http", "fetch"],
      transformRequest: [function transformRequest(data, headers) {
        const contentType = headers.getContentType() || "";
        const hasJSONContentType = contentType.indexOf("application/json") > -1;
        const isObjectPayload = utils$1.isObject(data);
        if (isObjectPayload && utils$1.isHTMLForm(data)) {
          data = new FormData(data);
        }
        const isFormData2 = utils$1.isFormData(data);
        if (isFormData2) {
          return hasJSONContentType ? JSON.stringify(formDataToJSON(data)) : data;
        }
        if (utils$1.isArrayBuffer(data) || utils$1.isBuffer(data) || utils$1.isStream(data) || utils$1.isFile(data) || utils$1.isBlob(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (utils$1.isArrayBufferView(data)) {
          return data.buffer;
        }
        if (utils$1.isURLSearchParams(data)) {
          headers.setContentType("application/x-www-form-urlencoded;charset=utf-8", false);
          return data.toString();
        }
        let isFileList2;
        if (isObjectPayload) {
          if (contentType.indexOf("application/x-www-form-urlencoded") > -1) {
            return toURLEncodedForm(data, this.formSerializer).toString();
          }
          if ((isFileList2 = utils$1.isFileList(data)) || contentType.indexOf("multipart/form-data") > -1) {
            const _FormData = this.env && this.env.FormData;
            return toFormData(
              isFileList2 ? { "files[]": data } : data,
              _FormData && new _FormData(),
              this.formSerializer
            );
          }
        }
        if (isObjectPayload || hasJSONContentType) {
          headers.setContentType("application/json", false);
          return stringifySafely(data);
        }
        return data;
      }],
      transformResponse: [function transformResponse(data) {
        const transitional = this.transitional || defaults.transitional;
        const forcedJSONParsing = transitional && transitional.forcedJSONParsing;
        const JSONRequested = this.responseType === "json";
        if (utils$1.isResponse(data) || utils$1.isReadableStream(data)) {
          return data;
        }
        if (data && utils$1.isString(data) && (forcedJSONParsing && !this.responseType || JSONRequested)) {
          const silentJSONParsing = transitional && transitional.silentJSONParsing;
          const strictJSONParsing = !silentJSONParsing && JSONRequested;
          try {
            return JSON.parse(data);
          } catch (e) {
            if (strictJSONParsing) {
              if (e.name === "SyntaxError") {
                throw AxiosError.from(e, AxiosError.ERR_BAD_RESPONSE, this, null, this.response);
              }
              throw e;
            }
          }
        }
        return data;
      }],
      /**
       * A timeout in milliseconds to abort a request. If set to 0 (default) a
       * timeout is not created.
       */
      timeout: 0,
      xsrfCookieName: "XSRF-TOKEN",
      xsrfHeaderName: "X-XSRF-TOKEN",
      maxContentLength: -1,
      maxBodyLength: -1,
      env: {
        FormData: platform.classes.FormData,
        Blob: platform.classes.Blob
      },
      validateStatus: function validateStatus(status) {
        return status >= 200 && status < 300;
      },
      headers: {
        common: {
          "Accept": "application/json, text/plain, */*",
          "Content-Type": void 0
        }
      }
    };
    utils$1.forEach(["delete", "get", "head", "post", "put", "patch"], (method) => {
      defaults.headers[method] = {};
    });
    var defaults$1 = defaults;
    var ignoreDuplicateOf = utils$1.toObjectSet([
      "age",
      "authorization",
      "content-length",
      "content-type",
      "etag",
      "expires",
      "from",
      "host",
      "if-modified-since",
      "if-unmodified-since",
      "last-modified",
      "location",
      "max-forwards",
      "proxy-authorization",
      "referer",
      "retry-after",
      "user-agent"
    ]);
    var parseHeaders = (rawHeaders) => {
      const parsed = {};
      let key;
      let val;
      let i;
      rawHeaders && rawHeaders.split("\n").forEach(function parser(line) {
        i = line.indexOf(":");
        key = line.substring(0, i).trim().toLowerCase();
        val = line.substring(i + 1).trim();
        if (!key || parsed[key] && ignoreDuplicateOf[key]) {
          return;
        }
        if (key === "set-cookie") {
          if (parsed[key]) {
            parsed[key].push(val);
          } else {
            parsed[key] = [val];
          }
        } else {
          parsed[key] = parsed[key] ? parsed[key] + ", " + val : val;
        }
      });
      return parsed;
    };
    var $internals = Symbol("internals");
    function normalizeHeader(header) {
      return header && String(header).trim().toLowerCase();
    }
    function normalizeValue(value) {
      if (value === false || value == null) {
        return value;
      }
      return utils$1.isArray(value) ? value.map(normalizeValue) : String(value);
    }
    function parseTokens(str) {
      const tokens = /* @__PURE__ */ Object.create(null);
      const tokensRE = /([^\s,;=]+)\s*(?:=\s*([^,;]+))?/g;
      let match;
      while (match = tokensRE.exec(str)) {
        tokens[match[1]] = match[2];
      }
      return tokens;
    }
    var isValidHeaderName = (str) => /^[-_a-zA-Z0-9^`|~,!#$%&'*+.]+$/.test(str.trim());
    function matchHeaderValue(context, value, header, filter, isHeaderNameFilter) {
      if (utils$1.isFunction(filter)) {
        return filter.call(this, value, header);
      }
      if (isHeaderNameFilter) {
        value = header;
      }
      if (!utils$1.isString(value)) return;
      if (utils$1.isString(filter)) {
        return value.indexOf(filter) !== -1;
      }
      if (utils$1.isRegExp(filter)) {
        return filter.test(value);
      }
    }
    function formatHeader(header) {
      return header.trim().toLowerCase().replace(/([a-z\d])(\w*)/g, (w, char, str) => {
        return char.toUpperCase() + str;
      });
    }
    function buildAccessors(obj, header) {
      const accessorName = utils$1.toCamelCase(" " + header);
      ["get", "set", "has"].forEach((methodName) => {
        Object.defineProperty(obj, methodName + accessorName, {
          value: function(arg1, arg2, arg3) {
            return this[methodName].call(this, header, arg1, arg2, arg3);
          },
          configurable: true
        });
      });
    }
    var AxiosHeaders = class {
      constructor(headers) {
        headers && this.set(headers);
      }
      set(header, valueOrRewrite, rewrite) {
        const self2 = this;
        function setHeader(_value, _header, _rewrite) {
          const lHeader = normalizeHeader(_header);
          if (!lHeader) {
            throw new Error("header name must be a non-empty string");
          }
          const key = utils$1.findKey(self2, lHeader);
          if (!key || self2[key] === void 0 || _rewrite === true || _rewrite === void 0 && self2[key] !== false) {
            self2[key || _header] = normalizeValue(_value);
          }
        }
        const setHeaders = (headers, _rewrite) => utils$1.forEach(headers, (_value, _header) => setHeader(_value, _header, _rewrite));
        if (utils$1.isPlainObject(header) || header instanceof this.constructor) {
          setHeaders(header, valueOrRewrite);
        } else if (utils$1.isString(header) && (header = header.trim()) && !isValidHeaderName(header)) {
          setHeaders(parseHeaders(header), valueOrRewrite);
        } else if (utils$1.isHeaders(header)) {
          for (const [key, value] of header.entries()) {
            setHeader(value, key, rewrite);
          }
        } else {
          header != null && setHeader(valueOrRewrite, header, rewrite);
        }
        return this;
      }
      get(header, parser) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          if (key) {
            const value = this[key];
            if (!parser) {
              return value;
            }
            if (parser === true) {
              return parseTokens(value);
            }
            if (utils$1.isFunction(parser)) {
              return parser.call(this, value, key);
            }
            if (utils$1.isRegExp(parser)) {
              return parser.exec(value);
            }
            throw new TypeError("parser must be boolean|regexp|function");
          }
        }
      }
      has(header, matcher) {
        header = normalizeHeader(header);
        if (header) {
          const key = utils$1.findKey(this, header);
          return !!(key && this[key] !== void 0 && (!matcher || matchHeaderValue(this, this[key], key, matcher)));
        }
        return false;
      }
      delete(header, matcher) {
        const self2 = this;
        let deleted = false;
        function deleteHeader(_header) {
          _header = normalizeHeader(_header);
          if (_header) {
            const key = utils$1.findKey(self2, _header);
            if (key && (!matcher || matchHeaderValue(self2, self2[key], key, matcher))) {
              delete self2[key];
              deleted = true;
            }
          }
        }
        if (utils$1.isArray(header)) {
          header.forEach(deleteHeader);
        } else {
          deleteHeader(header);
        }
        return deleted;
      }
      clear(matcher) {
        const keys = Object.keys(this);
        let i = keys.length;
        let deleted = false;
        while (i--) {
          const key = keys[i];
          if (!matcher || matchHeaderValue(this, this[key], key, matcher, true)) {
            delete this[key];
            deleted = true;
          }
        }
        return deleted;
      }
      normalize(format) {
        const self2 = this;
        const headers = {};
        utils$1.forEach(this, (value, header) => {
          const key = utils$1.findKey(headers, header);
          if (key) {
            self2[key] = normalizeValue(value);
            delete self2[header];
            return;
          }
          const normalized = format ? formatHeader(header) : String(header).trim();
          if (normalized !== header) {
            delete self2[header];
          }
          self2[normalized] = normalizeValue(value);
          headers[normalized] = true;
        });
        return this;
      }
      concat(...targets) {
        return this.constructor.concat(this, ...targets);
      }
      toJSON(asStrings) {
        const obj = /* @__PURE__ */ Object.create(null);
        utils$1.forEach(this, (value, header) => {
          value != null && value !== false && (obj[header] = asStrings && utils$1.isArray(value) ? value.join(", ") : value);
        });
        return obj;
      }
      [Symbol.iterator]() {
        return Object.entries(this.toJSON())[Symbol.iterator]();
      }
      toString() {
        return Object.entries(this.toJSON()).map(([header, value]) => header + ": " + value).join("\n");
      }
      get [Symbol.toStringTag]() {
        return "AxiosHeaders";
      }
      static from(thing) {
        return thing instanceof this ? thing : new this(thing);
      }
      static concat(first, ...targets) {
        const computed = new this(first);
        targets.forEach((target) => computed.set(target));
        return computed;
      }
      static accessor(header) {
        const internals = this[$internals] = this[$internals] = {
          accessors: {}
        };
        const accessors = internals.accessors;
        const prototype2 = this.prototype;
        function defineAccessor(_header) {
          const lHeader = normalizeHeader(_header);
          if (!accessors[lHeader]) {
            buildAccessors(prototype2, _header);
            accessors[lHeader] = true;
          }
        }
        utils$1.isArray(header) ? header.forEach(defineAccessor) : defineAccessor(header);
        return this;
      }
    };
    AxiosHeaders.accessor(["Content-Type", "Content-Length", "Accept", "Accept-Encoding", "User-Agent", "Authorization"]);
    utils$1.reduceDescriptors(AxiosHeaders.prototype, ({ value }, key) => {
      let mapped = key[0].toUpperCase() + key.slice(1);
      return {
        get: () => value,
        set(headerValue) {
          this[mapped] = headerValue;
        }
      };
    });
    utils$1.freezeMethods(AxiosHeaders);
    var AxiosHeaders$1 = AxiosHeaders;
    function transformData(fns, response) {
      const config = this || defaults$1;
      const context = response || config;
      const headers = AxiosHeaders$1.from(context.headers);
      let data = context.data;
      utils$1.forEach(fns, function transform(fn) {
        data = fn.call(config, data, headers.normalize(), response ? response.status : void 0);
      });
      headers.normalize();
      return data;
    }
    function isCancel(value) {
      return !!(value && value.__CANCEL__);
    }
    function CanceledError(message, config, request) {
      AxiosError.call(this, message == null ? "canceled" : message, AxiosError.ERR_CANCELED, config, request);
      this.name = "CanceledError";
    }
    utils$1.inherits(CanceledError, AxiosError, {
      __CANCEL__: true
    });
    function settle(resolve, reject, response) {
      const validateStatus = response.config.validateStatus;
      if (!response.status || !validateStatus || validateStatus(response.status)) {
        resolve(response);
      } else {
        reject(new AxiosError(
          "Request failed with status code " + response.status,
          [AxiosError.ERR_BAD_REQUEST, AxiosError.ERR_BAD_RESPONSE][Math.floor(response.status / 100) - 4],
          response.config,
          response.request,
          response
        ));
      }
    }
    function parseProtocol(url) {
      const match = /^([-+\w]{1,25})(:?\/\/|:)/.exec(url);
      return match && match[1] || "";
    }
    function speedometer(samplesCount, min) {
      samplesCount = samplesCount || 10;
      const bytes = new Array(samplesCount);
      const timestamps = new Array(samplesCount);
      let head = 0;
      let tail = 0;
      let firstSampleTS;
      min = min !== void 0 ? min : 1e3;
      return function push2(chunkLength) {
        const now = Date.now();
        const startedAt = timestamps[tail];
        if (!firstSampleTS) {
          firstSampleTS = now;
        }
        bytes[head] = chunkLength;
        timestamps[head] = now;
        let i = tail;
        let bytesCount = 0;
        while (i !== head) {
          bytesCount += bytes[i++];
          i = i % samplesCount;
        }
        head = (head + 1) % samplesCount;
        if (head === tail) {
          tail = (tail + 1) % samplesCount;
        }
        if (now - firstSampleTS < min) {
          return;
        }
        const passed = startedAt && now - startedAt;
        return passed ? Math.round(bytesCount * 1e3 / passed) : void 0;
      };
    }
    function throttle(fn, freq) {
      let timestamp = 0;
      let threshold = 1e3 / freq;
      let lastArgs;
      let timer;
      const invoke = (args, now = Date.now()) => {
        timestamp = now;
        lastArgs = null;
        if (timer) {
          clearTimeout(timer);
          timer = null;
        }
        fn.apply(null, args);
      };
      const throttled = (...args) => {
        const now = Date.now();
        const passed = now - timestamp;
        if (passed >= threshold) {
          invoke(args, now);
        } else {
          lastArgs = args;
          if (!timer) {
            timer = setTimeout(() => {
              timer = null;
              invoke(lastArgs);
            }, threshold - passed);
          }
        }
      };
      const flush = () => lastArgs && invoke(lastArgs);
      return [throttled, flush];
    }
    var progressEventReducer = (listener, isDownloadStream, freq = 3) => {
      let bytesNotified = 0;
      const _speedometer = speedometer(50, 250);
      return throttle((e) => {
        const loaded = e.loaded;
        const total = e.lengthComputable ? e.total : void 0;
        const progressBytes = loaded - bytesNotified;
        const rate = _speedometer(progressBytes);
        const inRange = loaded <= total;
        bytesNotified = loaded;
        const data = {
          loaded,
          total,
          progress: total ? loaded / total : void 0,
          bytes: progressBytes,
          rate: rate ? rate : void 0,
          estimated: rate && total && inRange ? (total - loaded) / rate : void 0,
          event: e,
          lengthComputable: total != null,
          [isDownloadStream ? "download" : "upload"]: true
        };
        listener(data);
      }, freq);
    };
    var progressEventDecorator = (total, throttled) => {
      const lengthComputable = total != null;
      return [(loaded) => throttled[0]({
        lengthComputable,
        total,
        loaded
      }), throttled[1]];
    };
    var asyncDecorator = (fn) => (...args) => utils$1.asap(() => fn(...args));
    var isURLSameOrigin = platform.hasStandardBrowserEnv ? (
      // Standard browser envs have full support of the APIs needed to test
      // whether the request URL is of the same origin as current location.
      function standardBrowserEnv() {
        const msie = platform.navigator && /(msie|trident)/i.test(platform.navigator.userAgent);
        const urlParsingNode = document.createElement("a");
        let originURL;
        function resolveURL(url) {
          let href = url;
          if (msie) {
            urlParsingNode.setAttribute("href", href);
            href = urlParsingNode.href;
          }
          urlParsingNode.setAttribute("href", href);
          return {
            href: urlParsingNode.href,
            protocol: urlParsingNode.protocol ? urlParsingNode.protocol.replace(/:$/, "") : "",
            host: urlParsingNode.host,
            search: urlParsingNode.search ? urlParsingNode.search.replace(/^\?/, "") : "",
            hash: urlParsingNode.hash ? urlParsingNode.hash.replace(/^#/, "") : "",
            hostname: urlParsingNode.hostname,
            port: urlParsingNode.port,
            pathname: urlParsingNode.pathname.charAt(0) === "/" ? urlParsingNode.pathname : "/" + urlParsingNode.pathname
          };
        }
        originURL = resolveURL(window.location.href);
        return function isURLSameOrigin2(requestURL) {
          const parsed = utils$1.isString(requestURL) ? resolveURL(requestURL) : requestURL;
          return parsed.protocol === originURL.protocol && parsed.host === originURL.host;
        };
      }()
    ) : (
      // Non standard browser envs (web workers, react-native) lack needed support.
      /* @__PURE__ */ function nonStandardBrowserEnv() {
        return function isURLSameOrigin2() {
          return true;
        };
      }()
    );
    var cookies = platform.hasStandardBrowserEnv ? (
      // Standard browser envs support document.cookie
      {
        write(name, value, expires, path, domain, secure) {
          const cookie = [name + "=" + encodeURIComponent(value)];
          utils$1.isNumber(expires) && cookie.push("expires=" + new Date(expires).toGMTString());
          utils$1.isString(path) && cookie.push("path=" + path);
          utils$1.isString(domain) && cookie.push("domain=" + domain);
          secure === true && cookie.push("secure");
          document.cookie = cookie.join("; ");
        },
        read(name) {
          const match = document.cookie.match(new RegExp("(^|;\\s*)(" + name + ")=([^;]*)"));
          return match ? decodeURIComponent(match[3]) : null;
        },
        remove(name) {
          this.write(name, "", Date.now() - 864e5);
        }
      }
    ) : (
      // Non-standard browser env (web workers, react-native) lack needed support.
      {
        write() {
        },
        read() {
          return null;
        },
        remove() {
        }
      }
    );
    function isAbsoluteURL(url) {
      return /^([a-z][a-z\d+\-.]*:)?\/\//i.test(url);
    }
    function combineURLs(baseURL, relativeURL) {
      return relativeURL ? baseURL.replace(/\/?\/$/, "") + "/" + relativeURL.replace(/^\/+/, "") : baseURL;
    }
    function buildFullPath(baseURL, requestedURL) {
      if (baseURL && !isAbsoluteURL(requestedURL)) {
        return combineURLs(baseURL, requestedURL);
      }
      return requestedURL;
    }
    var headersToObject = (thing) => thing instanceof AxiosHeaders$1 ? { ...thing } : thing;
    function mergeConfig(config1, config2) {
      config2 = config2 || {};
      const config = {};
      function getMergedValue(target, source, caseless) {
        if (utils$1.isPlainObject(target) && utils$1.isPlainObject(source)) {
          return utils$1.merge.call({ caseless }, target, source);
        } else if (utils$1.isPlainObject(source)) {
          return utils$1.merge({}, source);
        } else if (utils$1.isArray(source)) {
          return source.slice();
        }
        return source;
      }
      function mergeDeepProperties(a, b, caseless) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(a, b, caseless);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a, caseless);
        }
      }
      function valueFromConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        }
      }
      function defaultToConfig2(a, b) {
        if (!utils$1.isUndefined(b)) {
          return getMergedValue(void 0, b);
        } else if (!utils$1.isUndefined(a)) {
          return getMergedValue(void 0, a);
        }
      }
      function mergeDirectKeys(a, b, prop) {
        if (prop in config2) {
          return getMergedValue(a, b);
        } else if (prop in config1) {
          return getMergedValue(void 0, a);
        }
      }
      const mergeMap = {
        url: valueFromConfig2,
        method: valueFromConfig2,
        data: valueFromConfig2,
        baseURL: defaultToConfig2,
        transformRequest: defaultToConfig2,
        transformResponse: defaultToConfig2,
        paramsSerializer: defaultToConfig2,
        timeout: defaultToConfig2,
        timeoutMessage: defaultToConfig2,
        withCredentials: defaultToConfig2,
        withXSRFToken: defaultToConfig2,
        adapter: defaultToConfig2,
        responseType: defaultToConfig2,
        xsrfCookieName: defaultToConfig2,
        xsrfHeaderName: defaultToConfig2,
        onUploadProgress: defaultToConfig2,
        onDownloadProgress: defaultToConfig2,
        decompress: defaultToConfig2,
        maxContentLength: defaultToConfig2,
        maxBodyLength: defaultToConfig2,
        beforeRedirect: defaultToConfig2,
        transport: defaultToConfig2,
        httpAgent: defaultToConfig2,
        httpsAgent: defaultToConfig2,
        cancelToken: defaultToConfig2,
        socketPath: defaultToConfig2,
        responseEncoding: defaultToConfig2,
        validateStatus: mergeDirectKeys,
        headers: (a, b) => mergeDeepProperties(headersToObject(a), headersToObject(b), true)
      };
      utils$1.forEach(Object.keys(Object.assign({}, config1, config2)), function computeConfigValue(prop) {
        const merge2 = mergeMap[prop] || mergeDeepProperties;
        const configValue = merge2(config1[prop], config2[prop], prop);
        utils$1.isUndefined(configValue) && merge2 !== mergeDirectKeys || (config[prop] = configValue);
      });
      return config;
    }
    var resolveConfig = (config) => {
      const newConfig = mergeConfig({}, config);
      let { data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth } = newConfig;
      newConfig.headers = headers = AxiosHeaders$1.from(headers);
      newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);
      if (auth) {
        headers.set(
          "Authorization",
          "Basic " + btoa((auth.username || "") + ":" + (auth.password ? unescape(encodeURIComponent(auth.password)) : ""))
        );
      }
      let contentType;
      if (utils$1.isFormData(data)) {
        if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {
          headers.setContentType(void 0);
        } else if ((contentType = headers.getContentType()) !== false) {
          const [type, ...tokens] = contentType ? contentType.split(";").map((token) => token.trim()).filter(Boolean) : [];
          headers.setContentType([type || "multipart/form-data", ...tokens].join("; "));
        }
      }
      if (platform.hasStandardBrowserEnv) {
        withXSRFToken && utils$1.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));
        if (withXSRFToken || withXSRFToken !== false && isURLSameOrigin(newConfig.url)) {
          const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);
          if (xsrfValue) {
            headers.set(xsrfHeaderName, xsrfValue);
          }
        }
      }
      return newConfig;
    };
    var isXHRAdapterSupported = typeof XMLHttpRequest !== "undefined";
    var xhrAdapter = isXHRAdapterSupported && function(config) {
      return new Promise(function dispatchXhrRequest(resolve, reject) {
        const _config = resolveConfig(config);
        let requestData = _config.data;
        const requestHeaders = AxiosHeaders$1.from(_config.headers).normalize();
        let { responseType, onUploadProgress, onDownloadProgress } = _config;
        let onCanceled;
        let uploadThrottled, downloadThrottled;
        let flushUpload, flushDownload;
        function done() {
          flushUpload && flushUpload();
          flushDownload && flushDownload();
          _config.cancelToken && _config.cancelToken.unsubscribe(onCanceled);
          _config.signal && _config.signal.removeEventListener("abort", onCanceled);
        }
        let request = new XMLHttpRequest();
        request.open(_config.method.toUpperCase(), _config.url, true);
        request.timeout = _config.timeout;
        function onloadend() {
          if (!request) {
            return;
          }
          const responseHeaders = AxiosHeaders$1.from(
            "getAllResponseHeaders" in request && request.getAllResponseHeaders()
          );
          const responseData = !responseType || responseType === "text" || responseType === "json" ? request.responseText : request.response;
          const response = {
            data: responseData,
            status: request.status,
            statusText: request.statusText,
            headers: responseHeaders,
            config,
            request
          };
          settle(function _resolve(value) {
            resolve(value);
            done();
          }, function _reject(err) {
            reject(err);
            done();
          }, response);
          request = null;
        }
        if ("onloadend" in request) {
          request.onloadend = onloadend;
        } else {
          request.onreadystatechange = function handleLoad() {
            if (!request || request.readyState !== 4) {
              return;
            }
            if (request.status === 0 && !(request.responseURL && request.responseURL.indexOf("file:") === 0)) {
              return;
            }
            setTimeout(onloadend);
          };
        }
        request.onabort = function handleAbort() {
          if (!request) {
            return;
          }
          reject(new AxiosError("Request aborted", AxiosError.ECONNABORTED, config, request));
          request = null;
        };
        request.onerror = function handleError() {
          reject(new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request));
          request = null;
        };
        request.ontimeout = function handleTimeout() {
          let timeoutErrorMessage = _config.timeout ? "timeout of " + _config.timeout + "ms exceeded" : "timeout exceeded";
          const transitional = _config.transitional || transitionalDefaults;
          if (_config.timeoutErrorMessage) {
            timeoutErrorMessage = _config.timeoutErrorMessage;
          }
          reject(new AxiosError(
            timeoutErrorMessage,
            transitional.clarifyTimeoutError ? AxiosError.ETIMEDOUT : AxiosError.ECONNABORTED,
            config,
            request
          ));
          request = null;
        };
        requestData === void 0 && requestHeaders.setContentType(null);
        if ("setRequestHeader" in request) {
          utils$1.forEach(requestHeaders.toJSON(), function setRequestHeader(val, key) {
            request.setRequestHeader(key, val);
          });
        }
        if (!utils$1.isUndefined(_config.withCredentials)) {
          request.withCredentials = !!_config.withCredentials;
        }
        if (responseType && responseType !== "json") {
          request.responseType = _config.responseType;
        }
        if (onDownloadProgress) {
          [downloadThrottled, flushDownload] = progressEventReducer(onDownloadProgress, true);
          request.addEventListener("progress", downloadThrottled);
        }
        if (onUploadProgress && request.upload) {
          [uploadThrottled, flushUpload] = progressEventReducer(onUploadProgress);
          request.upload.addEventListener("progress", uploadThrottled);
          request.upload.addEventListener("loadend", flushUpload);
        }
        if (_config.cancelToken || _config.signal) {
          onCanceled = (cancel) => {
            if (!request) {
              return;
            }
            reject(!cancel || cancel.type ? new CanceledError(null, config, request) : cancel);
            request.abort();
            request = null;
          };
          _config.cancelToken && _config.cancelToken.subscribe(onCanceled);
          if (_config.signal) {
            _config.signal.aborted ? onCanceled() : _config.signal.addEventListener("abort", onCanceled);
          }
        }
        const protocol = parseProtocol(_config.url);
        if (protocol && platform.protocols.indexOf(protocol) === -1) {
          reject(new AxiosError("Unsupported protocol " + protocol + ":", AxiosError.ERR_BAD_REQUEST, config));
          return;
        }
        request.send(requestData || null);
      });
    };
    var composeSignals = (signals, timeout) => {
      const { length } = signals = signals ? signals.filter(Boolean) : [];
      if (timeout || length) {
        let controller = new AbortController();
        let aborted;
        const onabort = function(reason) {
          if (!aborted) {
            aborted = true;
            unsubscribe();
            const err = reason instanceof Error ? reason : this.reason;
            controller.abort(err instanceof AxiosError ? err : new CanceledError(err instanceof Error ? err.message : err));
          }
        };
        let timer = timeout && setTimeout(() => {
          timer = null;
          onabort(new AxiosError(`timeout ${timeout} of ms exceeded`, AxiosError.ETIMEDOUT));
        }, timeout);
        const unsubscribe = () => {
          if (signals) {
            timer && clearTimeout(timer);
            timer = null;
            signals.forEach((signal2) => {
              signal2.unsubscribe ? signal2.unsubscribe(onabort) : signal2.removeEventListener("abort", onabort);
            });
            signals = null;
          }
        };
        signals.forEach((signal2) => signal2.addEventListener("abort", onabort));
        const { signal } = controller;
        signal.unsubscribe = () => utils$1.asap(unsubscribe);
        return signal;
      }
    };
    var composeSignals$1 = composeSignals;
    var streamChunk = function* (chunk, chunkSize) {
      let len = chunk.byteLength;
      if (!chunkSize || len < chunkSize) {
        yield chunk;
        return;
      }
      let pos = 0;
      let end;
      while (pos < len) {
        end = pos + chunkSize;
        yield chunk.slice(pos, end);
        pos = end;
      }
    };
    var readBytes = async function* (iterable, chunkSize) {
      for await (const chunk of readStream(iterable)) {
        yield* streamChunk(chunk, chunkSize);
      }
    };
    var readStream = async function* (stream) {
      if (stream[Symbol.asyncIterator]) {
        yield* stream;
        return;
      }
      const reader = stream.getReader();
      try {
        for (; ; ) {
          const { done, value } = await reader.read();
          if (done) {
            break;
          }
          yield value;
        }
      } finally {
        await reader.cancel();
      }
    };
    var trackStream = (stream, chunkSize, onProgress, onFinish) => {
      const iterator = readBytes(stream, chunkSize);
      let bytes = 0;
      let done;
      let _onFinish = (e) => {
        if (!done) {
          done = true;
          onFinish && onFinish(e);
        }
      };
      return new ReadableStream({
        async pull(controller) {
          try {
            const { done: done2, value } = await iterator.next();
            if (done2) {
              _onFinish();
              controller.close();
              return;
            }
            let len = value.byteLength;
            if (onProgress) {
              let loadedBytes = bytes += len;
              onProgress(loadedBytes);
            }
            controller.enqueue(new Uint8Array(value));
          } catch (err) {
            _onFinish(err);
            throw err;
          }
        },
        cancel(reason) {
          _onFinish(reason);
          return iterator.return();
        }
      }, {
        highWaterMark: 2
      });
    };
    var isFetchSupported = typeof fetch === "function" && typeof Request === "function" && typeof Response === "function";
    var isReadableStreamSupported = isFetchSupported && typeof ReadableStream === "function";
    var encodeText = isFetchSupported && (typeof TextEncoder === "function" ? /* @__PURE__ */ ((encoder) => (str) => encoder.encode(str))(new TextEncoder()) : async (str) => new Uint8Array(await new Response(str).arrayBuffer()));
    var test = (fn, ...args) => {
      try {
        return !!fn(...args);
      } catch (e) {
        return false;
      }
    };
    var supportsRequestStream = isReadableStreamSupported && test(() => {
      let duplexAccessed = false;
      const hasContentType = new Request(platform.origin, {
        body: new ReadableStream(),
        method: "POST",
        get duplex() {
          duplexAccessed = true;
          return "half";
        }
      }).headers.has("Content-Type");
      return duplexAccessed && !hasContentType;
    });
    var DEFAULT_CHUNK_SIZE = 64 * 1024;
    var supportsResponseStream = isReadableStreamSupported && test(() => utils$1.isReadableStream(new Response("").body));
    var resolvers = {
      stream: supportsResponseStream && ((res) => res.body)
    };
    isFetchSupported && ((res) => {
      ["text", "arrayBuffer", "blob", "formData", "stream"].forEach((type) => {
        !resolvers[type] && (resolvers[type] = utils$1.isFunction(res[type]) ? (res2) => res2[type]() : (_, config) => {
          throw new AxiosError(`Response type '${type}' is not supported`, AxiosError.ERR_NOT_SUPPORT, config);
        });
      });
    })(new Response());
    var getBodyLength = async (body) => {
      if (body == null) {
        return 0;
      }
      if (utils$1.isBlob(body)) {
        return body.size;
      }
      if (utils$1.isSpecCompliantForm(body)) {
        const _request = new Request(platform.origin, {
          method: "POST",
          body
        });
        return (await _request.arrayBuffer()).byteLength;
      }
      if (utils$1.isArrayBufferView(body) || utils$1.isArrayBuffer(body)) {
        return body.byteLength;
      }
      if (utils$1.isURLSearchParams(body)) {
        body = body + "";
      }
      if (utils$1.isString(body)) {
        return (await encodeText(body)).byteLength;
      }
    };
    var resolveBodyLength = async (headers, body) => {
      const length = utils$1.toFiniteNumber(headers.getContentLength());
      return length == null ? getBodyLength(body) : length;
    };
    var fetchAdapter = isFetchSupported && (async (config) => {
      let {
        url,
        method,
        data,
        signal,
        cancelToken,
        timeout,
        onDownloadProgress,
        onUploadProgress,
        responseType,
        headers,
        withCredentials = "same-origin",
        fetchOptions
      } = resolveConfig(config);
      responseType = responseType ? (responseType + "").toLowerCase() : "text";
      let composedSignal = composeSignals$1([signal, cancelToken && cancelToken.toAbortSignal()], timeout);
      let request;
      const unsubscribe = composedSignal && composedSignal.unsubscribe && (() => {
        composedSignal.unsubscribe();
      });
      let requestContentLength;
      try {
        if (onUploadProgress && supportsRequestStream && method !== "get" && method !== "head" && (requestContentLength = await resolveBodyLength(headers, data)) !== 0) {
          let _request = new Request(url, {
            method: "POST",
            body: data,
            duplex: "half"
          });
          let contentTypeHeader;
          if (utils$1.isFormData(data) && (contentTypeHeader = _request.headers.get("content-type"))) {
            headers.setContentType(contentTypeHeader);
          }
          if (_request.body) {
            const [onProgress, flush] = progressEventDecorator(
              requestContentLength,
              progressEventReducer(asyncDecorator(onUploadProgress))
            );
            data = trackStream(_request.body, DEFAULT_CHUNK_SIZE, onProgress, flush);
          }
        }
        if (!utils$1.isString(withCredentials)) {
          withCredentials = withCredentials ? "include" : "omit";
        }
        const isCredentialsSupported = "credentials" in Request.prototype;
        request = new Request(url, {
          ...fetchOptions,
          signal: composedSignal,
          method: method.toUpperCase(),
          headers: headers.normalize().toJSON(),
          body: data,
          duplex: "half",
          credentials: isCredentialsSupported ? withCredentials : void 0
        });
        let response = await fetch(request);
        const isStreamResponse = supportsResponseStream && (responseType === "stream" || responseType === "response");
        if (supportsResponseStream && (onDownloadProgress || isStreamResponse && unsubscribe)) {
          const options = {};
          ["status", "statusText", "headers"].forEach((prop) => {
            options[prop] = response[prop];
          });
          const responseContentLength = utils$1.toFiniteNumber(response.headers.get("content-length"));
          const [onProgress, flush] = onDownloadProgress && progressEventDecorator(
            responseContentLength,
            progressEventReducer(asyncDecorator(onDownloadProgress), true)
          ) || [];
          response = new Response(
            trackStream(response.body, DEFAULT_CHUNK_SIZE, onProgress, () => {
              flush && flush();
              unsubscribe && unsubscribe();
            }),
            options
          );
        }
        responseType = responseType || "text";
        let responseData = await resolvers[utils$1.findKey(resolvers, responseType) || "text"](response, config);
        !isStreamResponse && unsubscribe && unsubscribe();
        return await new Promise((resolve, reject) => {
          settle(resolve, reject, {
            data: responseData,
            headers: AxiosHeaders$1.from(response.headers),
            status: response.status,
            statusText: response.statusText,
            config,
            request
          });
        });
      } catch (err) {
        unsubscribe && unsubscribe();
        if (err && err.name === "TypeError" && /fetch/i.test(err.message)) {
          throw Object.assign(
            new AxiosError("Network Error", AxiosError.ERR_NETWORK, config, request),
            {
              cause: err.cause || err
            }
          );
        }
        throw AxiosError.from(err, err && err.code, config, request);
      }
    });
    var knownAdapters = {
      http: httpAdapter,
      xhr: xhrAdapter,
      fetch: fetchAdapter
    };
    utils$1.forEach(knownAdapters, (fn, value) => {
      if (fn) {
        try {
          Object.defineProperty(fn, "name", { value });
        } catch (e) {
        }
        Object.defineProperty(fn, "adapterName", { value });
      }
    });
    var renderReason = (reason) => `- ${reason}`;
    var isResolvedHandle = (adapter) => utils$1.isFunction(adapter) || adapter === null || adapter === false;
    var adapters = {
      getAdapter: (adapters2) => {
        adapters2 = utils$1.isArray(adapters2) ? adapters2 : [adapters2];
        const { length } = adapters2;
        let nameOrAdapter;
        let adapter;
        const rejectedReasons = {};
        for (let i = 0; i < length; i++) {
          nameOrAdapter = adapters2[i];
          let id;
          adapter = nameOrAdapter;
          if (!isResolvedHandle(nameOrAdapter)) {
            adapter = knownAdapters[(id = String(nameOrAdapter)).toLowerCase()];
            if (adapter === void 0) {
              throw new AxiosError(`Unknown adapter '${id}'`);
            }
          }
          if (adapter) {
            break;
          }
          rejectedReasons[id || "#" + i] = adapter;
        }
        if (!adapter) {
          const reasons = Object.entries(rejectedReasons).map(
            ([id, state]) => `adapter ${id} ` + (state === false ? "is not supported by the environment" : "is not available in the build")
          );
          let s = length ? reasons.length > 1 ? "since :\n" + reasons.map(renderReason).join("\n") : " " + renderReason(reasons[0]) : "as no adapter specified";
          throw new AxiosError(
            `There is no suitable adapter to dispatch the request ` + s,
            "ERR_NOT_SUPPORT"
          );
        }
        return adapter;
      },
      adapters: knownAdapters
    };
    function throwIfCancellationRequested(config) {
      if (config.cancelToken) {
        config.cancelToken.throwIfRequested();
      }
      if (config.signal && config.signal.aborted) {
        throw new CanceledError(null, config);
      }
    }
    function dispatchRequest(config) {
      throwIfCancellationRequested(config);
      config.headers = AxiosHeaders$1.from(config.headers);
      config.data = transformData.call(
        config,
        config.transformRequest
      );
      if (["post", "put", "patch"].indexOf(config.method) !== -1) {
        config.headers.setContentType("application/x-www-form-urlencoded", false);
      }
      const adapter = adapters.getAdapter(config.adapter || defaults$1.adapter);
      return adapter(config).then(function onAdapterResolution(response) {
        throwIfCancellationRequested(config);
        response.data = transformData.call(
          config,
          config.transformResponse,
          response
        );
        response.headers = AxiosHeaders$1.from(response.headers);
        return response;
      }, function onAdapterRejection(reason) {
        if (!isCancel(reason)) {
          throwIfCancellationRequested(config);
          if (reason && reason.response) {
            reason.response.data = transformData.call(
              config,
              config.transformResponse,
              reason.response
            );
            reason.response.headers = AxiosHeaders$1.from(reason.response.headers);
          }
        }
        return Promise.reject(reason);
      });
    }
    var VERSION = "1.7.7";
    var validators$1 = {};
    ["object", "boolean", "number", "function", "string", "symbol"].forEach((type, i) => {
      validators$1[type] = function validator2(thing) {
        return typeof thing === type || "a" + (i < 1 ? "n " : " ") + type;
      };
    });
    var deprecatedWarnings = {};
    validators$1.transitional = function transitional(validator2, version, message) {
      function formatMessage(opt, desc) {
        return "[Axios v" + VERSION + "] Transitional option '" + opt + "'" + desc + (message ? ". " + message : "");
      }
      return (value, opt, opts) => {
        if (validator2 === false) {
          throw new AxiosError(
            formatMessage(opt, " has been removed" + (version ? " in " + version : "")),
            AxiosError.ERR_DEPRECATED
          );
        }
        if (version && !deprecatedWarnings[opt]) {
          deprecatedWarnings[opt] = true;
          console.warn(
            formatMessage(
              opt,
              " has been deprecated since v" + version + " and will be removed in the near future"
            )
          );
        }
        return validator2 ? validator2(value, opt, opts) : true;
      };
    };
    function assertOptions(options, schema, allowUnknown) {
      if (typeof options !== "object") {
        throw new AxiosError("options must be an object", AxiosError.ERR_BAD_OPTION_VALUE);
      }
      const keys = Object.keys(options);
      let i = keys.length;
      while (i-- > 0) {
        const opt = keys[i];
        const validator2 = schema[opt];
        if (validator2) {
          const value = options[opt];
          const result = value === void 0 || validator2(value, opt, options);
          if (result !== true) {
            throw new AxiosError("option " + opt + " must be " + result, AxiosError.ERR_BAD_OPTION_VALUE);
          }
          continue;
        }
        if (allowUnknown !== true) {
          throw new AxiosError("Unknown option " + opt, AxiosError.ERR_BAD_OPTION);
        }
      }
    }
    var validator = {
      assertOptions,
      validators: validators$1
    };
    var validators = validator.validators;
    var Axios = class {
      constructor(instanceConfig) {
        this.defaults = instanceConfig;
        this.interceptors = {
          request: new InterceptorManager$1(),
          response: new InterceptorManager$1()
        };
      }
      /**
       * Dispatch a request
       *
       * @param {String|Object} configOrUrl The config specific for this request (merged with this.defaults)
       * @param {?Object} config
       *
       * @returns {Promise} The Promise to be fulfilled
       */
      async request(configOrUrl, config) {
        try {
          return await this._request(configOrUrl, config);
        } catch (err) {
          if (err instanceof Error) {
            let dummy;
            Error.captureStackTrace ? Error.captureStackTrace(dummy = {}) : dummy = new Error();
            const stack = dummy.stack ? dummy.stack.replace(/^.+\n/, "") : "";
            try {
              if (!err.stack) {
                err.stack = stack;
              } else if (stack && !String(err.stack).endsWith(stack.replace(/^.+\n.+\n/, ""))) {
                err.stack += "\n" + stack;
              }
            } catch (e) {
            }
          }
          throw err;
        }
      }
      _request(configOrUrl, config) {
        if (typeof configOrUrl === "string") {
          config = config || {};
          config.url = configOrUrl;
        } else {
          config = configOrUrl || {};
        }
        config = mergeConfig(this.defaults, config);
        const { transitional, paramsSerializer, headers } = config;
        if (transitional !== void 0) {
          validator.assertOptions(transitional, {
            silentJSONParsing: validators.transitional(validators.boolean),
            forcedJSONParsing: validators.transitional(validators.boolean),
            clarifyTimeoutError: validators.transitional(validators.boolean)
          }, false);
        }
        if (paramsSerializer != null) {
          if (utils$1.isFunction(paramsSerializer)) {
            config.paramsSerializer = {
              serialize: paramsSerializer
            };
          } else {
            validator.assertOptions(paramsSerializer, {
              encode: validators.function,
              serialize: validators.function
            }, true);
          }
        }
        config.method = (config.method || this.defaults.method || "get").toLowerCase();
        let contextHeaders = headers && utils$1.merge(
          headers.common,
          headers[config.method]
        );
        headers && utils$1.forEach(
          ["delete", "get", "head", "post", "put", "patch", "common"],
          (method) => {
            delete headers[method];
          }
        );
        config.headers = AxiosHeaders$1.concat(contextHeaders, headers);
        const requestInterceptorChain = [];
        let synchronousRequestInterceptors = true;
        this.interceptors.request.forEach(function unshiftRequestInterceptors(interceptor) {
          if (typeof interceptor.runWhen === "function" && interceptor.runWhen(config) === false) {
            return;
          }
          synchronousRequestInterceptors = synchronousRequestInterceptors && interceptor.synchronous;
          requestInterceptorChain.unshift(interceptor.fulfilled, interceptor.rejected);
        });
        const responseInterceptorChain = [];
        this.interceptors.response.forEach(function pushResponseInterceptors(interceptor) {
          responseInterceptorChain.push(interceptor.fulfilled, interceptor.rejected);
        });
        let promise;
        let i = 0;
        let len;
        if (!synchronousRequestInterceptors) {
          const chain = [dispatchRequest.bind(this), void 0];
          chain.unshift.apply(chain, requestInterceptorChain);
          chain.push.apply(chain, responseInterceptorChain);
          len = chain.length;
          promise = Promise.resolve(config);
          while (i < len) {
            promise = promise.then(chain[i++], chain[i++]);
          }
          return promise;
        }
        len = requestInterceptorChain.length;
        let newConfig = config;
        i = 0;
        while (i < len) {
          const onFulfilled = requestInterceptorChain[i++];
          const onRejected = requestInterceptorChain[i++];
          try {
            newConfig = onFulfilled(newConfig);
          } catch (error) {
            onRejected.call(this, error);
            break;
          }
        }
        try {
          promise = dispatchRequest.call(this, newConfig);
        } catch (error) {
          return Promise.reject(error);
        }
        i = 0;
        len = responseInterceptorChain.length;
        while (i < len) {
          promise = promise.then(responseInterceptorChain[i++], responseInterceptorChain[i++]);
        }
        return promise;
      }
      getUri(config) {
        config = mergeConfig(this.defaults, config);
        const fullPath = buildFullPath(config.baseURL, config.url);
        return buildURL(fullPath, config.params, config.paramsSerializer);
      }
    };
    utils$1.forEach(["delete", "get", "head", "options"], function forEachMethodNoData(method) {
      Axios.prototype[method] = function(url, config) {
        return this.request(mergeConfig(config || {}, {
          method,
          url,
          data: (config || {}).data
        }));
      };
    });
    utils$1.forEach(["post", "put", "patch"], function forEachMethodWithData(method) {
      function generateHTTPMethod(isForm) {
        return function httpMethod(url, data, config) {
          return this.request(mergeConfig(config || {}, {
            method,
            headers: isForm ? {
              "Content-Type": "multipart/form-data"
            } : {},
            url,
            data
          }));
        };
      }
      Axios.prototype[method] = generateHTTPMethod();
      Axios.prototype[method + "Form"] = generateHTTPMethod(true);
    });
    var Axios$1 = Axios;
    var CancelToken = class _CancelToken {
      constructor(executor) {
        if (typeof executor !== "function") {
          throw new TypeError("executor must be a function.");
        }
        let resolvePromise;
        this.promise = new Promise(function promiseExecutor(resolve) {
          resolvePromise = resolve;
        });
        const token = this;
        this.promise.then((cancel) => {
          if (!token._listeners) return;
          let i = token._listeners.length;
          while (i-- > 0) {
            token._listeners[i](cancel);
          }
          token._listeners = null;
        });
        this.promise.then = (onfulfilled) => {
          let _resolve;
          const promise = new Promise((resolve) => {
            token.subscribe(resolve);
            _resolve = resolve;
          }).then(onfulfilled);
          promise.cancel = function reject() {
            token.unsubscribe(_resolve);
          };
          return promise;
        };
        executor(function cancel(message, config, request) {
          if (token.reason) {
            return;
          }
          token.reason = new CanceledError(message, config, request);
          resolvePromise(token.reason);
        });
      }
      /**
       * Throws a `CanceledError` if cancellation has been requested.
       */
      throwIfRequested() {
        if (this.reason) {
          throw this.reason;
        }
      }
      /**
       * Subscribe to the cancel signal
       */
      subscribe(listener) {
        if (this.reason) {
          listener(this.reason);
          return;
        }
        if (this._listeners) {
          this._listeners.push(listener);
        } else {
          this._listeners = [listener];
        }
      }
      /**
       * Unsubscribe from the cancel signal
       */
      unsubscribe(listener) {
        if (!this._listeners) {
          return;
        }
        const index2 = this._listeners.indexOf(listener);
        if (index2 !== -1) {
          this._listeners.splice(index2, 1);
        }
      }
      toAbortSignal() {
        const controller = new AbortController();
        const abort = (err) => {
          controller.abort(err);
        };
        this.subscribe(abort);
        controller.signal.unsubscribe = () => this.unsubscribe(abort);
        return controller.signal;
      }
      /**
       * Returns an object that contains a new `CancelToken` and a function that, when called,
       * cancels the `CancelToken`.
       */
      static source() {
        let cancel;
        const token = new _CancelToken(function executor(c) {
          cancel = c;
        });
        return {
          token,
          cancel
        };
      }
    };
    var CancelToken$1 = CancelToken;
    function spread(callback) {
      return function wrap(arr) {
        return callback.apply(null, arr);
      };
    }
    function isAxiosError(payload) {
      return utils$1.isObject(payload) && payload.isAxiosError === true;
    }
    var HttpStatusCode = {
      Continue: 100,
      SwitchingProtocols: 101,
      Processing: 102,
      EarlyHints: 103,
      Ok: 200,
      Created: 201,
      Accepted: 202,
      NonAuthoritativeInformation: 203,
      NoContent: 204,
      ResetContent: 205,
      PartialContent: 206,
      MultiStatus: 207,
      AlreadyReported: 208,
      ImUsed: 226,
      MultipleChoices: 300,
      MovedPermanently: 301,
      Found: 302,
      SeeOther: 303,
      NotModified: 304,
      UseProxy: 305,
      Unused: 306,
      TemporaryRedirect: 307,
      PermanentRedirect: 308,
      BadRequest: 400,
      Unauthorized: 401,
      PaymentRequired: 402,
      Forbidden: 403,
      NotFound: 404,
      MethodNotAllowed: 405,
      NotAcceptable: 406,
      ProxyAuthenticationRequired: 407,
      RequestTimeout: 408,
      Conflict: 409,
      Gone: 410,
      LengthRequired: 411,
      PreconditionFailed: 412,
      PayloadTooLarge: 413,
      UriTooLong: 414,
      UnsupportedMediaType: 415,
      RangeNotSatisfiable: 416,
      ExpectationFailed: 417,
      ImATeapot: 418,
      MisdirectedRequest: 421,
      UnprocessableEntity: 422,
      Locked: 423,
      FailedDependency: 424,
      TooEarly: 425,
      UpgradeRequired: 426,
      PreconditionRequired: 428,
      TooManyRequests: 429,
      RequestHeaderFieldsTooLarge: 431,
      UnavailableForLegalReasons: 451,
      InternalServerError: 500,
      NotImplemented: 501,
      BadGateway: 502,
      ServiceUnavailable: 503,
      GatewayTimeout: 504,
      HttpVersionNotSupported: 505,
      VariantAlsoNegotiates: 506,
      InsufficientStorage: 507,
      LoopDetected: 508,
      NotExtended: 510,
      NetworkAuthenticationRequired: 511
    };
    Object.entries(HttpStatusCode).forEach(([key, value]) => {
      HttpStatusCode[value] = key;
    });
    var HttpStatusCode$1 = HttpStatusCode;
    function createInstance(defaultConfig) {
      const context = new Axios$1(defaultConfig);
      const instance = bind(Axios$1.prototype.request, context);
      utils$1.extend(instance, Axios$1.prototype, context, { allOwnKeys: true });
      utils$1.extend(instance, context, null, { allOwnKeys: true });
      instance.create = function create(instanceConfig) {
        return createInstance(mergeConfig(defaultConfig, instanceConfig));
      };
      return instance;
    }
    var axios = createInstance(defaults$1);
    axios.Axios = Axios$1;
    axios.CanceledError = CanceledError;
    axios.CancelToken = CancelToken$1;
    axios.isCancel = isCancel;
    axios.VERSION = VERSION;
    axios.toFormData = toFormData;
    axios.AxiosError = AxiosError;
    axios.Cancel = axios.CanceledError;
    axios.all = function all(promises) {
      return Promise.all(promises);
    };
    axios.spread = spread;
    axios.isAxiosError = isAxiosError;
    axios.mergeConfig = mergeConfig;
    axios.AxiosHeaders = AxiosHeaders$1;
    axios.formToJSON = (thing) => formDataToJSON(utils$1.isHTMLForm(thing) ? new FormData(thing) : thing);
    axios.getAdapter = adapters.getAdapter;
    axios.HttpStatusCode = HttpStatusCode$1;
    axios.default = axios;
    module.exports = axios;
  }
});

// ../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/config/index.js
var require_config = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/config/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CONFIG_INJECT_KEY = void 0;
    var CONFIG_INJECT_KEY = Symbol("CONFIG_INJECT_KEY");
    exports.CONFIG_INJECT_KEY = CONFIG_INJECT_KEY;
  }
});

// ../../node_modules/.pnpm/is-retry-allowed@2.2.0/node_modules/is-retry-allowed/index.js
var require_is_retry_allowed = __commonJS({
  "../../node_modules/.pnpm/is-retry-allowed@2.2.0/node_modules/is-retry-allowed/index.js"(exports, module) {
    "use strict";
    var denyList = /* @__PURE__ */ new Set([
      "ENOTFOUND",
      "ENETUNREACH",
      // SSL errors from https://github.com/nodejs/node/blob/fc8e3e2cdc521978351de257030db0076d79e0ab/src/crypto/crypto_common.cc#L301-L328
      "UNABLE_TO_GET_ISSUER_CERT",
      "UNABLE_TO_GET_CRL",
      "UNABLE_TO_DECRYPT_CERT_SIGNATURE",
      "UNABLE_TO_DECRYPT_CRL_SIGNATURE",
      "UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY",
      "CERT_SIGNATURE_FAILURE",
      "CRL_SIGNATURE_FAILURE",
      "CERT_NOT_YET_VALID",
      "CERT_HAS_EXPIRED",
      "CRL_NOT_YET_VALID",
      "CRL_HAS_EXPIRED",
      "ERROR_IN_CERT_NOT_BEFORE_FIELD",
      "ERROR_IN_CERT_NOT_AFTER_FIELD",
      "ERROR_IN_CRL_LAST_UPDATE_FIELD",
      "ERROR_IN_CRL_NEXT_UPDATE_FIELD",
      "OUT_OF_MEM",
      "DEPTH_ZERO_SELF_SIGNED_CERT",
      "SELF_SIGNED_CERT_IN_CHAIN",
      "UNABLE_TO_GET_ISSUER_CERT_LOCALLY",
      "UNABLE_TO_VERIFY_LEAF_SIGNATURE",
      "CERT_CHAIN_TOO_LONG",
      "CERT_REVOKED",
      "INVALID_CA",
      "PATH_LENGTH_EXCEEDED",
      "INVALID_PURPOSE",
      "CERT_UNTRUSTED",
      "CERT_REJECTED",
      "HOSTNAME_MISMATCH"
    ]);
    module.exports = (error) => !denyList.has(error && error.code);
  }
});

// ../../node_modules/.pnpm/axios-retry@4.5.0_axios@1.7.7/node_modules/axios-retry/dist/cjs/index.js
var require_cjs5 = __commonJS({
  "../../node_modules/.pnpm/axios-retry@4.5.0_axios@1.7.7/node_modules/axios-retry/dist/cjs/index.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DEFAULT_OPTIONS = exports.linearDelay = exports.exponentialDelay = exports.retryAfter = exports.isNetworkOrIdempotentRequestError = exports.isIdempotentRequestError = exports.isSafeRequestError = exports.isRetryableError = exports.isNetworkError = exports.namespace = void 0;
    var is_retry_allowed_1 = __importDefault(require_is_retry_allowed());
    exports.namespace = "axios-retry";
    function isNetworkError(error) {
      const CODE_EXCLUDE_LIST = ["ERR_CANCELED", "ECONNABORTED"];
      if (error.response) {
        return false;
      }
      if (!error.code) {
        return false;
      }
      if (CODE_EXCLUDE_LIST.includes(error.code)) {
        return false;
      }
      return (0, is_retry_allowed_1.default)(error);
    }
    exports.isNetworkError = isNetworkError;
    var SAFE_HTTP_METHODS = ["get", "head", "options"];
    var IDEMPOTENT_HTTP_METHODS = SAFE_HTTP_METHODS.concat(["put", "delete"]);
    function isRetryableError(error) {
      return error.code !== "ECONNABORTED" && (!error.response || error.response.status === 429 || error.response.status >= 500 && error.response.status <= 599);
    }
    exports.isRetryableError = isRetryableError;
    function isSafeRequestError(error) {
      var _a;
      if (!((_a = error.config) === null || _a === void 0 ? void 0 : _a.method)) {
        return false;
      }
      return isRetryableError(error) && SAFE_HTTP_METHODS.indexOf(error.config.method) !== -1;
    }
    exports.isSafeRequestError = isSafeRequestError;
    function isIdempotentRequestError(error) {
      var _a;
      if (!((_a = error.config) === null || _a === void 0 ? void 0 : _a.method)) {
        return false;
      }
      return isRetryableError(error) && IDEMPOTENT_HTTP_METHODS.indexOf(error.config.method) !== -1;
    }
    exports.isIdempotentRequestError = isIdempotentRequestError;
    function isNetworkOrIdempotentRequestError(error) {
      return isNetworkError(error) || isIdempotentRequestError(error);
    }
    exports.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
    function retryAfter(error = void 0) {
      var _a;
      const retryAfterHeader = (_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.headers["retry-after"];
      if (!retryAfterHeader) {
        return 0;
      }
      let retryAfterMs = (Number(retryAfterHeader) || 0) * 1e3;
      if (retryAfterMs === 0) {
        retryAfterMs = (new Date(retryAfterHeader).valueOf() || 0) - Date.now();
      }
      return Math.max(0, retryAfterMs);
    }
    exports.retryAfter = retryAfter;
    function noDelay(_retryNumber = 0, error = void 0) {
      return Math.max(0, retryAfter(error));
    }
    function exponentialDelay(retryNumber = 0, error = void 0, delayFactor = 100) {
      const calculatedDelay = Math.pow(2, retryNumber) * delayFactor;
      const delay = Math.max(calculatedDelay, retryAfter(error));
      const randomSum = delay * 0.2 * Math.random();
      return delay + randomSum;
    }
    exports.exponentialDelay = exponentialDelay;
    function linearDelay(delayFactor = 100) {
      return (retryNumber = 0, error = void 0) => {
        const delay = retryNumber * delayFactor;
        return Math.max(delay, retryAfter(error));
      };
    }
    exports.linearDelay = linearDelay;
    exports.DEFAULT_OPTIONS = {
      retries: 3,
      retryCondition: isNetworkOrIdempotentRequestError,
      retryDelay: noDelay,
      shouldResetTimeout: false,
      onRetry: () => {
      },
      onMaxRetryTimesExceeded: () => {
      },
      validateResponse: null
    };
    function getRequestOptions(config, defaultOptions) {
      return Object.assign(Object.assign(Object.assign({}, exports.DEFAULT_OPTIONS), defaultOptions), config[exports.namespace]);
    }
    function setCurrentState(config, defaultOptions, resetLastRequestTime = false) {
      const currentState = getRequestOptions(config, defaultOptions || {});
      currentState.retryCount = currentState.retryCount || 0;
      if (!currentState.lastRequestTime || resetLastRequestTime) {
        currentState.lastRequestTime = Date.now();
      }
      config[exports.namespace] = currentState;
      return currentState;
    }
    function fixConfig(axiosInstance, config) {
      if (axiosInstance.defaults.agent === config.agent) {
        delete config.agent;
      }
      if (axiosInstance.defaults.httpAgent === config.httpAgent) {
        delete config.httpAgent;
      }
      if (axiosInstance.defaults.httpsAgent === config.httpsAgent) {
        delete config.httpsAgent;
      }
    }
    function shouldRetry(currentState, error) {
      return __awaiter(this, void 0, void 0, function* () {
        const { retries, retryCondition } = currentState;
        const shouldRetryOrPromise = (currentState.retryCount || 0) < retries && retryCondition(error);
        if (typeof shouldRetryOrPromise === "object") {
          try {
            const shouldRetryPromiseResult = yield shouldRetryOrPromise;
            return shouldRetryPromiseResult !== false;
          } catch (_err) {
            return false;
          }
        }
        return shouldRetryOrPromise;
      });
    }
    function handleRetry(axiosInstance, currentState, error, config) {
      var _a;
      return __awaiter(this, void 0, void 0, function* () {
        currentState.retryCount += 1;
        const { retryDelay, shouldResetTimeout, onRetry } = currentState;
        const delay = retryDelay(currentState.retryCount, error);
        fixConfig(axiosInstance, config);
        if (!shouldResetTimeout && config.timeout && currentState.lastRequestTime) {
          const lastRequestDuration = Date.now() - currentState.lastRequestTime;
          const timeout = config.timeout - lastRequestDuration - delay;
          if (timeout <= 0) {
            return Promise.reject(error);
          }
          config.timeout = timeout;
        }
        config.transformRequest = [(data) => data];
        yield onRetry(currentState.retryCount, error, config);
        if ((_a = config.signal) === null || _a === void 0 ? void 0 : _a.aborted) {
          return Promise.resolve(axiosInstance(config));
        }
        return new Promise((resolve) => {
          var _a2;
          const abortListener = () => {
            clearTimeout(timeout);
            resolve(axiosInstance(config));
          };
          const timeout = setTimeout(() => {
            var _a3;
            resolve(axiosInstance(config));
            if ((_a3 = config.signal) === null || _a3 === void 0 ? void 0 : _a3.removeEventListener) {
              config.signal.removeEventListener("abort", abortListener);
            }
          }, delay);
          if ((_a2 = config.signal) === null || _a2 === void 0 ? void 0 : _a2.addEventListener) {
            config.signal.addEventListener("abort", abortListener, { once: true });
          }
        });
      });
    }
    function handleMaxRetryTimesExceeded(currentState, error) {
      return __awaiter(this, void 0, void 0, function* () {
        if (currentState.retryCount >= currentState.retries)
          yield currentState.onMaxRetryTimesExceeded(error, currentState.retryCount);
      });
    }
    var axiosRetry = (axiosInstance, defaultOptions) => {
      const requestInterceptorId = axiosInstance.interceptors.request.use((config) => {
        var _a;
        setCurrentState(config, defaultOptions, true);
        if ((_a = config[exports.namespace]) === null || _a === void 0 ? void 0 : _a.validateResponse) {
          config.validateStatus = () => false;
        }
        return config;
      });
      const responseInterceptorId = axiosInstance.interceptors.response.use(null, (error) => __awaiter(void 0, void 0, void 0, function* () {
        var _a;
        const { config } = error;
        if (!config) {
          return Promise.reject(error);
        }
        const currentState = setCurrentState(config, defaultOptions);
        if (error.response && ((_a = currentState.validateResponse) === null || _a === void 0 ? void 0 : _a.call(currentState, error.response))) {
          return error.response;
        }
        if (yield shouldRetry(currentState, error)) {
          return handleRetry(axiosInstance, currentState, error, config);
        }
        yield handleMaxRetryTimesExceeded(currentState, error);
        return Promise.reject(error);
      }));
      return { requestInterceptorId, responseInterceptorId };
    };
    axiosRetry.isNetworkError = isNetworkError;
    axiosRetry.isSafeRequestError = isSafeRequestError;
    axiosRetry.isIdempotentRequestError = isIdempotentRequestError;
    axiosRetry.isNetworkOrIdempotentRequestError = isNetworkOrIdempotentRequestError;
    axiosRetry.exponentialDelay = exponentialDelay;
    axiosRetry.linearDelay = linearDelay;
    axiosRetry.isRetryableError = isRetryableError;
    exports.default = axiosRetry;
  }
});

// ../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/utils/Logger.service.js
var require_Logger_service = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/utils/Logger.service.js"(exports) {
    "use strict";
    var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function(k, v) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = exports && exports.__param || function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.LoggerService = void 0;
    var inversify_1 = require_cjs4();
    var config_1 = require_config();
    var logLevelOrder = {
      debug: 0,
      info: 1,
      log: 2,
      warn: 3,
      error: 4
    };
    var LoggerService = (
      /** @class */
      function() {
        function LoggerService2(options) {
          var _a, _b;
          this.options = options;
          this.logLevel = (_a = options.logLevel) !== null && _a !== void 0 ? _a : "log";
          this.logger = (_b = options.logger) !== null && _b !== void 0 ? _b : console;
        }
        LoggerService2.prototype.debug = function() {
          var _a;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          if (logLevelOrder[this.logLevel] <= logLevelOrder.debug) {
            (_a = this.logger).debug.apply(_a, args);
          }
        };
        LoggerService2.prototype.info = function() {
          var _a;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          if (logLevelOrder[this.logLevel] <= logLevelOrder.info) {
            (_a = this.logger).info.apply(_a, args);
          }
        };
        LoggerService2.prototype.log = function() {
          var _a;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          if (logLevelOrder[this.logLevel] <= logLevelOrder.log) {
            (_a = this.logger).log.apply(_a, args);
          }
        };
        LoggerService2.prototype.warn = function() {
          var _a;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          if (logLevelOrder[this.logLevel] <= logLevelOrder.warn) {
            (_a = this.logger).warn.apply(_a, args);
          }
        };
        LoggerService2.prototype.error = function() {
          var _a;
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          if (logLevelOrder[this.logLevel] <= logLevelOrder.error) {
            (_a = this.logger).error.apply(_a, args);
          }
        };
        LoggerService2 = __decorate([
          (0, inversify_1.injectable)(),
          __param(0, (0, inversify_1.inject)(config_1.CONFIG_INJECT_KEY)),
          __metadata("design:paramtypes", [Object])
        ], LoggerService2);
        return LoggerService2;
      }()
    );
    exports.LoggerService = LoggerService;
  }
});

// ../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/utils/Http.service.js
var require_Http_service = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/utils/Http.service.js"(exports) {
    "use strict";
    var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function(k, v) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = exports && exports.__param || function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.HttpService = void 0;
    var inversify_1 = require_cjs4();
    var axios_1 = __importDefault(require_axios());
    var config_1 = require_config();
    var axios_retry_1 = __importDefault(require_cjs5());
    var Logger_service_1 = require_Logger_service();
    var HttpService = (
      /** @class */
      function() {
        function HttpService2(options, logger) {
          var _this = this;
          this.options = options;
          this.logger = logger;
          this.isTokenRefreshing = false;
          this.axiosInstance = axios_1.default.create({
            timeout: 1e4
          });
          this.axiosInstance.interceptors.response.use(function(response) {
            return response;
          }, function(error) {
            return __awaiter(_this, void 0, void 0, function() {
              var _a, _b;
              return __generator(this, function(_c) {
                switch (_c.label) {
                  case 0:
                    if (!(((_a = error === null || error === void 0 ? void 0 : error.response) === null || _a === void 0 ? void 0 : _a.status) === 403 || ((_b = error === null || error === void 0 ? void 0 : error.response) === null || _b === void 0 ? void 0 : _b.status) === 400)) return [3, 2];
                    return [4, this.refreshToken()];
                  case 1:
                    _c.sent();
                    _c.label = 2;
                  case 2:
                    return [2, Promise.reject(error)];
                }
              });
            });
          });
          (0, axios_retry_1.default)(this.axiosInstance, {
            retryDelay: axios_retry_1.default.exponentialDelay,
            retries: 3,
            retryCondition: function() {
              return true;
            }
          });
          this.axiosInstance.interceptors.request.use(function(config) {
            config.headers["authorization"] = "Bearer ".concat(_this.userToken);
            config.headers["accept"] = "application/json";
            return config;
          });
        }
        HttpService2.prototype.onInstanceInit = function() {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.refreshToken()];
                case 1:
                  _a.sent();
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        HttpService2.prototype.refreshToken = function() {
          return __awaiter(this, void 0, void 0, function() {
            var _a, err_1;
            return __generator(this, function(_b) {
              switch (_b.label) {
                case 0:
                  if (!!this.isTokenRefreshing) return [3, 5];
                  this.isTokenRefreshing = true;
                  _b.label = 1;
                case 1:
                  _b.trys.push([1, 3, 4, 5]);
                  _a = this;
                  return [4, this.options.refreshToken()];
                case 2:
                  _a.userToken = _b.sent();
                  if (this.onUserTokenChangeCallback) {
                    this.onUserTokenChangeCallback(this.userToken);
                  }
                  return [3, 5];
                case 3:
                  err_1 = _b.sent();
                  this.logger.error("Error refreshing token", err_1);
                  return [3, 5];
                case 4:
                  this.isTokenRefreshing = false;
                  return [
                    7
                    /*endfinally*/
                  ];
                case 5:
                  return [
                    2
                    /*return*/
                  ];
              }
            });
          });
        };
        HttpService2.prototype.get = function(url) {
          return __awaiter(this, void 0, void 0, function() {
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.axiosInstance.get("\n      ".concat(this.options.apiServerEndpoint, "/").concat(url))];
                case 1:
                  return [2, _a.sent()];
              }
            });
          });
        };
        HttpService2.prototype.onUserTokenChange = function(callback) {
          this.onUserTokenChangeCallback = callback;
        };
        HttpService2 = __decorate([
          (0, inversify_1.injectable)(),
          __param(0, (0, inversify_1.inject)(config_1.CONFIG_INJECT_KEY)),
          __param(1, (0, inversify_1.inject)(Logger_service_1.LoggerService)),
          __metadata("design:paramtypes", [Object, Logger_service_1.LoggerService])
        ], HttpService2);
        return HttpService2;
      }()
    );
    exports.HttpService = HttpService;
  }
});

// ../../node_modules/.pnpm/jsonpath-plus@9.0.0/node_modules/jsonpath-plus/dist/index-browser-esm.js
var index_browser_esm_exports = {};
__export(index_browser_esm_exports, {
  JSONPath: () => JSONPath,
  SafeScript: () => SafeScript
});
function _callSuper(t, o, e) {
  return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e));
}
function _construct(t, e, r) {
  if (_isNativeReflectConstruct()) return Reflect.construct.apply(null, arguments);
  var o = [null];
  o.push.apply(o, e);
  var p = new (t.bind.apply(t, o))();
  return r && _setPrototypeOf(p, r.prototype), p;
}
function _isNativeReflectConstruct() {
  try {
    var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch (t2) {
  }
  return (_isNativeReflectConstruct = function() {
    return !!t;
  })();
}
function ownKeys(e, r) {
  var t = Object.keys(e);
  if (Object.getOwnPropertySymbols) {
    var o = Object.getOwnPropertySymbols(e);
    r && (o = o.filter(function(r2) {
      return Object.getOwnPropertyDescriptor(e, r2).enumerable;
    })), t.push.apply(t, o);
  }
  return t;
}
function _objectSpread2(e) {
  for (var r = 1; r < arguments.length; r++) {
    var t = null != arguments[r] ? arguments[r] : {};
    r % 2 ? ownKeys(Object(t), true).forEach(function(r2) {
      _defineProperty(e, r2, t[r2]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r2) {
      Object.defineProperty(e, r2, Object.getOwnPropertyDescriptor(t, r2));
    });
  }
  return e;
}
function _toPrimitive(t, r) {
  if ("object" != typeof t || !t) return t;
  var e = t[Symbol.toPrimitive];
  if (void 0 !== e) {
    var i = e.call(t, r || "default");
    if ("object" != typeof i) return i;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return ("string" === r ? String : Number)(t);
}
function _toPropertyKey(t) {
  var i = _toPrimitive(t, "string");
  return "symbol" == typeof i ? i : i + "";
}
function _typeof(o) {
  "@babel/helpers - typeof";
  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function(o2) {
    return typeof o2;
  } : function(o2) {
    return o2 && "function" == typeof Symbol && o2.constructor === Symbol && o2 !== Symbol.prototype ? "symbol" : typeof o2;
  }, _typeof(o);
}
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  key = _toPropertyKey(key);
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }
  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) _setPrototypeOf(subClass, superClass);
}
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf2(o2) {
    return o2.__proto__ || Object.getPrototypeOf(o2);
  };
  return _getPrototypeOf(o);
}
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf2(o2, p2) {
    o2.__proto__ = p2;
    return o2;
  };
  return _setPrototypeOf(o, p);
}
function _isNativeFunction(fn) {
  try {
    return Function.toString.call(fn).indexOf("[native code]") !== -1;
  } catch (e) {
    return typeof fn === "function";
  }
}
function _wrapNativeSuper(Class) {
  var _cache = typeof Map === "function" ? /* @__PURE__ */ new Map() : void 0;
  _wrapNativeSuper = function _wrapNativeSuper2(Class2) {
    if (Class2 === null || !_isNativeFunction(Class2)) return Class2;
    if (typeof Class2 !== "function") {
      throw new TypeError("Super expression must either be null or a function");
    }
    if (typeof _cache !== "undefined") {
      if (_cache.has(Class2)) return _cache.get(Class2);
      _cache.set(Class2, Wrapper);
    }
    function Wrapper() {
      return _construct(Class2, arguments, _getPrototypeOf(this).constructor);
    }
    Wrapper.prototype = Object.create(Class2.prototype, {
      constructor: {
        value: Wrapper,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
    return _setPrototypeOf(Wrapper, Class2);
  };
  return _wrapNativeSuper(Class);
}
function _assertThisInitialized(self2) {
  if (self2 === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }
  return self2;
}
function _possibleConstructorReturn(self2, call) {
  if (call && (typeof call === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }
  return _assertThisInitialized(self2);
}
function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();
}
function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return _arrayLikeToArray(arr);
}
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _createForOfIteratorHelper(o, allowArrayLike) {
  var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
  if (!it) {
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      var F = function() {
      };
      return {
        s: F,
        n: function() {
          if (i >= o.length) return {
            done: true
          };
          return {
            done: false,
            value: o[i++]
          };
        },
        e: function(e) {
          throw e;
        },
        f: F
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  var normalCompletion = true, didErr = false, err;
  return {
    s: function() {
      it = it.call(o);
    },
    n: function() {
      var step = it.next();
      normalCompletion = step.done;
      return step;
    },
    e: function(e) {
      didErr = true;
      err = e;
    },
    f: function() {
      try {
        if (!normalCompletion && it.return != null) it.return();
      } finally {
        if (didErr) throw err;
      }
    }
  };
}
function push(arr, item) {
  arr = arr.slice();
  arr.push(item);
  return arr;
}
function unshift(item, arr) {
  arr = arr.slice();
  arr.unshift(item);
  return arr;
}
function JSONPath(opts, expr, obj, callback, otherTypeCallback) {
  if (!(this instanceof JSONPath)) {
    try {
      return new JSONPath(opts, expr, obj, callback, otherTypeCallback);
    } catch (e) {
      if (!e.avoidNew) {
        throw e;
      }
      return e.value;
    }
  }
  if (typeof opts === "string") {
    otherTypeCallback = callback;
    callback = obj;
    obj = expr;
    expr = opts;
    opts = null;
  }
  var optObj = opts && _typeof(opts) === "object";
  opts = opts || {};
  this.json = opts.json || obj;
  this.path = opts.path || expr;
  this.resultType = opts.resultType || "value";
  this.flatten = opts.flatten || false;
  this.wrap = hasOwnProp.call(opts, "wrap") ? opts.wrap : true;
  this.sandbox = opts.sandbox || {};
  this.eval = opts.eval === void 0 ? "safe" : opts.eval;
  this.ignoreEvalErrors = typeof opts.ignoreEvalErrors === "undefined" ? false : opts.ignoreEvalErrors;
  this.parent = opts.parent || null;
  this.parentProperty = opts.parentProperty || null;
  this.callback = opts.callback || callback || null;
  this.otherTypeCallback = opts.otherTypeCallback || otherTypeCallback || function() {
    throw new TypeError("You must supply an otherTypeCallback callback option with the @other() operator.");
  };
  if (opts.autostart !== false) {
    var args = {
      path: optObj ? opts.path : expr
    };
    if (!optObj) {
      args.json = obj;
    } else if ("json" in opts) {
      args.json = opts.json;
    }
    var ret = this.evaluate(args);
    if (!ret || _typeof(ret) !== "object") {
      throw new NewError(ret);
    }
    return ret;
  }
}
var Hooks, Plugins, Jsep, hooks, jsep, staticMethods, CONDITIONAL_EXP, ternary, FSLASH_CODE, BSLASH_CODE, index, PLUS_CODE, MINUS_CODE, plugin, hasOwnProp, NewError, moveToAnotherArray, SafeEval, SafeScript, Script;
var init_index_browser_esm = __esm({
  "../../node_modules/.pnpm/jsonpath-plus@9.0.0/node_modules/jsonpath-plus/dist/index-browser-esm.js"() {
    Hooks = function() {
      function Hooks2() {
        _classCallCheck(this, Hooks2);
      }
      return _createClass(Hooks2, [{
        key: "add",
        value: (
          /**
           * @callback HookCallback
           * @this {*|Jsep} this
           * @param {Jsep} env
           * @returns: void
           */
          /**
           * Adds the given callback to the list of callbacks for the given hook.
           *
           * The callback will be invoked when the hook it is registered for is run.
           *
           * One callback function can be registered to multiple hooks and the same hook multiple times.
           *
           * @param {string|object} name The name of the hook, or an object of callbacks keyed by name
           * @param {HookCallback|boolean} callback The callback function which is given environment variables.
           * @param {?boolean} [first=false] Will add the hook to the top of the list (defaults to the bottom)
           * @public
           */
          function add(name, callback, first) {
            if (typeof arguments[0] != "string") {
              for (var _name in arguments[0]) {
                this.add(_name, arguments[0][_name], arguments[1]);
              }
            } else {
              (Array.isArray(name) ? name : [name]).forEach(function(name2) {
                this[name2] = this[name2] || [];
                if (callback) {
                  this[name2][first ? "unshift" : "push"](callback);
                }
              }, this);
            }
          }
        )
        /**
         * Runs a hook invoking all registered callbacks with the given environment variables.
         *
         * Callbacks will be invoked synchronously and in the order in which they were registered.
         *
         * @param {string} name The name of the hook.
         * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
         * @public
         */
      }, {
        key: "run",
        value: function run(name, env) {
          this[name] = this[name] || [];
          this[name].forEach(function(callback) {
            callback.call(env && env.context ? env.context : env, env);
          });
        }
      }]);
    }();
    Plugins = function() {
      function Plugins2(jsep3) {
        _classCallCheck(this, Plugins2);
        this.jsep = jsep3;
        this.registered = {};
      }
      return _createClass(Plugins2, [{
        key: "register",
        value: function register() {
          var _this = this;
          for (var _len = arguments.length, plugins = new Array(_len), _key = 0; _key < _len; _key++) {
            plugins[_key] = arguments[_key];
          }
          plugins.forEach(function(plugin2) {
            if (_typeof(plugin2) !== "object" || !plugin2.name || !plugin2.init) {
              throw new Error("Invalid JSEP plugin format");
            }
            if (_this.registered[plugin2.name]) {
              return;
            }
            plugin2.init(_this.jsep);
            _this.registered[plugin2.name] = plugin2;
          });
        }
      }]);
    }();
    Jsep = function() {
      function Jsep2(expr) {
        _classCallCheck(this, Jsep2);
        this.expr = expr;
        this.index = 0;
      }
      return _createClass(Jsep2, [{
        key: "char",
        get: (
          // ==================== END CONFIG ============================
          /**
           * @returns {string}
           */
          function get() {
            return this.expr.charAt(this.index);
          }
        )
        /**
         * @returns {number}
         */
      }, {
        key: "code",
        get: function get() {
          return this.expr.charCodeAt(this.index);
        }
      }, {
        key: "throwError",
        value: (
          /**
           * throw error at index of the expression
           * @param {string} message
           * @throws
           */
          function throwError(message) {
            var error = new Error(message + " at character " + this.index);
            error.index = this.index;
            error.description = message;
            throw error;
          }
        )
        /**
         * Run a given hook
         * @param {string} name
         * @param {jsep.Expression|false} [node]
         * @returns {?jsep.Expression}
         */
      }, {
        key: "runHook",
        value: function runHook(name, node) {
          if (Jsep2.hooks[name]) {
            var env = {
              context: this,
              node
            };
            Jsep2.hooks.run(name, env);
            return env.node;
          }
          return node;
        }
        /**
         * Runs a given hook until one returns a node
         * @param {string} name
         * @returns {?jsep.Expression}
         */
      }, {
        key: "searchHook",
        value: function searchHook(name) {
          if (Jsep2.hooks[name]) {
            var env = {
              context: this
            };
            Jsep2.hooks[name].find(function(callback) {
              callback.call(env.context, env);
              return env.node;
            });
            return env.node;
          }
        }
        /**
         * Push `index` up to the next non-space character
         */
      }, {
        key: "gobbleSpaces",
        value: function gobbleSpaces() {
          var ch = this.code;
          while (ch === Jsep2.SPACE_CODE || ch === Jsep2.TAB_CODE || ch === Jsep2.LF_CODE || ch === Jsep2.CR_CODE) {
            ch = this.expr.charCodeAt(++this.index);
          }
          this.runHook("gobble-spaces");
        }
        /**
         * Top-level method to parse all expressions and returns compound or single node
         * @returns {jsep.Expression}
         */
      }, {
        key: "parse",
        value: function parse() {
          this.runHook("before-all");
          var nodes = this.gobbleExpressions();
          var node = nodes.length === 1 ? nodes[0] : {
            type: Jsep2.COMPOUND,
            body: nodes
          };
          return this.runHook("after-all", node);
        }
        /**
         * top-level parser (but can be reused within as well)
         * @param {number} [untilICode]
         * @returns {jsep.Expression[]}
         */
      }, {
        key: "gobbleExpressions",
        value: function gobbleExpressions(untilICode) {
          var nodes = [], ch_i, node;
          while (this.index < this.expr.length) {
            ch_i = this.code;
            if (ch_i === Jsep2.SEMCOL_CODE || ch_i === Jsep2.COMMA_CODE) {
              this.index++;
            } else {
              if (node = this.gobbleExpression()) {
                nodes.push(node);
              } else if (this.index < this.expr.length) {
                if (ch_i === untilICode) {
                  break;
                }
                this.throwError('Unexpected "' + this["char"] + '"');
              }
            }
          }
          return nodes;
        }
        /**
         * The main parsing function.
         * @returns {?jsep.Expression}
         */
      }, {
        key: "gobbleExpression",
        value: function gobbleExpression() {
          var node = this.searchHook("gobble-expression") || this.gobbleBinaryExpression();
          this.gobbleSpaces();
          return this.runHook("after-expression", node);
        }
        /**
         * Search for the operation portion of the string (e.g. `+`, `===`)
         * Start by taking the longest possible binary operations (3 characters: `===`, `!==`, `>>>`)
         * and move down from 3 to 2 to 1 character until a matching binary operation is found
         * then, return that binary operation
         * @returns {string|boolean}
         */
      }, {
        key: "gobbleBinaryOp",
        value: function gobbleBinaryOp() {
          this.gobbleSpaces();
          var to_check = this.expr.substr(this.index, Jsep2.max_binop_len);
          var tc_len = to_check.length;
          while (tc_len > 0) {
            if (Jsep2.binary_ops.hasOwnProperty(to_check) && (!Jsep2.isIdentifierStart(this.code) || this.index + to_check.length < this.expr.length && !Jsep2.isIdentifierPart(this.expr.charCodeAt(this.index + to_check.length)))) {
              this.index += tc_len;
              return to_check;
            }
            to_check = to_check.substr(0, --tc_len);
          }
          return false;
        }
        /**
         * This function is responsible for gobbling an individual expression,
         * e.g. `1`, `1+2`, `a+(b*2)-Math.sqrt(2)`
         * @returns {?jsep.BinaryExpression}
         */
      }, {
        key: "gobbleBinaryExpression",
        value: function gobbleBinaryExpression() {
          var node, biop, prec, stack, biop_info, left, right, i, cur_biop;
          left = this.gobbleToken();
          if (!left) {
            return left;
          }
          biop = this.gobbleBinaryOp();
          if (!biop) {
            return left;
          }
          biop_info = {
            value: biop,
            prec: Jsep2.binaryPrecedence(biop),
            right_a: Jsep2.right_associative.has(biop)
          };
          right = this.gobbleToken();
          if (!right) {
            this.throwError("Expected expression after " + biop);
          }
          stack = [left, biop_info, right];
          while (biop = this.gobbleBinaryOp()) {
            prec = Jsep2.binaryPrecedence(biop);
            if (prec === 0) {
              this.index -= biop.length;
              break;
            }
            biop_info = {
              value: biop,
              prec,
              right_a: Jsep2.right_associative.has(biop)
            };
            cur_biop = biop;
            var comparePrev = function comparePrev2(prev) {
              return biop_info.right_a && prev.right_a ? prec > prev.prec : prec <= prev.prec;
            };
            while (stack.length > 2 && comparePrev(stack[stack.length - 2])) {
              right = stack.pop();
              biop = stack.pop().value;
              left = stack.pop();
              node = {
                type: Jsep2.BINARY_EXP,
                operator: biop,
                left,
                right
              };
              stack.push(node);
            }
            node = this.gobbleToken();
            if (!node) {
              this.throwError("Expected expression after " + cur_biop);
            }
            stack.push(biop_info, node);
          }
          i = stack.length - 1;
          node = stack[i];
          while (i > 1) {
            node = {
              type: Jsep2.BINARY_EXP,
              operator: stack[i - 1].value,
              left: stack[i - 2],
              right: node
            };
            i -= 2;
          }
          return node;
        }
        /**
         * An individual part of a binary expression:
         * e.g. `foo.bar(baz)`, `1`, `"abc"`, `(a % 2)` (because it's in parenthesis)
         * @returns {boolean|jsep.Expression}
         */
      }, {
        key: "gobbleToken",
        value: function gobbleToken() {
          var ch, to_check, tc_len, node;
          this.gobbleSpaces();
          node = this.searchHook("gobble-token");
          if (node) {
            return this.runHook("after-token", node);
          }
          ch = this.code;
          if (Jsep2.isDecimalDigit(ch) || ch === Jsep2.PERIOD_CODE) {
            return this.gobbleNumericLiteral();
          }
          if (ch === Jsep2.SQUOTE_CODE || ch === Jsep2.DQUOTE_CODE) {
            node = this.gobbleStringLiteral();
          } else if (ch === Jsep2.OBRACK_CODE) {
            node = this.gobbleArray();
          } else {
            to_check = this.expr.substr(this.index, Jsep2.max_unop_len);
            tc_len = to_check.length;
            while (tc_len > 0) {
              if (Jsep2.unary_ops.hasOwnProperty(to_check) && (!Jsep2.isIdentifierStart(this.code) || this.index + to_check.length < this.expr.length && !Jsep2.isIdentifierPart(this.expr.charCodeAt(this.index + to_check.length)))) {
                this.index += tc_len;
                var argument = this.gobbleToken();
                if (!argument) {
                  this.throwError("missing unaryOp argument");
                }
                return this.runHook("after-token", {
                  type: Jsep2.UNARY_EXP,
                  operator: to_check,
                  argument,
                  prefix: true
                });
              }
              to_check = to_check.substr(0, --tc_len);
            }
            if (Jsep2.isIdentifierStart(ch)) {
              node = this.gobbleIdentifier();
              if (Jsep2.literals.hasOwnProperty(node.name)) {
                node = {
                  type: Jsep2.LITERAL,
                  value: Jsep2.literals[node.name],
                  raw: node.name
                };
              } else if (node.name === Jsep2.this_str) {
                node = {
                  type: Jsep2.THIS_EXP
                };
              }
            } else if (ch === Jsep2.OPAREN_CODE) {
              node = this.gobbleGroup();
            }
          }
          if (!node) {
            return this.runHook("after-token", false);
          }
          node = this.gobbleTokenProperty(node);
          return this.runHook("after-token", node);
        }
        /**
         * Gobble properties of of identifiers/strings/arrays/groups.
         * e.g. `foo`, `bar.baz`, `foo['bar'].baz`
         * It also gobbles function calls:
         * e.g. `Math.acos(obj.angle)`
         * @param {jsep.Expression} node
         * @returns {jsep.Expression}
         */
      }, {
        key: "gobbleTokenProperty",
        value: function gobbleTokenProperty(node) {
          this.gobbleSpaces();
          var ch = this.code;
          while (ch === Jsep2.PERIOD_CODE || ch === Jsep2.OBRACK_CODE || ch === Jsep2.OPAREN_CODE || ch === Jsep2.QUMARK_CODE) {
            var optional = void 0;
            if (ch === Jsep2.QUMARK_CODE) {
              if (this.expr.charCodeAt(this.index + 1) !== Jsep2.PERIOD_CODE) {
                break;
              }
              optional = true;
              this.index += 2;
              this.gobbleSpaces();
              ch = this.code;
            }
            this.index++;
            if (ch === Jsep2.OBRACK_CODE) {
              node = {
                type: Jsep2.MEMBER_EXP,
                computed: true,
                object: node,
                property: this.gobbleExpression()
              };
              this.gobbleSpaces();
              ch = this.code;
              if (ch !== Jsep2.CBRACK_CODE) {
                this.throwError("Unclosed [");
              }
              this.index++;
            } else if (ch === Jsep2.OPAREN_CODE) {
              node = {
                type: Jsep2.CALL_EXP,
                "arguments": this.gobbleArguments(Jsep2.CPAREN_CODE),
                callee: node
              };
            } else if (ch === Jsep2.PERIOD_CODE || optional) {
              if (optional) {
                this.index--;
              }
              this.gobbleSpaces();
              node = {
                type: Jsep2.MEMBER_EXP,
                computed: false,
                object: node,
                property: this.gobbleIdentifier()
              };
            }
            if (optional) {
              node.optional = true;
            }
            this.gobbleSpaces();
            ch = this.code;
          }
          return node;
        }
        /**
         * Parse simple numeric literals: `12`, `3.4`, `.5`. Do this by using a string to
         * keep track of everything in the numeric literal and then calling `parseFloat` on that string
         * @returns {jsep.Literal}
         */
      }, {
        key: "gobbleNumericLiteral",
        value: function gobbleNumericLiteral() {
          var number = "", ch, chCode;
          while (Jsep2.isDecimalDigit(this.code)) {
            number += this.expr.charAt(this.index++);
          }
          if (this.code === Jsep2.PERIOD_CODE) {
            number += this.expr.charAt(this.index++);
            while (Jsep2.isDecimalDigit(this.code)) {
              number += this.expr.charAt(this.index++);
            }
          }
          ch = this["char"];
          if (ch === "e" || ch === "E") {
            number += this.expr.charAt(this.index++);
            ch = this["char"];
            if (ch === "+" || ch === "-") {
              number += this.expr.charAt(this.index++);
            }
            while (Jsep2.isDecimalDigit(this.code)) {
              number += this.expr.charAt(this.index++);
            }
            if (!Jsep2.isDecimalDigit(this.expr.charCodeAt(this.index - 1))) {
              this.throwError("Expected exponent (" + number + this["char"] + ")");
            }
          }
          chCode = this.code;
          if (Jsep2.isIdentifierStart(chCode)) {
            this.throwError("Variable names cannot start with a number (" + number + this["char"] + ")");
          } else if (chCode === Jsep2.PERIOD_CODE || number.length === 1 && number.charCodeAt(0) === Jsep2.PERIOD_CODE) {
            this.throwError("Unexpected period");
          }
          return {
            type: Jsep2.LITERAL,
            value: parseFloat(number),
            raw: number
          };
        }
        /**
         * Parses a string literal, staring with single or double quotes with basic support for escape codes
         * e.g. `"hello world"`, `'this is\nJSEP'`
         * @returns {jsep.Literal}
         */
      }, {
        key: "gobbleStringLiteral",
        value: function gobbleStringLiteral() {
          var str = "";
          var startIndex = this.index;
          var quote = this.expr.charAt(this.index++);
          var closed = false;
          while (this.index < this.expr.length) {
            var ch = this.expr.charAt(this.index++);
            if (ch === quote) {
              closed = true;
              break;
            } else if (ch === "\\") {
              ch = this.expr.charAt(this.index++);
              switch (ch) {
                case "n":
                  str += "\n";
                  break;
                case "r":
                  str += "\r";
                  break;
                case "t":
                  str += "	";
                  break;
                case "b":
                  str += "\b";
                  break;
                case "f":
                  str += "\f";
                  break;
                case "v":
                  str += "\v";
                  break;
                default:
                  str += ch;
              }
            } else {
              str += ch;
            }
          }
          if (!closed) {
            this.throwError('Unclosed quote after "' + str + '"');
          }
          return {
            type: Jsep2.LITERAL,
            value: str,
            raw: this.expr.substring(startIndex, this.index)
          };
        }
        /**
         * Gobbles only identifiers
         * e.g.: `foo`, `_value`, `$x1`
         * Also, this function checks if that identifier is a literal:
         * (e.g. `true`, `false`, `null`) or `this`
         * @returns {jsep.Identifier}
         */
      }, {
        key: "gobbleIdentifier",
        value: function gobbleIdentifier() {
          var ch = this.code, start = this.index;
          if (Jsep2.isIdentifierStart(ch)) {
            this.index++;
          } else {
            this.throwError("Unexpected " + this["char"]);
          }
          while (this.index < this.expr.length) {
            ch = this.code;
            if (Jsep2.isIdentifierPart(ch)) {
              this.index++;
            } else {
              break;
            }
          }
          return {
            type: Jsep2.IDENTIFIER,
            name: this.expr.slice(start, this.index)
          };
        }
        /**
         * Gobbles a list of arguments within the context of a function call
         * or array literal. This function also assumes that the opening character
         * `(` or `[` has already been gobbled, and gobbles expressions and commas
         * until the terminator character `)` or `]` is encountered.
         * e.g. `foo(bar, baz)`, `my_func()`, or `[bar, baz]`
         * @param {number} termination
         * @returns {jsep.Expression[]}
         */
      }, {
        key: "gobbleArguments",
        value: function gobbleArguments(termination) {
          var args = [];
          var closed = false;
          var separator_count = 0;
          while (this.index < this.expr.length) {
            this.gobbleSpaces();
            var ch_i = this.code;
            if (ch_i === termination) {
              closed = true;
              this.index++;
              if (termination === Jsep2.CPAREN_CODE && separator_count && separator_count >= args.length) {
                this.throwError("Unexpected token " + String.fromCharCode(termination));
              }
              break;
            } else if (ch_i === Jsep2.COMMA_CODE) {
              this.index++;
              separator_count++;
              if (separator_count !== args.length) {
                if (termination === Jsep2.CPAREN_CODE) {
                  this.throwError("Unexpected token ,");
                } else if (termination === Jsep2.CBRACK_CODE) {
                  for (var arg = args.length; arg < separator_count; arg++) {
                    args.push(null);
                  }
                }
              }
            } else if (args.length !== separator_count && separator_count !== 0) {
              this.throwError("Expected comma");
            } else {
              var node = this.gobbleExpression();
              if (!node || node.type === Jsep2.COMPOUND) {
                this.throwError("Expected comma");
              }
              args.push(node);
            }
          }
          if (!closed) {
            this.throwError("Expected " + String.fromCharCode(termination));
          }
          return args;
        }
        /**
         * Responsible for parsing a group of things within parentheses `()`
         * that have no identifier in front (so not a function call)
         * This function assumes that it needs to gobble the opening parenthesis
         * and then tries to gobble everything within that parenthesis, assuming
         * that the next thing it should see is the close parenthesis. If not,
         * then the expression probably doesn't have a `)`
         * @returns {boolean|jsep.Expression}
         */
      }, {
        key: "gobbleGroup",
        value: function gobbleGroup() {
          this.index++;
          var nodes = this.gobbleExpressions(Jsep2.CPAREN_CODE);
          if (this.code === Jsep2.CPAREN_CODE) {
            this.index++;
            if (nodes.length === 1) {
              return nodes[0];
            } else if (!nodes.length) {
              return false;
            } else {
              return {
                type: Jsep2.SEQUENCE_EXP,
                expressions: nodes
              };
            }
          } else {
            this.throwError("Unclosed (");
          }
        }
        /**
         * Responsible for parsing Array literals `[1, 2, 3]`
         * This function assumes that it needs to gobble the opening bracket
         * and then tries to gobble the expressions as arguments.
         * @returns {jsep.ArrayExpression}
         */
      }, {
        key: "gobbleArray",
        value: function gobbleArray() {
          this.index++;
          return {
            type: Jsep2.ARRAY_EXP,
            elements: this.gobbleArguments(Jsep2.CBRACK_CODE)
          };
        }
      }], [{
        key: "version",
        get: (
          /**
           * @returns {string}
           */
          function get() {
            return "1.3.8";
          }
        )
        /**
         * @returns {string}
         */
      }, {
        key: "toString",
        value: function toString() {
          return "JavaScript Expression Parser (JSEP) v" + Jsep2.version;
        }
      }, {
        key: "addUnaryOp",
        value: (
          // ==================== CONFIG ================================
          /**
           * @method addUnaryOp
           * @param {string} op_name The name of the unary op to add
           * @returns {Jsep}
           */
          function addUnaryOp(op_name) {
            Jsep2.max_unop_len = Math.max(op_name.length, Jsep2.max_unop_len);
            Jsep2.unary_ops[op_name] = 1;
            return Jsep2;
          }
        )
        /**
         * @method jsep.addBinaryOp
         * @param {string} op_name The name of the binary op to add
         * @param {number} precedence The precedence of the binary op (can be a float). Higher number = higher precedence
         * @param {boolean} [isRightAssociative=false] whether operator is right-associative
         * @returns {Jsep}
         */
      }, {
        key: "addBinaryOp",
        value: function addBinaryOp(op_name, precedence, isRightAssociative) {
          Jsep2.max_binop_len = Math.max(op_name.length, Jsep2.max_binop_len);
          Jsep2.binary_ops[op_name] = precedence;
          if (isRightAssociative) {
            Jsep2.right_associative.add(op_name);
          } else {
            Jsep2.right_associative["delete"](op_name);
          }
          return Jsep2;
        }
        /**
         * @method addIdentifierChar
         * @param {string} char The additional character to treat as a valid part of an identifier
         * @returns {Jsep}
         */
      }, {
        key: "addIdentifierChar",
        value: function addIdentifierChar(_char) {
          Jsep2.additional_identifier_chars.add(_char);
          return Jsep2;
        }
        /**
         * @method addLiteral
         * @param {string} literal_name The name of the literal to add
         * @param {*} literal_value The value of the literal
         * @returns {Jsep}
         */
      }, {
        key: "addLiteral",
        value: function addLiteral(literal_name, literal_value) {
          Jsep2.literals[literal_name] = literal_value;
          return Jsep2;
        }
        /**
         * @method removeUnaryOp
         * @param {string} op_name The name of the unary op to remove
         * @returns {Jsep}
         */
      }, {
        key: "removeUnaryOp",
        value: function removeUnaryOp(op_name) {
          delete Jsep2.unary_ops[op_name];
          if (op_name.length === Jsep2.max_unop_len) {
            Jsep2.max_unop_len = Jsep2.getMaxKeyLen(Jsep2.unary_ops);
          }
          return Jsep2;
        }
        /**
         * @method removeAllUnaryOps
         * @returns {Jsep}
         */
      }, {
        key: "removeAllUnaryOps",
        value: function removeAllUnaryOps() {
          Jsep2.unary_ops = {};
          Jsep2.max_unop_len = 0;
          return Jsep2;
        }
        /**
         * @method removeIdentifierChar
         * @param {string} char The additional character to stop treating as a valid part of an identifier
         * @returns {Jsep}
         */
      }, {
        key: "removeIdentifierChar",
        value: function removeIdentifierChar(_char2) {
          Jsep2.additional_identifier_chars["delete"](_char2);
          return Jsep2;
        }
        /**
         * @method removeBinaryOp
         * @param {string} op_name The name of the binary op to remove
         * @returns {Jsep}
         */
      }, {
        key: "removeBinaryOp",
        value: function removeBinaryOp(op_name) {
          delete Jsep2.binary_ops[op_name];
          if (op_name.length === Jsep2.max_binop_len) {
            Jsep2.max_binop_len = Jsep2.getMaxKeyLen(Jsep2.binary_ops);
          }
          Jsep2.right_associative["delete"](op_name);
          return Jsep2;
        }
        /**
         * @method removeAllBinaryOps
         * @returns {Jsep}
         */
      }, {
        key: "removeAllBinaryOps",
        value: function removeAllBinaryOps() {
          Jsep2.binary_ops = {};
          Jsep2.max_binop_len = 0;
          return Jsep2;
        }
        /**
         * @method removeLiteral
         * @param {string} literal_name The name of the literal to remove
         * @returns {Jsep}
         */
      }, {
        key: "removeLiteral",
        value: function removeLiteral(literal_name) {
          delete Jsep2.literals[literal_name];
          return Jsep2;
        }
        /**
         * @method removeAllLiterals
         * @returns {Jsep}
         */
      }, {
        key: "removeAllLiterals",
        value: function removeAllLiterals() {
          Jsep2.literals = {};
          return Jsep2;
        }
      }, {
        key: "parse",
        value: function parse(expr) {
          return new Jsep2(expr).parse();
        }
        /**
         * Get the longest key length of any object
         * @param {object} obj
         * @returns {number}
         */
      }, {
        key: "getMaxKeyLen",
        value: function getMaxKeyLen(obj) {
          return Math.max.apply(Math, [0].concat(_toConsumableArray(Object.keys(obj).map(function(k) {
            return k.length;
          }))));
        }
        /**
         * `ch` is a character code in the next three functions
         * @param {number} ch
         * @returns {boolean}
         */
      }, {
        key: "isDecimalDigit",
        value: function isDecimalDigit(ch) {
          return ch >= 48 && ch <= 57;
        }
        /**
         * Returns the precedence of a binary operator or `0` if it isn't a binary operator. Can be float.
         * @param {string} op_val
         * @returns {number}
         */
      }, {
        key: "binaryPrecedence",
        value: function binaryPrecedence(op_val) {
          return Jsep2.binary_ops[op_val] || 0;
        }
        /**
         * Looks for start of identifier
         * @param {number} ch
         * @returns {boolean}
         */
      }, {
        key: "isIdentifierStart",
        value: function isIdentifierStart(ch) {
          return ch >= 65 && ch <= 90 || // A...Z
          ch >= 97 && ch <= 122 || // a...z
          ch >= 128 && !Jsep2.binary_ops[String.fromCharCode(ch)] || // any non-ASCII that is not an operator
          Jsep2.additional_identifier_chars.has(String.fromCharCode(ch));
        }
        /**
         * @param {number} ch
         * @returns {boolean}
         */
      }, {
        key: "isIdentifierPart",
        value: function isIdentifierPart(ch) {
          return Jsep2.isIdentifierStart(ch) || Jsep2.isDecimalDigit(ch);
        }
      }]);
    }();
    hooks = new Hooks();
    Object.assign(Jsep, {
      hooks,
      plugins: new Plugins(Jsep),
      // Node Types
      // ----------
      // This is the full set of types that any JSEP node can be.
      // Store them here to save space when minified
      COMPOUND: "Compound",
      SEQUENCE_EXP: "SequenceExpression",
      IDENTIFIER: "Identifier",
      MEMBER_EXP: "MemberExpression",
      LITERAL: "Literal",
      THIS_EXP: "ThisExpression",
      CALL_EXP: "CallExpression",
      UNARY_EXP: "UnaryExpression",
      BINARY_EXP: "BinaryExpression",
      ARRAY_EXP: "ArrayExpression",
      TAB_CODE: 9,
      LF_CODE: 10,
      CR_CODE: 13,
      SPACE_CODE: 32,
      PERIOD_CODE: 46,
      // '.'
      COMMA_CODE: 44,
      // ','
      SQUOTE_CODE: 39,
      // single quote
      DQUOTE_CODE: 34,
      // double quotes
      OPAREN_CODE: 40,
      // (
      CPAREN_CODE: 41,
      // )
      OBRACK_CODE: 91,
      // [
      CBRACK_CODE: 93,
      // ]
      QUMARK_CODE: 63,
      // ?
      SEMCOL_CODE: 59,
      // ;
      COLON_CODE: 58,
      // :
      // Operations
      // ----------
      // Use a quickly-accessible map to store all of the unary operators
      // Values are set to `1` (it really doesn't matter)
      unary_ops: {
        "-": 1,
        "!": 1,
        "~": 1,
        "+": 1
      },
      // Also use a map for the binary operations but set their values to their
      // binary precedence for quick reference (higher number = higher precedence)
      // see [Order of operations](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence)
      binary_ops: {
        "||": 1,
        "&&": 2,
        "|": 3,
        "^": 4,
        "&": 5,
        "==": 6,
        "!=": 6,
        "===": 6,
        "!==": 6,
        "<": 7,
        ">": 7,
        "<=": 7,
        ">=": 7,
        "<<": 8,
        ">>": 8,
        ">>>": 8,
        "+": 9,
        "-": 9,
        "*": 10,
        "/": 10,
        "%": 10
      },
      // sets specific binary_ops as right-associative
      right_associative: /* @__PURE__ */ new Set(),
      // Additional valid identifier chars, apart from a-z, A-Z and 0-9 (except on the starting char)
      additional_identifier_chars: /* @__PURE__ */ new Set(["$", "_"]),
      // Literals
      // ----------
      // Store the values to return for the various literals we may encounter
      literals: {
        "true": true,
        "false": false,
        "null": null
      },
      // Except for `this`, which is special. This could be changed to something like `'self'` as well
      this_str: "this"
    });
    Jsep.max_unop_len = Jsep.getMaxKeyLen(Jsep.unary_ops);
    Jsep.max_binop_len = Jsep.getMaxKeyLen(Jsep.binary_ops);
    jsep = function jsep2(expr) {
      return new Jsep(expr).parse();
    };
    staticMethods = Object.getOwnPropertyNames(Jsep);
    staticMethods.forEach(function(m) {
      if (jsep[m] === void 0 && m !== "prototype") {
        jsep[m] = Jsep[m];
      }
    });
    jsep.Jsep = Jsep;
    CONDITIONAL_EXP = "ConditionalExpression";
    ternary = {
      name: "ternary",
      init: function init(jsep3) {
        jsep3.hooks.add("after-expression", function gobbleTernary(env) {
          if (env.node && this.code === jsep3.QUMARK_CODE) {
            this.index++;
            var test = env.node;
            var consequent = this.gobbleExpression();
            if (!consequent) {
              this.throwError("Expected expression");
            }
            this.gobbleSpaces();
            if (this.code === jsep3.COLON_CODE) {
              this.index++;
              var alternate = this.gobbleExpression();
              if (!alternate) {
                this.throwError("Expected expression");
              }
              env.node = {
                type: CONDITIONAL_EXP,
                test,
                consequent,
                alternate
              };
              if (test.operator && jsep3.binary_ops[test.operator] <= 0.9) {
                var newTest = test;
                while (newTest.right.operator && jsep3.binary_ops[newTest.right.operator] <= 0.9) {
                  newTest = newTest.right;
                }
                env.node.test = newTest.right;
                newTest.right = env.node;
                env.node = test;
              }
            } else {
              this.throwError("Expected :");
            }
          }
        });
      }
    };
    jsep.plugins.register(ternary);
    FSLASH_CODE = 47;
    BSLASH_CODE = 92;
    index = {
      name: "regex",
      init: function init2(jsep3) {
        jsep3.hooks.add("gobble-token", function gobbleRegexLiteral(env) {
          if (this.code === FSLASH_CODE) {
            var patternIndex = ++this.index;
            var inCharSet = false;
            while (this.index < this.expr.length) {
              if (this.code === FSLASH_CODE && !inCharSet) {
                var pattern = this.expr.slice(patternIndex, this.index);
                var flags = "";
                while (++this.index < this.expr.length) {
                  var code = this.code;
                  if (code >= 97 && code <= 122 || code >= 65 && code <= 90 || code >= 48 && code <= 57) {
                    flags += this["char"];
                  } else {
                    break;
                  }
                }
                var value = void 0;
                try {
                  value = new RegExp(pattern, flags);
                } catch (e) {
                  this.throwError(e.message);
                }
                env.node = {
                  type: jsep3.LITERAL,
                  value,
                  raw: this.expr.slice(patternIndex - 1, this.index)
                };
                env.node = this.gobbleTokenProperty(env.node);
                return env.node;
              }
              if (this.code === jsep3.OBRACK_CODE) {
                inCharSet = true;
              } else if (inCharSet && this.code === jsep3.CBRACK_CODE) {
                inCharSet = false;
              }
              this.index += this.code === BSLASH_CODE ? 2 : 1;
            }
            this.throwError("Unclosed Regex");
          }
        });
      }
    };
    PLUS_CODE = 43;
    MINUS_CODE = 45;
    plugin = {
      name: "assignment",
      assignmentOperators: /* @__PURE__ */ new Set(["=", "*=", "**=", "/=", "%=", "+=", "-=", "<<=", ">>=", ">>>=", "&=", "^=", "|="]),
      updateOperators: [PLUS_CODE, MINUS_CODE],
      assignmentPrecedence: 0.9,
      init: function init3(jsep3) {
        var updateNodeTypes = [jsep3.IDENTIFIER, jsep3.MEMBER_EXP];
        plugin.assignmentOperators.forEach(function(op) {
          return jsep3.addBinaryOp(op, plugin.assignmentPrecedence, true);
        });
        jsep3.hooks.add("gobble-token", function gobbleUpdatePrefix(env) {
          var _this = this;
          var code = this.code;
          if (plugin.updateOperators.some(function(c) {
            return c === code && c === _this.expr.charCodeAt(_this.index + 1);
          })) {
            this.index += 2;
            env.node = {
              type: "UpdateExpression",
              operator: code === PLUS_CODE ? "++" : "--",
              argument: this.gobbleTokenProperty(this.gobbleIdentifier()),
              prefix: true
            };
            if (!env.node.argument || !updateNodeTypes.includes(env.node.argument.type)) {
              this.throwError("Unexpected ".concat(env.node.operator));
            }
          }
        });
        jsep3.hooks.add("after-token", function gobbleUpdatePostfix(env) {
          var _this2 = this;
          if (env.node) {
            var code = this.code;
            if (plugin.updateOperators.some(function(c) {
              return c === code && c === _this2.expr.charCodeAt(_this2.index + 1);
            })) {
              if (!updateNodeTypes.includes(env.node.type)) {
                this.throwError("Unexpected ".concat(env.node.operator));
              }
              this.index += 2;
              env.node = {
                type: "UpdateExpression",
                operator: code === PLUS_CODE ? "++" : "--",
                argument: env.node,
                prefix: false
              };
            }
          }
        });
        jsep3.hooks.add("after-expression", function gobbleAssignment(env) {
          if (env.node) {
            updateBinariesToAssignments(env.node);
          }
        });
        function updateBinariesToAssignments(node) {
          if (plugin.assignmentOperators.has(node.operator)) {
            node.type = "AssignmentExpression";
            updateBinariesToAssignments(node.left);
            updateBinariesToAssignments(node.right);
          } else if (!node.operator) {
            Object.values(node).forEach(function(val) {
              if (val && _typeof(val) === "object") {
                updateBinariesToAssignments(val);
              }
            });
          }
        }
      }
    };
    hasOwnProp = Object.prototype.hasOwnProperty;
    NewError = function(_Error) {
      function NewError2(value) {
        var _this;
        _classCallCheck(this, NewError2);
        _this = _callSuper(this, NewError2, ['JSONPath should not be called with "new" (it prevents return of (unwrapped) scalar values)']);
        _this.avoidNew = true;
        _this.value = value;
        _this.name = "NewError";
        return _this;
      }
      _inherits(NewError2, _Error);
      return _createClass(NewError2);
    }(_wrapNativeSuper(Error));
    JSONPath.prototype.evaluate = function(expr, json, callback, otherTypeCallback) {
      var _this2 = this;
      var currParent = this.parent, currParentProperty = this.parentProperty;
      var flatten = this.flatten, wrap = this.wrap;
      this.currResultType = this.resultType;
      this.currEval = this.eval;
      this.currSandbox = this.sandbox;
      callback = callback || this.callback;
      this.currOtherTypeCallback = otherTypeCallback || this.otherTypeCallback;
      json = json || this.json;
      expr = expr || this.path;
      if (expr && _typeof(expr) === "object" && !Array.isArray(expr)) {
        if (!expr.path && expr.path !== "") {
          throw new TypeError('You must supply a "path" property when providing an object argument to JSONPath.evaluate().');
        }
        if (!hasOwnProp.call(expr, "json")) {
          throw new TypeError('You must supply a "json" property when providing an object argument to JSONPath.evaluate().');
        }
        var _expr = expr;
        json = _expr.json;
        flatten = hasOwnProp.call(expr, "flatten") ? expr.flatten : flatten;
        this.currResultType = hasOwnProp.call(expr, "resultType") ? expr.resultType : this.currResultType;
        this.currSandbox = hasOwnProp.call(expr, "sandbox") ? expr.sandbox : this.currSandbox;
        wrap = hasOwnProp.call(expr, "wrap") ? expr.wrap : wrap;
        this.currEval = hasOwnProp.call(expr, "eval") ? expr.eval : this.currEval;
        callback = hasOwnProp.call(expr, "callback") ? expr.callback : callback;
        this.currOtherTypeCallback = hasOwnProp.call(expr, "otherTypeCallback") ? expr.otherTypeCallback : this.currOtherTypeCallback;
        currParent = hasOwnProp.call(expr, "parent") ? expr.parent : currParent;
        currParentProperty = hasOwnProp.call(expr, "parentProperty") ? expr.parentProperty : currParentProperty;
        expr = expr.path;
      }
      currParent = currParent || null;
      currParentProperty = currParentProperty || null;
      if (Array.isArray(expr)) {
        expr = JSONPath.toPathString(expr);
      }
      if (!expr && expr !== "" || !json) {
        return void 0;
      }
      var exprList = JSONPath.toPathArray(expr);
      if (exprList[0] === "$" && exprList.length > 1) {
        exprList.shift();
      }
      this._hasParentSelector = null;
      var result = this._trace(exprList, json, ["$"], currParent, currParentProperty, callback).filter(function(ea) {
        return ea && !ea.isParentSelector;
      });
      if (!result.length) {
        return wrap ? [] : void 0;
      }
      if (!wrap && result.length === 1 && !result[0].hasArrExpr) {
        return this._getPreferredOutput(result[0]);
      }
      return result.reduce(function(rslt, ea) {
        var valOrPath = _this2._getPreferredOutput(ea);
        if (flatten && Array.isArray(valOrPath)) {
          rslt = rslt.concat(valOrPath);
        } else {
          rslt.push(valOrPath);
        }
        return rslt;
      }, []);
    };
    JSONPath.prototype._getPreferredOutput = function(ea) {
      var resultType = this.currResultType;
      switch (resultType) {
        case "all": {
          var path = Array.isArray(ea.path) ? ea.path : JSONPath.toPathArray(ea.path);
          ea.pointer = JSONPath.toPointer(path);
          ea.path = typeof ea.path === "string" ? ea.path : JSONPath.toPathString(ea.path);
          return ea;
        }
        case "value":
        case "parent":
        case "parentProperty":
          return ea[resultType];
        case "path":
          return JSONPath.toPathString(ea[resultType]);
        case "pointer":
          return JSONPath.toPointer(ea.path);
        default:
          throw new TypeError("Unknown result type");
      }
    };
    JSONPath.prototype._handleCallback = function(fullRetObj, callback, type) {
      if (callback) {
        var preferredOutput = this._getPreferredOutput(fullRetObj);
        fullRetObj.path = typeof fullRetObj.path === "string" ? fullRetObj.path : JSONPath.toPathString(fullRetObj.path);
        callback(preferredOutput, type, fullRetObj);
      }
    };
    JSONPath.prototype._trace = function(expr, val, path, parent, parentPropName, callback, hasArrExpr, literalPriority) {
      var _this3 = this;
      var retObj;
      if (!expr.length) {
        retObj = {
          path,
          value: val,
          parent,
          parentProperty: parentPropName,
          hasArrExpr
        };
        this._handleCallback(retObj, callback, "value");
        return retObj;
      }
      var loc = expr[0], x = expr.slice(1);
      var ret = [];
      function addRet(elems) {
        if (Array.isArray(elems)) {
          elems.forEach(function(t2) {
            ret.push(t2);
          });
        } else {
          ret.push(elems);
        }
      }
      if ((typeof loc !== "string" || literalPriority) && val && hasOwnProp.call(val, loc)) {
        addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback, hasArrExpr));
      } else if (loc === "*") {
        this._walk(val, function(m) {
          addRet(_this3._trace(x, val[m], push(path, m), val, m, callback, true, true));
        });
      } else if (loc === "..") {
        addRet(this._trace(x, val, path, parent, parentPropName, callback, hasArrExpr));
        this._walk(val, function(m) {
          if (_typeof(val[m]) === "object") {
            addRet(_this3._trace(expr.slice(), val[m], push(path, m), val, m, callback, true));
          }
        });
      } else if (loc === "^") {
        this._hasParentSelector = true;
        return {
          path: path.slice(0, -1),
          expr: x,
          isParentSelector: true
        };
      } else if (loc === "~") {
        retObj = {
          path: push(path, loc),
          value: parentPropName,
          parent,
          parentProperty: null
        };
        this._handleCallback(retObj, callback, "property");
        return retObj;
      } else if (loc === "$") {
        addRet(this._trace(x, val, path, null, null, callback, hasArrExpr));
      } else if (/^(\x2D?[0-9]*):(\x2D?[0-9]*):?([0-9]*)$/.test(loc)) {
        addRet(this._slice(loc, x, val, path, parent, parentPropName, callback));
      } else if (loc.indexOf("?(") === 0) {
        if (this.currEval === false) {
          throw new Error("Eval [?(expr)] prevented in JSONPath expression.");
        }
        var safeLoc = loc.replace(/^\?\(((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?)\)$/, "$1");
        var nested = /@(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])?((?:[\0->@-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)['\[](\??\((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\))(?!(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])\)\])['\]]/g.exec(safeLoc);
        if (nested) {
          this._walk(val, function(m) {
            var npath = [nested[2]];
            var nvalue = nested[1] ? val[m][nested[1]] : val[m];
            var filterResults = _this3._trace(npath, nvalue, path, parent, parentPropName, callback, true);
            if (filterResults.length > 0) {
              addRet(_this3._trace(x, val[m], push(path, m), val, m, callback, true));
            }
          });
        } else {
          this._walk(val, function(m) {
            if (_this3._eval(safeLoc, val[m], m, path, parent, parentPropName)) {
              addRet(_this3._trace(x, val[m], push(path, m), val, m, callback, true));
            }
          });
        }
      } else if (loc[0] === "(") {
        if (this.currEval === false) {
          throw new Error("Eval [(expr)] prevented in JSONPath expression.");
        }
        addRet(this._trace(unshift(this._eval(loc, val, path[path.length - 1], path.slice(0, -1), parent, parentPropName), x), val, path, parent, parentPropName, callback, hasArrExpr));
      } else if (loc[0] === "@") {
        var addType = false;
        var valueType = loc.slice(1, -2);
        switch (valueType) {
          case "scalar":
            if (!val || !["object", "function"].includes(_typeof(val))) {
              addType = true;
            }
            break;
          case "boolean":
          case "string":
          case "undefined":
          case "function":
            if (_typeof(val) === valueType) {
              addType = true;
            }
            break;
          case "integer":
            if (Number.isFinite(val) && !(val % 1)) {
              addType = true;
            }
            break;
          case "number":
            if (Number.isFinite(val)) {
              addType = true;
            }
            break;
          case "nonFinite":
            if (typeof val === "number" && !Number.isFinite(val)) {
              addType = true;
            }
            break;
          case "object":
            if (val && _typeof(val) === valueType) {
              addType = true;
            }
            break;
          case "array":
            if (Array.isArray(val)) {
              addType = true;
            }
            break;
          case "other":
            addType = this.currOtherTypeCallback(val, path, parent, parentPropName);
            break;
          case "null":
            if (val === null) {
              addType = true;
            }
            break;
          default:
            throw new TypeError("Unknown value type " + valueType);
        }
        if (addType) {
          retObj = {
            path,
            value: val,
            parent,
            parentProperty: parentPropName
          };
          this._handleCallback(retObj, callback, "value");
          return retObj;
        }
      } else if (loc[0] === "`" && val && hasOwnProp.call(val, loc.slice(1))) {
        var locProp = loc.slice(1);
        addRet(this._trace(x, val[locProp], push(path, locProp), val, locProp, callback, hasArrExpr, true));
      } else if (loc.includes(",")) {
        var parts = loc.split(",");
        var _iterator = _createForOfIteratorHelper(parts), _step;
        try {
          for (_iterator.s(); !(_step = _iterator.n()).done; ) {
            var part = _step.value;
            addRet(this._trace(unshift(part, x), val, path, parent, parentPropName, callback, true));
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      } else if (!literalPriority && val && hasOwnProp.call(val, loc)) {
        addRet(this._trace(x, val[loc], push(path, loc), val, loc, callback, hasArrExpr, true));
      }
      if (this._hasParentSelector) {
        for (var t = 0; t < ret.length; t++) {
          var rett = ret[t];
          if (rett && rett.isParentSelector) {
            var tmp = this._trace(rett.expr, val, rett.path, parent, parentPropName, callback, hasArrExpr);
            if (Array.isArray(tmp)) {
              ret[t] = tmp[0];
              var tl = tmp.length;
              for (var tt = 1; tt < tl; tt++) {
                t++;
                ret.splice(t, 0, tmp[tt]);
              }
            } else {
              ret[t] = tmp;
            }
          }
        }
      }
      return ret;
    };
    JSONPath.prototype._walk = function(val, f) {
      if (Array.isArray(val)) {
        var n = val.length;
        for (var i = 0; i < n; i++) {
          f(i);
        }
      } else if (val && _typeof(val) === "object") {
        Object.keys(val).forEach(function(m) {
          f(m);
        });
      }
    };
    JSONPath.prototype._slice = function(loc, expr, val, path, parent, parentPropName, callback) {
      if (!Array.isArray(val)) {
        return void 0;
      }
      var len = val.length, parts = loc.split(":"), step = parts[2] && Number.parseInt(parts[2]) || 1;
      var start = parts[0] && Number.parseInt(parts[0]) || 0, end = parts[1] && Number.parseInt(parts[1]) || len;
      start = start < 0 ? Math.max(0, start + len) : Math.min(len, start);
      end = end < 0 ? Math.max(0, end + len) : Math.min(len, end);
      var ret = [];
      for (var i = start; i < end; i += step) {
        var tmp = this._trace(unshift(i, expr), val, path, parent, parentPropName, callback, true);
        tmp.forEach(function(t) {
          ret.push(t);
        });
      }
      return ret;
    };
    JSONPath.prototype._eval = function(code, _v, _vname, path, parent, parentPropName) {
      var _this4 = this;
      this.currSandbox._$_parentProperty = parentPropName;
      this.currSandbox._$_parent = parent;
      this.currSandbox._$_property = _vname;
      this.currSandbox._$_root = this.json;
      this.currSandbox._$_v = _v;
      var containsPath = code.includes("@path");
      if (containsPath) {
        this.currSandbox._$_path = JSONPath.toPathString(path.concat([_vname]));
      }
      var scriptCacheKey = this.currEval + "Script:" + code;
      if (!JSONPath.cache[scriptCacheKey]) {
        var script = code.replace(/@parentProperty/g, "_$_parentProperty").replace(/@parent/g, "_$_parent").replace(/@property/g, "_$_property").replace(/@root/g, "_$_root").replace(/@([\t-\r \)\.\[\xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF])/g, "_$_v$1");
        if (containsPath) {
          script = script.replace(/@path/g, "_$_path");
        }
        if (this.currEval === "safe" || this.currEval === true || this.currEval === void 0) {
          JSONPath.cache[scriptCacheKey] = new this.safeVm.Script(script);
        } else if (this.currEval === "native") {
          JSONPath.cache[scriptCacheKey] = new this.vm.Script(script);
        } else if (typeof this.currEval === "function" && this.currEval.prototype && hasOwnProp.call(this.currEval.prototype, "runInNewContext")) {
          var CurrEval = this.currEval;
          JSONPath.cache[scriptCacheKey] = new CurrEval(script);
        } else if (typeof this.currEval === "function") {
          JSONPath.cache[scriptCacheKey] = {
            runInNewContext: function runInNewContext(context) {
              return _this4.currEval(script, context);
            }
          };
        } else {
          throw new TypeError('Unknown "eval" property "'.concat(this.currEval, '"'));
        }
      }
      try {
        return JSONPath.cache[scriptCacheKey].runInNewContext(this.currSandbox);
      } catch (e) {
        if (this.ignoreEvalErrors) {
          return false;
        }
        throw new Error("jsonPath: " + e.message + ": " + code);
      }
    };
    JSONPath.cache = {};
    JSONPath.toPathString = function(pathArr) {
      var x = pathArr, n = x.length;
      var p = "$";
      for (var i = 1; i < n; i++) {
        if (!/^(~|\^|@(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\(\))$/.test(x[i])) {
          p += /^[\*0-9]+$/.test(x[i]) ? "[" + x[i] + "]" : "['" + x[i] + "']";
        }
      }
      return p;
    };
    JSONPath.toPointer = function(pointer) {
      var x = pointer, n = x.length;
      var p = "";
      for (var i = 1; i < n; i++) {
        if (!/^(~|\^|@(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\(\))$/.test(x[i])) {
          p += "/" + x[i].toString().replace(/~/g, "~0").replace(/\//g, "~1");
        }
      }
      return p;
    };
    JSONPath.toPathArray = function(expr) {
      var cache = JSONPath.cache;
      if (cache[expr]) {
        return cache[expr].concat();
      }
      var subx = [];
      var normalized = expr.replace(/@(?:null|boolean|number|string|integer|undefined|nonFinite|scalar|array|object|function|other)\(\)/g, ";$&;").replace(/['\[](\??\((?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*?\))['\]](?!(?:[\0-\t\x0B\f\x0E-\u2027\u202A-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])\])/g, function($0, $1) {
        return "[#" + (subx.push($1) - 1) + "]";
      }).replace(/\[["']((?:[\0-&\(-\\\^-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*)["']\]/g, function($0, prop) {
        return "['" + prop.replace(/\./g, "%@%").replace(/~/g, "%%@@%%") + "']";
      }).replace(/~/g, ";~;").replace(/["']?\.["']?(?!(?:[\0-Z\\-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF])*\])|\[["']?/g, ";").replace(/%@%/g, ".").replace(/%%@@%%/g, "~").replace(/(?:;)?(\^+)(?:;)?/g, function($0, ups) {
        return ";" + ups.split("").join(";") + ";";
      }).replace(/;;;|;;/g, ";..;").replace(/;$|'?\]|'$/g, "");
      var exprList = normalized.split(";").map(function(exp) {
        var match = exp.match(/#([0-9]+)/);
        return !match || !match[1] ? exp : subx[match[1]];
      });
      cache[expr] = exprList;
      return cache[expr].concat();
    };
    moveToAnotherArray = function moveToAnotherArray2(source, target, conditionCb) {
      var il = source.length;
      for (var i = 0; i < il; i++) {
        var item = source[i];
        if (conditionCb(item)) {
          target.push(source.splice(i--, 1)[0]);
        }
      }
    };
    jsep.plugins.register(index, plugin);
    SafeEval = {
      /**
       * @param {jsep.Expression} ast
       * @param {Record<string, any>} subs
       */
      evalAst: function evalAst(ast, subs) {
        switch (ast.type) {
          case "BinaryExpression":
          case "LogicalExpression":
            return SafeEval.evalBinaryExpression(ast, subs);
          case "Compound":
            return SafeEval.evalCompound(ast, subs);
          case "ConditionalExpression":
            return SafeEval.evalConditionalExpression(ast, subs);
          case "Identifier":
            return SafeEval.evalIdentifier(ast, subs);
          case "Literal":
            return SafeEval.evalLiteral(ast, subs);
          case "MemberExpression":
            return SafeEval.evalMemberExpression(ast, subs);
          case "UnaryExpression":
            return SafeEval.evalUnaryExpression(ast, subs);
          case "ArrayExpression":
            return SafeEval.evalArrayExpression(ast, subs);
          case "CallExpression":
            return SafeEval.evalCallExpression(ast, subs);
          case "AssignmentExpression":
            return SafeEval.evalAssignmentExpression(ast, subs);
          default:
            throw SyntaxError("Unexpected expression", ast);
        }
      },
      evalBinaryExpression: function evalBinaryExpression(ast, subs) {
        var result = {
          "||": function _(a, b) {
            return a || b();
          },
          "&&": function _(a, b) {
            return a && b();
          },
          "|": function _(a, b) {
            return a | b();
          },
          "^": function _(a, b) {
            return a ^ b();
          },
          "&": function _(a, b) {
            return a & b();
          },
          // eslint-disable-next-line eqeqeq
          "==": function _(a, b) {
            return a == b();
          },
          // eslint-disable-next-line eqeqeq
          "!=": function _(a, b) {
            return a != b();
          },
          "===": function _(a, b) {
            return a === b();
          },
          "!==": function _(a, b) {
            return a !== b();
          },
          "<": function _(a, b) {
            return a < b();
          },
          ">": function _(a, b) {
            return a > b();
          },
          "<=": function _(a, b) {
            return a <= b();
          },
          ">=": function _(a, b) {
            return a >= b();
          },
          "<<": function _(a, b) {
            return a << b();
          },
          ">>": function _(a, b) {
            return a >> b();
          },
          ">>>": function _(a, b) {
            return a >>> b();
          },
          "+": function _(a, b) {
            return a + b();
          },
          "-": function _(a, b) {
            return a - b();
          },
          "*": function _(a, b) {
            return a * b();
          },
          "/": function _(a, b) {
            return a / b();
          },
          "%": function _(a, b) {
            return a % b();
          }
        }[ast.operator](SafeEval.evalAst(ast.left, subs), function() {
          return SafeEval.evalAst(ast.right, subs);
        });
        return result;
      },
      evalCompound: function evalCompound(ast, subs) {
        var last;
        for (var i = 0; i < ast.body.length; i++) {
          if (ast.body[i].type === "Identifier" && ["var", "let", "const"].includes(ast.body[i].name) && ast.body[i + 1] && ast.body[i + 1].type === "AssignmentExpression") {
            i += 1;
          }
          var expr = ast.body[i];
          last = SafeEval.evalAst(expr, subs);
        }
        return last;
      },
      evalConditionalExpression: function evalConditionalExpression(ast, subs) {
        if (SafeEval.evalAst(ast.test, subs)) {
          return SafeEval.evalAst(ast.consequent, subs);
        }
        return SafeEval.evalAst(ast.alternate, subs);
      },
      evalIdentifier: function evalIdentifier(ast, subs) {
        if (ast.name in subs) {
          return subs[ast.name];
        }
        throw ReferenceError("".concat(ast.name, " is not defined"));
      },
      evalLiteral: function evalLiteral(ast) {
        return ast.value;
      },
      evalMemberExpression: function evalMemberExpression(ast, subs) {
        var prop = ast.computed ? SafeEval.evalAst(ast.property) : ast.property.name;
        var obj = SafeEval.evalAst(ast.object, subs);
        var result = obj[prop];
        if (typeof result === "function") {
          return result.bind(obj);
        }
        return result;
      },
      evalUnaryExpression: function evalUnaryExpression(ast, subs) {
        var result = {
          "-": function _(a) {
            return -SafeEval.evalAst(a, subs);
          },
          "!": function _(a) {
            return !SafeEval.evalAst(a, subs);
          },
          "~": function _(a) {
            return ~SafeEval.evalAst(a, subs);
          },
          // eslint-disable-next-line no-implicit-coercion
          "+": function _(a) {
            return +SafeEval.evalAst(a, subs);
          }
        }[ast.operator](ast.argument);
        return result;
      },
      evalArrayExpression: function evalArrayExpression(ast, subs) {
        return ast.elements.map(function(el) {
          return SafeEval.evalAst(el, subs);
        });
      },
      evalCallExpression: function evalCallExpression(ast, subs) {
        var args = ast.arguments.map(function(arg) {
          return SafeEval.evalAst(arg, subs);
        });
        var func = SafeEval.evalAst(ast.callee, subs);
        return func.apply(void 0, _toConsumableArray(args));
      },
      evalAssignmentExpression: function evalAssignmentExpression(ast, subs) {
        if (ast.left.type !== "Identifier") {
          throw SyntaxError("Invalid left-hand side in assignment");
        }
        var id = ast.left.name;
        var value = SafeEval.evalAst(ast.right, subs);
        subs[id] = value;
        return subs[id];
      }
    };
    SafeScript = function() {
      function SafeScript2(expr) {
        _classCallCheck(this, SafeScript2);
        this.code = expr;
        this.ast = jsep(this.code);
      }
      return _createClass(SafeScript2, [{
        key: "runInNewContext",
        value: function runInNewContext(context) {
          var keyMap = _objectSpread2({}, context);
          return SafeEval.evalAst(this.ast, keyMap);
        }
      }]);
    }();
    Script = function() {
      function Script2(expr) {
        _classCallCheck(this, Script2);
        this.code = expr;
      }
      return _createClass(Script2, [{
        key: "runInNewContext",
        value: function runInNewContext(context) {
          var expr = this.code;
          var keys = Object.keys(context);
          var funcs = [];
          moveToAnotherArray(keys, funcs, function(key) {
            return typeof context[key] === "function";
          });
          var values = keys.map(function(vr) {
            return context[vr];
          });
          var funcString = funcs.reduce(function(s, func) {
            var fString = context[func].toString();
            if (!/function/.test(fString)) {
              fString = "function " + fString;
            }
            return "var " + func + "=" + fString + ";" + s;
          }, "");
          expr = funcString + expr;
          if (!/(["'])use strict\1/.test(expr) && !keys.includes("arguments")) {
            expr = "var arguments = undefined;" + expr;
          }
          expr = expr.replace(/;[\t-\r \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000\uFEFF]*$/, "");
          var lastStatementEnd = expr.lastIndexOf(";");
          var code = lastStatementEnd > -1 ? expr.slice(0, lastStatementEnd + 1) + " return " + expr.slice(lastStatementEnd + 1) : " return " + expr;
          return _construct(Function, keys.concat([code])).apply(void 0, _toConsumableArray(values));
        }
      }]);
    }();
    JSONPath.prototype.vm = {
      Script
    };
    JSONPath.prototype.safeVm = {
      Script: SafeScript
    };
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/get-value.js
var require_get_value = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/get-value.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValue = void 0;
    var jsonpath_plus_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var getValue = (object, path) => {
      if (!path || !path.startsWith("$")) {
        throw new Error("Invalid path provided for getValue");
      }
      const result = (0, jsonpath_plus_1.JSONPath)({ path, json: object });
      return result.length > 0 ? result[0] : void 0;
    };
    exports.getValue = getValue;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/get-entries.js
var require_get_entries = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/get-entries.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getEntries = void 0;
    var jsonpath_plus_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var getEntries = (object, next) => {
      if (object === null || object === void 0) {
        return;
      }
      const isSimpleValue = (value) => typeof value !== "object" || value === null;
      const paths = (0, jsonpath_plus_1.JSONPath)({
        path: "$..*",
        json: object,
        resultType: "path"
      }).filter((path) => {
        const value = (0, jsonpath_plus_1.JSONPath)({ path, json: object, wrap: false });
        return isSimpleValue(value) || Array.isArray(value) && value.length > 0;
      });
      const emittedPaths = [];
      paths.forEach((path) => {
        const jsonPath = path.replace(/\[\d+]/g, "[*]");
        const values = (0, jsonpath_plus_1.JSONPath)({ path: jsonPath, json: object });
        const nonObjectValues = values.filter(isSimpleValue);
        if (nonObjectValues.length === 0) {
          return;
        }
        const normalizedPath = jsonPath.replace(/\['(\w+)'\]/g, ".$1").replace(/^\$/, "$");
        if (emittedPaths.includes(normalizedPath)) {
          return;
        }
        if (normalizedPath.endsWith("[*]")) {
          next(normalizedPath.replace(/\[\*]$/, ""), nonObjectValues, true);
        } else {
          next(normalizedPath, nonObjectValues, false);
        }
        emittedPaths.push(normalizedPath);
      });
    };
    exports.getEntries = getEntries;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/is-simple-value.js
var require_is_simple_value = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/is-simple-value.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.isSimpleValue = void 0;
    var isSimpleValue = (value) => {
      return typeof value === "number" || typeof value === "string" || typeof value === "boolean";
    };
    exports.isSimpleValue = isSimpleValue;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/operator-config.js
var require_operator_config = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/operator-config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OPERATOR_CONFIG = void 0;
    var SIMPLE_ARRAY_OPERATOR_CONFIG = {
      contains: (value, config) => {
        return config.every((val) => value.includes(val));
      },
      isContainedBy: (value, config) => {
        return value.every((val) => config.includes(val));
      },
      overlap: (value, config) => {
        return value.some((val) => config.includes(val));
      },
      notContains: (value, config) => {
        return !config.every((val) => value.includes(val));
      },
      notContainedBy: (value, config) => {
        return !value.every((val) => config.includes(val));
      },
      notOverlap: (value, config) => {
        return !value.some((val) => config.includes(val));
      }
    };
    exports.OPERATOR_CONFIG = {
      string: {
        oneOf: (value, config) => config.includes(value),
        matchesAll: (value, config) => {
          return config.every((pattern) => {
            const regex = new RegExp(pattern);
            return regex.test(value);
          });
        },
        matchesAny: (value, config) => {
          return config.some((pattern) => {
            const regex = new RegExp(pattern);
            return regex.test(value);
          });
        }
      },
      number: {
        eq: (value, config) => value === config,
        gt: (value, config) => value > config,
        gte: (value, config) => value >= config,
        lt: (value, config) => value < config,
        lte: (value, config) => value <= config
      },
      boolean: {
        eq: (value, config) => value === config
      },
      "Array<string>": SIMPLE_ARRAY_OPERATOR_CONFIG,
      "Array<number>": SIMPLE_ARRAY_OPERATOR_CONFIG,
      "Array<boolean>": SIMPLE_ARRAY_OPERATOR_CONFIG
    };
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/get-values.js
var require_get_values = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/get-values.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getValues = void 0;
    var jsonpath_plus_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var getValues = (object, path) => {
      if (!path || !path.startsWith("$")) {
        throw new Error("Invalid path provided for getValues");
      }
      return (0, jsonpath_plus_1.JSONPath)({ path, json: object });
    };
    exports.getValues = getValues;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/detect-property-data-type.js
var require_detect_property_data_type = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/detect-property-data-type.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.detectPropertyDataType = void 0;
    var detectPropertyDataType = (value) => {
      if (Array.isArray(value)) {
        if (value.length === 0) {
          return null;
        }
        const elementType = typeof value[0];
        if (elementType === "string" || elementType === "number" || elementType === "boolean") {
          return `Array<${elementType}>`;
        } else if (elementType === "object") {
          return null;
        } else {
          throw new Error("Unsupported value type. Only array of strings, numbers, or booleans are supported. Objects are ignored.");
        }
      } else {
        return typeof value;
      }
    };
    exports.detectPropertyDataType = detectPropertyDataType;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/process-property.js
var require_process_property = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/process-property.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.processProperty = void 0;
    var operator_config_1 = require_operator_config();
    var get_values_1 = require_get_values();
    var detect_property_data_type_1 = require_detect_property_data_type();
    var processProperty = (entity, operatorConfig, key) => {
      const properties = (0, get_values_1.getValues)(entity, key);
      if (properties.length === 0) {
        return {
          success: false,
          value: properties,
          property: key,
          operatorConfig
        };
      }
      const result = properties.some((property) => {
        const propertyType = (0, detect_property_data_type_1.detectPropertyDataType)(property);
        if (propertyType !== operatorConfig.type) {
          return false;
        }
        return operator_config_1.OPERATOR_CONFIG[operatorConfig.type][operatorConfig.operator](property, operatorConfig.value);
      });
      return {
        success: result,
        value: properties,
        property: key,
        operatorConfig
      };
    };
    exports.processProperty = processProperty;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/update-value.js
var require_update_value = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/update-value.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.updateValue = void 0;
    var jsonpath_plus_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var updateValue = (object, path, patch) => {
      if (!path || !path.startsWith("$")) {
        throw new Error("Invalid path provided for updateValue");
      }
      (0, jsonpath_plus_1.JSONPath)({
        path,
        json: object,
        resultType: "all",
        callback: (result) => {
          const updatedValue = patch(result.value);
          const parent = result.parent;
          const parentProperty = result.parentProperty;
          if (parent && parentProperty !== void 0) {
            parent[parentProperty] = updatedValue;
          }
        }
      });
      return object;
    };
    exports.updateValue = updateValue;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/create-property-if-doest-exist.js
var require_create_property_if_doest_exist = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/create-property-if-doest-exist.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createPropertyIfDoesntExist = void 0;
    var createPropertyIfDoesntExist = (object, path, defaultValue) => {
      if (!path || !path.startsWith("$.")) {
        throw new Error("Invalid JSONPath provided for createPropertyIfDoesntExistJsonPath");
      }
      const newObj = JSON.parse(JSON.stringify(object));
      const normalizedPath = path.slice(2);
      const segments = normalizedPath.split(".").filter((segment) => segment !== "");
      const createRecursive = (obj, segs) => {
        if (segs.length === 0) {
          return;
        }
        const currentSegment = segs[0];
        const remainingSegments = segs.slice(1);
        if (currentSegment.endsWith("[*]")) {
          const arrayKey = currentSegment.slice(0, -3);
          if (!Array.isArray(obj[arrayKey])) {
            obj[arrayKey] = [];
          }
          if (remainingSegments.length === 0) {
            obj[arrayKey].push(defaultValue);
          } else {
            if (obj[arrayKey].length === 0) {
              obj[arrayKey].push({});
            }
            obj[arrayKey].forEach((item) => createRecursive(item, remainingSegments));
          }
        } else if (/\[\d+\]$/.test(currentSegment)) {
          const match = currentSegment.match(/(.*?)\[(\d+)\]$/);
          if (match) {
            const arrayKey = match[1];
            const index2 = parseInt(match[2], 10);
            if (!Array.isArray(obj[arrayKey])) {
              obj[arrayKey] = [];
            }
            while (obj[arrayKey].length <= index2) {
              obj[arrayKey].push({});
            }
            createRecursive(obj[arrayKey][index2], remainingSegments);
          }
        } else {
          if (typeof obj[currentSegment] === "undefined") {
            obj[currentSegment] = remainingSegments.length === 0 ? defaultValue : {};
          }
          createRecursive(obj[currentSegment], remainingSegments);
        }
      };
      createRecursive(newObj, segments);
      return newObj;
    };
    exports.createPropertyIfDoesntExist = createPropertyIfDoesntExist;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/make-inline-key.js
var require_make_inline_key = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/make-inline-key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.makeInlineKey = void 0;
    var makeInlineKey = (key) => {
      return `$['${key}']`;
    };
    exports.makeInlineKey = makeInlineKey;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/check-if-requirements-fits-object.js
var require_check_if_requirements_fits_object = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/check-if-requirements-fits-object.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.checkIfRequirementsFitsObject = void 0;
    var process_property_1 = require_process_property();
    var make_inline_key_1 = require_make_inline_key();
    var checkIfRequirementsFitsObject = (requirementGroups, target, mode = "properties") => {
      if (requirementGroups.length === 0) {
        return true;
      }
      for (const requirementGroup of requirementGroups) {
        let groupSuccess = true;
        for (const requirement of requirementGroup.elements) {
          const result = (0, process_property_1.processProperty)(target, requirement.filter, mode === "properties" ? (0, make_inline_key_1.makeInlineKey)(requirement.path) : requirement.path);
          if (!result.success) {
            groupSuccess = false;
            break;
          }
        }
        if (groupSuccess) {
          return true;
        }
      }
      return false;
    };
    exports.checkIfRequirementsFitsObject = checkIfRequirementsFitsObject;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/get-properties.js
var require_get_properties = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/get-properties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getProperties = void 0;
    var is_simple_value_1 = require_is_simple_value();
    var get_entries_1 = require_get_entries();
    var getProperties = (object) => {
      const result = [];
      (0, get_entries_1.getEntries)(object, (path, values, isArray) => {
        const validValues = values.filter((value) => (0, is_simple_value_1.isSimpleValue)(value));
        if (validValues.length === 0) {
          return;
        }
        const firstValueDataType = typeof validValues[0];
        const scrimLangDataType = isArray ? `Array<${firstValueDataType}>` : firstValueDataType;
        const uniqueValues = [...new Set(validValues)];
        result.push({
          key: path,
          strict: false,
          type: "",
          uses: 0,
          dataType: scrimLangDataType,
          values: uniqueValues
        });
      });
      return result;
    };
    exports.getProperties = getProperties;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/validatePath.js
var require_validatePath = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/validatePath.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.validatePath = void 0;
    var jsonpath_plus_1 = (init_index_browser_esm(), __toCommonJS(index_browser_esm_exports));
    var validatePath = (path) => {
      if (!path || !path.startsWith("$")) {
        return "Invalid path provided";
      }
      if (path.includes(".*")) {
        return "Inline wildcard is not supported. Please use [*] instead";
      }
      try {
        const nodes = jsonpath_plus_1.JSONPath.toPathArray(path);
        for (const node of nodes) {
          if (typeof node === "string") {
            if (node.includes("..")) {
              return "Descendant scope is not supported";
            }
            if (node.match(/\(\?\(/)) {
              return `Script expressions are not supported (${node})`;
            }
            if (node.match(/:/)) {
              return `Slice expressions are not supported (${node})`;
            }
            if (node.match(/\?\(/)) {
              return `Filter expressions are not supported (${node})`;
            }
            if (node.match(/,|\[|\]/)) {
              return `Union expressions are not supported (${node})`;
            }
            if (node.match(/"|'|`/)) {
              return `String literals are not supported (["${node}"])`;
            }
          }
        }
      } catch (error) {
        const errorMessage = error.message || "";
        if (errorMessage.startsWith("Lexical error")) {
          const match = errorMessage.match(/Lexical error on line \d+\. Unrecognized text\.\n(.+)\n(.+\^)/);
          if (match) {
            const [, pathLine, referenceLine] = match;
            const badChar = pathLine[referenceLine.length - 1];
            return `Lexical error: Unrecognized character "${badChar}" at position ${referenceLine.length}`;
          }
        }
        return "Invalid path provided";
      }
      return true;
    };
    exports.validatePath = validatePath;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/format-key.js
var require_format_key = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/format-key.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.formatScrimlangKey = void 0;
    function formatScrimlangKey(selectedKey, onlyLeaf = false) {
      if (!selectedKey) {
        return "";
      }
      if (onlyLeaf) {
        return selectedKey.split(".").filter((el) => !el.includes("$")).slice(-1)[0];
      }
      return selectedKey.split(".").filter((el) => !el.includes("$")).join(" > ");
    }
    exports.formatScrimlangKey = formatScrimlangKey;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/get-data-type-default.js
var require_get_data_type_default = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/get-data-type-default.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDataTypeDefault = void 0;
    var getDataTypeDefault = (dataType) => {
      switch (dataType) {
        case "number":
          return 0;
        case "boolean":
          return false;
        case "string":
          return "";
        case "Array<boolean>":
          return [false];
        case "Array<number>":
          return [0];
        case "Array<string>":
          return [""];
        default:
          console.warn(`Unknown data type: ${dataType}`);
          return "";
      }
    };
    exports.getDataTypeDefault = getDataTypeDefault;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/get-difference.js
var require_get_difference = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/get-difference.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getDifference = exports.arrayEquals = void 0;
    var get_properties_1 = require_get_properties();
    var arrayEquals = (arr1, arr2) => {
      return arr1.length === arr2.length && arr1.every((value, index2) => value === arr2[index2]);
    };
    exports.arrayEquals = arrayEquals;
    var getDifference = (obj1, obj2) => {
      const obj1Properties = (0, get_properties_1.getProperties)(obj1);
      const obj2Properties = (0, get_properties_1.getProperties)(obj2);
      const newProperties = obj2Properties.filter((prop) => !obj1Properties.some((obj1Property) => obj1Property.key === prop.key));
      const removedProperties = obj1Properties.filter((prop) => !obj2Properties.some((obj2Property) => obj2Property.key === prop.key));
      const changedProperties = obj1Properties.map((obj1Property) => [
        obj1Property,
        obj2Properties.find((obj2Property) => obj2Property.key === obj1Property.key)
      ]).filter(([, obj2Property]) => Boolean(obj2Property)).filter(([obj1Property, obj2Property]) => !(0, exports.arrayEquals)(obj1Property.values, obj2Property.values));
      const changedSimpleProperties = changedProperties.filter(([obj1Property]) => !obj1Property.dataType.includes("Array"));
      const changedArrayProperties = changedProperties.filter(([obj1Property]) => obj1Property.dataType.includes("Array"));
      return [
        ...newProperties.map((prop) => ({
          path: prop.key,
          value: prop.values[0],
          previousValue: void 0
        })),
        ...removedProperties.map((prop) => ({
          path: prop.key,
          value: void 0,
          previousValue: prop.values[0]
        })),
        ...changedSimpleProperties.map(([obj1Property, obj2Property]) => ({
          path: obj1Property.key,
          value: obj2Property.values[0],
          previousValue: obj1Property.values[0]
        })),
        ...changedArrayProperties.map(([obj1Property, obj2Property]) => ({
          path: obj1Property.key,
          value: obj2Property.values,
          previousValue: obj1Property.values
        }))
      ];
    };
    exports.getDifference = getDifference;
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/achievements/IAchievement.dto.js
var require_IAchievement_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/achievements/IAchievement.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/achievements/IAchievementUpdate.dto.js
var require_IAchievementUpdate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/achievements/IAchievementUpdate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/achievements/IPlayerAchievement.dto.js
var require_IPlayerAchievement_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/achievements/IPlayerAchievement.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/achievements/index.js
var require_achievements = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/achievements/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IAchievement_dto(), exports);
    __exportStar(require_IAchievementUpdate_dto(), exports);
    __exportStar(require_IPlayerAchievement_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IAccess.dto.js
var require_IAccess_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IAccess.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IAccount.dto.js
var require_IAccount_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IAccount.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IAuthLogin.dto.js
var require_IAuthLogin_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IAuthLogin.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IAuthUser.dto.js
var require_IAuthUser_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IAuthUser.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IBasicAccount.dto.js
var require_IBasicAccount_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IBasicAccount.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IUpdateAccount.dto.js
var require_IUpdateAccount_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IUpdateAccount.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/ICreateAccount.dto.js
var require_ICreateAccount_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/ICreateAccount.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/ICreateAccountResponse.dto.js
var require_ICreateAccountResponse_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/ICreateAccountResponse.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/ILoginRefresh.dto.js
var require_ILoginRefresh_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/ILoginRefresh.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/ILoginResponse.dto.js
var require_ILoginResponse_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/ILoginResponse.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IForgotPassword.dto.js
var require_IForgotPassword_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IForgotPassword.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IResetPassword.dto.js
var require_IResetPassword_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/IResetPassword.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/index.js
var require_auth = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/auth/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IAccess_dto(), exports);
    __exportStar(require_IAccount_dto(), exports);
    __exportStar(require_IAuthLogin_dto(), exports);
    __exportStar(require_IAuthUser_dto(), exports);
    __exportStar(require_IBasicAccount_dto(), exports);
    __exportStar(require_IUpdateAccount_dto(), exports);
    __exportStar(require_ICreateAccount_dto(), exports);
    __exportStar(require_ICreateAccountResponse_dto(), exports);
    __exportStar(require_ILoginRefresh_dto(), exports);
    __exportStar(require_ILoginResponse_dto(), exports);
    __exportStar(require_IForgotPassword_dto(), exports);
    __exportStar(require_IResetPassword_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/bonus/IBonusClaimResponse.dto.js
var require_IBonusClaimResponse_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/bonus/IBonusClaimResponse.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/bonus/index.js
var require_bonus = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/bonus/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IBonusClaimResponse_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/docs/IDocsSearch.dto.js
var require_IDocsSearch_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/docs/IDocsSearch.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/docs/IDocsSearchHighlightResult.dto.js
var require_IDocsSearchHighlightResult_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/docs/IDocsSearchHighlightResult.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/docs/IDocsSearchResultItem.dto.js
var require_IDocsSearchResultItem_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/docs/IDocsSearchResultItem.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/docs/IDocsSearchSnippetResult.dto.js
var require_IDocsSearchSnippetResult_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/docs/IDocsSearchSnippetResult.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/docs/index.js
var require_docs = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/docs/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IDocsSearch_dto(), exports);
    __exportStar(require_IDocsSearchHighlightResult_dto(), exports);
    __exportStar(require_IDocsSearchResultItem_dto(), exports);
    __exportStar(require_IDocsSearchSnippetResult_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/event/EventFilterParams.dto.js
var require_EventFilterParams_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/event/EventFilterParams.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/event/IPersistentEvent.dto.js
var require_IPersistentEvent_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/event/IPersistentEvent.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/event/IScheduledEvent.dto.js
var require_IScheduledEvent_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/event/IScheduledEvent.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/event/index.js
var require_event = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/event/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_EventFilterParams_dto(), exports);
    __exportStar(require_IPersistentEvent_dto(), exports);
    __exportStar(require_IScheduledEvent_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/integrations/IIntegrations.dto.js
var require_IIntegrations_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/integrations/IIntegrations.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/integrations/IIntegrationCreateRewardResult.dto.js
var require_IIntegrationCreateRewardResult_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/integrations/IIntegrationCreateRewardResult.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/integrations/IIntegrationCreateRewardBatchResult.dto.js
var require_IIntegrationCreateRewardBatchResult_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/integrations/IIntegrationCreateRewardBatchResult.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/integrations/index.js
var require_integrations = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/integrations/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IIntegrations_dto(), exports);
    __exportStar(require_IIntegrationCreateRewardResult_dto(), exports);
    __exportStar(require_IIntegrationCreateRewardBatchResult_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/level/ILevelConfig.dto.js
var require_ILevelConfig_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/level/ILevelConfig.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/level/ILevelUp.dto.js
var require_ILevelUp_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/level/ILevelUp.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/level/ICreateLevelConfig.dto.js
var require_ICreateLevelConfig_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/level/ICreateLevelConfig.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/level/IPlayerLevelDistribution.dto.js
var require_IPlayerLevelDistribution_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/level/IPlayerLevelDistribution.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/level/index.js
var require_level = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/level/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ILevelConfig_dto(), exports);
    __exportStar(require_ILevelUp_dto(), exports);
    __exportStar(require_ICreateLevelConfig_dto(), exports);
    __exportStar(require_IPlayerLevelDistribution_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/perk/IActivatePerk.dto.js
var require_IActivatePerk_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/perk/IActivatePerk.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/perk/IPerkUpdate.dto.js
var require_IPerkUpdate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/perk/IPerkUpdate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/perk/IPerkCreate.dto.js
var require_IPerkCreate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/perk/IPerkCreate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/perk/IPerkLevelCreate.dto.js
var require_IPerkLevelCreate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/perk/IPerkLevelCreate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/perk/index.js
var require_perk = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/perk/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IActivatePerk_dto(), exports);
    __exportStar(require_IPerkUpdate_dto(), exports);
    __exportStar(require_IPerkCreate_dto(), exports);
    __exportStar(require_IPerkLevelCreate_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/permissions/IPermissions.dto.js
var require_IPermissions_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/permissions/IPermissions.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/permissions/index.js
var require_permissions = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/permissions/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IPermissions_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/player/IPlayer.dto.js
var require_IPlayer_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/player/IPlayer.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/player/IResources.dto.js
var require_IResources_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/player/IResources.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/player/IInventoryActivity.js
var require_IInventoryActivity = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/player/IInventoryActivity.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/player/IInventoryActivity.dto.js
var require_IInventoryActivity_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/player/IInventoryActivity.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/player/IUserPropertyCreate.dto.js
var require_IUserPropertyCreate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/player/IUserPropertyCreate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/player/index.js
var require_player = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/player/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IPlayer_dto(), exports);
    __exportStar(require_IResources_dto(), exports);
    __exportStar(require_IInventoryActivity(), exports);
    __exportStar(require_IInventoryActivity_dto(), exports);
    __exportStar(require_IUserPropertyCreate_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IQuestCreate.dto.js
var require_IQuestCreate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IQuestCreate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IQuest.dto.js
var require_IQuest_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IQuest.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IQuestLevel.js
var require_IQuestLevel = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IQuestLevel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.QUEST_LEVELS = void 0;
    exports.QUEST_LEVELS = ["goldTrophy", "featuredTrophy"];
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IQuestStats.dto.js
var require_IQuestStats_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IQuestStats.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IUserChallengeProgress.dto.js
var require_IUserChallengeProgress_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IUserChallengeProgress.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IUserQuest.dto.js
var require_IUserQuest_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IUserQuest.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IQuestStatus.js
var require_IQuestStatus = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IQuestStatus.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IChallengeCreate.dto.js
var require_IChallengeCreate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IChallengeCreate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IChallenge.dto.js
var require_IChallenge_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/IChallenge.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/OccurrencePeriodToString.js
var require_OccurrencePeriodToString = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/OccurrencePeriodToString.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OCCURRENCE_PERIOD_TO_STRING = void 0;
    exports.OCCURRENCE_PERIOD_TO_STRING = {
      0: "One Time",
      1: "Days",
      7: "Weeks"
    };
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/index.js
var require_quest = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IQuestCreate_dto(), exports);
    __exportStar(require_IQuest_dto(), exports);
    __exportStar(require_IQuestLevel(), exports);
    __exportStar(require_IQuestStats_dto(), exports);
    __exportStar(require_IUserChallengeProgress_dto(), exports);
    __exportStar(require_IUserQuest_dto(), exports);
    __exportStar(require_IQuestStatus(), exports);
    __exportStar(require_IChallengeCreate_dto(), exports);
    __exportStar(require_IChallenge_dto(), exports);
    __exportStar(require_OccurrencePeriodToString(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest-statistics/QuestStatistics.dto.js
var require_QuestStatistics_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest-statistics/QuestStatistics.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest-statistics/index.js
var require_quest_statistics = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/quest-statistics/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_QuestStatistics_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IProvider.dto.js
var require_IProvider_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IProvider.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IPublicRedeemOption.dto.js
var require_IPublicRedeemOption_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IPublicRedeemOption.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IRedeemHandleMessageResult.js
var require_IRedeemHandleMessageResult = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IRedeemHandleMessageResult.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IRedeemOptionStatistic.dto.js
var require_IRedeemOptionStatistic_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IRedeemOptionStatistic.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IRedeemSession.dto.js
var require_IRedeemSession_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IRedeemSession.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IRedeemTransaction.dto.js
var require_IRedeemTransaction_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IRedeemTransaction.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IStartTransaction.dto.js
var require_IStartTransaction_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IStartTransaction.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IRedeemUserEventResponse.dto.js
var require_IRedeemUserEventResponse_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IRedeemUserEventResponse.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/PrizeoutConfigurations.js
var require_PrizeoutConfigurations = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/PrizeoutConfigurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/RedeemProviderEvent.dto.js
var require_RedeemProviderEvent_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/RedeemProviderEvent.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/TangibleConfigurations.js
var require_TangibleConfigurations = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/TangibleConfigurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/TestConfig.dto.js
var require_TestConfig_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/TestConfig.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/WebhookConfigurations.js
var require_WebhookConfigurations = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/WebhookConfigurations.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IRedeemExternalEventResponse.dto.js
var require_IRedeemExternalEventResponse_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/IRedeemExternalEventResponse.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/index.js
var require_redeem = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/redeem/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IProvider_dto(), exports);
    __exportStar(require_IPublicRedeemOption_dto(), exports);
    __exportStar(require_IRedeemHandleMessageResult(), exports);
    __exportStar(require_IRedeemOptionStatistic_dto(), exports);
    __exportStar(require_IRedeemSession_dto(), exports);
    __exportStar(require_IRedeemTransaction_dto(), exports);
    __exportStar(require_IStartTransaction_dto(), exports);
    __exportStar(require_IRedeemUserEventResponse_dto(), exports);
    __exportStar(require_PrizeoutConfigurations(), exports);
    __exportStar(require_RedeemProviderEvent_dto(), exports);
    __exportStar(require_TangibleConfigurations(), exports);
    __exportStar(require_TestConfig_dto(), exports);
    __exportStar(require_WebhookConfigurations(), exports);
    __exportStar(require_IRedeemExternalEventResponse_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/reward/IRewardBundle.dto.js
var require_IRewardBundle_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/reward/IRewardBundle.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/reward/IRewardDefinition.js
var require_IRewardDefinition = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/reward/IRewardDefinition.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/reward/IRewardDistributionRequest.js
var require_IRewardDistributionRequest = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/reward/IRewardDistributionRequest.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/reward/IRewardTemplate.js
var require_IRewardTemplate = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/reward/IRewardTemplate.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/reward/IAdminRewardRequest.dto.js
var require_IAdminRewardRequest_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/reward/IAdminRewardRequest.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/reward/index.js
var require_reward = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/reward/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IRewardBundle_dto(), exports);
    __exportStar(require_IRewardDefinition(), exports);
    __exportStar(require_IRewardDistributionRequest(), exports);
    __exportStar(require_IRewardTemplate(), exports);
    __exportStar(require_IAdminRewardRequest_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/IRewardableProperty.dto.js
var require_IRewardableProperty_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/IRewardableProperty.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/IDataTypeEvent.dto.js
var require_IDataTypeEvent_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/IDataTypeEvent.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/IRewarderKeyCreate.dto.js
var require_IRewarderKeyCreate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/IRewarderKeyCreate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/IRewarderKey.dto.js
var require_IRewarderKey_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/IRewarderKey.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/IRewardableEvent.dto.js
var require_IRewardableEvent_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/IRewardableEvent.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/IRewardableType.dto.js
var require_IRewardableType_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/IRewardableType.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/index.js
var require_rewardable = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/rewardable/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IRewardableProperty_dto(), exports);
    __exportStar(require_IDataTypeEvent_dto(), exports);
    __exportStar(require_IRewarderKeyCreate_dto(), exports);
    __exportStar(require_IRewarderKey_dto(), exports);
    __exportStar(require_IRewardableEvent_dto(), exports);
    __exportStar(require_IRewardableType_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/role/IRoles.dto.js
var require_IRoles_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/role/IRoles.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/role/index.js
var require_role = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/role/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IRoles_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/s3/IFileReference.dto.js
var require_IFileReference_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/s3/IFileReference.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/s3/IUploadFile.dto.js
var require_IUploadFile_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/s3/IUploadFile.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/s3/ISavedFile.dto.js
var require_ISavedFile_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/s3/ISavedFile.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ISavedFileDTO = void 0;
    var ISavedFileDTO = class {
    };
    exports.ISavedFileDTO = ISavedFileDTO;
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/s3/IFilePath.dto.js
var require_IFilePath_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/s3/IFilePath.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.IFilePathDTO = void 0;
    var IFilePathDTO = class {
    };
    exports.IFilePathDTO = IFilePathDTO;
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/s3/index.js
var require_s3 = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/s3/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IFileReference_dto(), exports);
    __exportStar(require_IUploadFile_dto(), exports);
    __exportStar(require_ISavedFile_dto(), exports);
    __exportStar(require_IFilePath_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/scheduled-events/IScheduledEventConfig.dto.js
var require_IScheduledEventConfig_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/scheduled-events/IScheduledEventConfig.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/scheduled-events/IScheduledEventConfigCreate.dto.js
var require_IScheduledEventConfigCreate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/scheduled-events/IScheduledEventConfigCreate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/scheduled-events/IScheduledEventConfigUpdate.dto.js
var require_IScheduledEventConfigUpdate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/scheduled-events/IScheduledEventConfigUpdate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/scheduled-events/index.js
var require_scheduled_events = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/scheduled-events/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IScheduledEventConfig_dto(), exports);
    __exportStar(require_IScheduledEventConfigCreate_dto(), exports);
    __exportStar(require_IScheduledEventConfigUpdate_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/staticOverrides/IStaticOverride.dto.js
var require_IStaticOverride_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/staticOverrides/IStaticOverride.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FILE_TYPE = void 0;
    exports.FILE_TYPE = [
      "assets",
      "perks",
      "markdown",
      "user-content"
    ];
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/staticOverrides/index.js
var require_staticOverrides = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/staticOverrides/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IStaticOverride_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/search-item/SearchItem.js
var require_SearchItem = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/search-item/SearchItem.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/search-item/index.js
var require_search_item = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/search-item/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_SearchItem(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/IMeta.dto.js
var require_IMeta_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/IMeta.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/IRate.dto.js
var require_IRate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/IRate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/ITokenRewardsStatistic.dto.js
var require_ITokenRewardsStatistic_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/ITokenRewardsStatistic.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/ITokenRewardsStatisticItem.dto.js
var require_ITokenRewardsStatisticItem_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/ITokenRewardsStatisticItem.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/SignUpStatistic.dto.js
var require_SignUpStatistic_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/SignUpStatistic.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/SignUpStatisticItem.dto.js
var require_SignUpStatisticItem_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/SignUpStatisticItem.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/index.js
var require_statistic = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/statistic/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IMeta_dto(), exports);
    __exportStar(require_IRate_dto(), exports);
    __exportStar(require_ITokenRewardsStatistic_dto(), exports);
    __exportStar(require_ITokenRewardsStatisticItem_dto(), exports);
    __exportStar(require_SignUpStatistic_dto(), exports);
    __exportStar(require_SignUpStatisticItem_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/token/ITokenTransaction.dto.js
var require_ITokenTransaction_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/token/ITokenTransaction.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/token/ITokenCharge.dto.js
var require_ITokenCharge_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/token/ITokenCharge.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/token/ITokenChargeResult.dto.js
var require_ITokenChargeResult_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/token/ITokenChargeResult.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/token/index.js
var require_token = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/token/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ITokenTransaction_dto(), exports);
    __exportStar(require_ITokenCharge_dto(), exports);
    __exportStar(require_ITokenChargeResult_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user/IUser.dto.js
var require_IUser_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user/IUser.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user/IUserForQuest.dto.js
var require_IUserForQuest_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user/IUserForQuest.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user/IUserLink.dto.js
var require_IUserLink_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user/IUserLink.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user/IUserLinkResponse.dto.js
var require_IUserLinkResponse_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user/IUserLinkResponse.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user/index.js
var require_user = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IUser_dto(), exports);
    __exportStar(require_IUserForQuest_dto(), exports);
    __exportStar(require_IUserLink_dto(), exports);
    __exportStar(require_IUserLinkResponse_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-event/IGameEvent.dto.js
var require_IGameEvent_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-event/IGameEvent.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-event/index.js
var require_game_event = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-event/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IGameEvent_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-rules/IGameRule.dto.js
var require_IGameRule_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-rules/IGameRule.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-rules/IGameRuleCreate.dto.js
var require_IGameRuleCreate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-rules/IGameRuleCreate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-rules/IGameRuleUpdate.dto.js
var require_IGameRuleUpdate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-rules/IGameRuleUpdate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-rules/IGameRuleInfo.dto.js
var require_IGameRuleInfo_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-rules/IGameRuleInfo.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-rules/index.js
var require_game_rules = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/game-rules/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IGameRule_dto(), exports);
    __exportStar(require_IGameRuleCreate_dto(), exports);
    __exportStar(require_IGameRuleUpdate_dto(), exports);
    __exportStar(require_IGameRuleInfo_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/i18n/ISupportedLanguages.dto.js
var require_ISupportedLanguages_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/i18n/ISupportedLanguages.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/i18n/ITranslationKey.dto.js
var require_ITranslationKey_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/i18n/ITranslationKey.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/i18n/ITranslationKeySet.dto.js
var require_ITranslationKeySet_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/i18n/ITranslationKeySet.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/i18n/index.js
var require_i18n = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/i18n/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ISupportedLanguages_dto(), exports);
    __exportStar(require_ITranslationKey_dto(), exports);
    __exportStar(require_ITranslationKeySet_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/export-import-admin-data/IAdminPanelExportItems.dto.js
var require_IAdminPanelExportItems_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/export-import-admin-data/IAdminPanelExportItems.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/export-import-admin-data/index.js
var require_export_import_admin_data = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/export-import-admin-data/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IAdminPanelExportItems_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/feedback/IFeedback.dto.js
var require_IFeedback_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/feedback/IFeedback.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/feedback/IFeedbackCreate.dto.js
var require_IFeedbackCreate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/feedback/IFeedbackCreate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/feedback/IFeedbackConfigurations.dto.js
var require_IFeedbackConfigurations_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/feedback/IFeedbackConfigurations.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/feedback/index.js
var require_feedback = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/feedback/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IFeedback_dto(), exports);
    __exportStar(require_IFeedbackCreate_dto(), exports);
    __exportStar(require_IFeedbackConfigurations_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-stat-rule/IUserStatRule.dto.js
var require_IUserStatRule_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-stat-rule/IUserStatRule.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-stat-rule/IUserStatRuleCreate.dto.js
var require_IUserStatRuleCreate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-stat-rule/IUserStatRuleCreate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-stat-rule/index.js
var require_user_stat_rule = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-stat-rule/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IUserStatRule_dto(), exports);
    __exportStar(require_IUserStatRuleCreate_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/system/ISystemConfigurations.dto.js
var require_ISystemConfigurations_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/system/ISystemConfigurations.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/system/ILocalSystemConfigurationsDTO.js
var require_ILocalSystemConfigurationsDTO = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/system/ILocalSystemConfigurationsDTO.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/system/index.js
var require_system = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/system/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ISystemConfigurations_dto(), exports);
    __exportStar(require_ILocalSystemConfigurationsDTO(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/ICreateWorkflow.js
var require_ICreateWorkflow = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/ICreateWorkflow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/IWorkflowFolder.js
var require_IWorkflowFolder = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/IWorkflowFolder.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/IWorkflow.js
var require_IWorkflow = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/IWorkflow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/IPatchWorkflow.js
var require_IPatchWorkflow = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/IPatchWorkflow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/IPublishWorkflow.js
var require_IPublishWorkflow = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/IPublishWorkflow.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/IWorkflowVersion.js
var require_IWorkflowVersion = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/IWorkflowVersion.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/IWorkflowAction.js
var require_IWorkflowAction = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/IWorkflowAction.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/index.js
var require_workflows = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/workflows/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ICreateWorkflow(), exports);
    __exportStar(require_IWorkflowFolder(), exports);
    __exportStar(require_IWorkflow(), exports);
    __exportStar(require_IPatchWorkflow(), exports);
    __exportStar(require_IPublishWorkflow(), exports);
    __exportStar(require_IWorkflowVersion(), exports);
    __exportStar(require_IWorkflowAction(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/widgets/IUserWidget.dto.js
var require_IUserWidget_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/widgets/IUserWidget.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/widgets/ObjectSchema.dto.js
var require_ObjectSchema_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/widgets/ObjectSchema.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/widgets/index.js
var require_widgets = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/widgets/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IUserWidget_dto(), exports);
    __exportStar(require_ObjectSchema_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/ActivatePerkResponse.js
var require_ActivatePerkResponse = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/ActivatePerkResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/Level.js
var require_Level = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/Level.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/IAchievement.js
var require_IAchievement = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/IAchievement.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/IPerkConfig.js
var require_IPerkConfig = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/IPerkConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/IPlayerAchievement.js
var require_IPlayerAchievement = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/IPlayerAchievement.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/IUserFetchParams.js
var require_IUserFetchParams = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/IUserFetchParams.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.OrderByTypeOptions = void 0;
    exports.OrderByTypeOptions = ["DESC", "ASC"];
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/SelfResponse.js
var require_SelfResponse = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/SelfResponse.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/IUserPerk.js
var require_IUserPerk = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/IUserPerk.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/LanguageBundle.js
var require_LanguageBundle = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/LanguageBundle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/Rewardable.js
var require_Rewardable = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/Rewardable.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/UserProperties.js
var require_UserProperties = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/UserProperties.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.CustomUserPropertyTypes = void 0;
    exports.CustomUserPropertyTypes = ["string", "number", "boolean"];
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/RedeemTransactionLogs.js
var require_RedeemTransactionLogs = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/RedeemTransactionLogs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/rewards/RewardType.js
var require_RewardType = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/rewards/RewardType.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/rewards/Reward.js
var require_Reward = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/rewards/Reward.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/rewards/IRewardBundle.js
var require_IRewardBundle = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/rewards/IRewardBundle.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/rewards/index.js
var require_rewards = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/rewards/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_RewardType(), exports);
    __exportStar(require_Reward(), exports);
    __exportStar(require_IRewardBundle(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/TextNode.js
var require_TextNode = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/TextNode.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/scrim-lang-requirement/IScrimLangRequirement.js
var require_IScrimLangRequirement = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/scrim-lang-requirement/IScrimLangRequirement.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/scrim-lang-requirement/IScrimLangRequirementGroup.js
var require_IScrimLangRequirementGroup = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/scrim-lang-requirement/IScrimLangRequirementGroup.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/scrim-lang-requirement/IScrimLangRequirementProgress.js
var require_IScrimLangRequirementProgress = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/scrim-lang-requirement/IScrimLangRequirementProgress.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/scrim-lang-requirement/IScrimLangRequirementsProgressOptions.js
var require_IScrimLangRequirementsProgressOptions = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/scrim-lang-requirement/IScrimLangRequirementsProgressOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/scrim-lang-requirement/IScrimLangRequirementsProgressResult.js
var require_IScrimLangRequirementsProgressResult = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/scrim-lang-requirement/IScrimLangRequirementsProgressResult.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/scrim-lang-requirement/index.js
var require_scrim_lang_requirement = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/scrim-lang-requirement/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IScrimLangRequirement(), exports);
    __exportStar(require_IScrimLangRequirementGroup(), exports);
    __exportStar(require_IScrimLangRequirementProgress(), exports);
    __exportStar(require_IScrimLangRequirementsProgressOptions(), exports);
    __exportStar(require_IScrimLangRequirementsProgressResult(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/index.js
var require_entities = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/entities/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ActivatePerkResponse(), exports);
    __exportStar(require_Level(), exports);
    __exportStar(require_IAchievement(), exports);
    __exportStar(require_IPerkConfig(), exports);
    __exportStar(require_IPlayerAchievement(), exports);
    __exportStar(require_IUserFetchParams(), exports);
    __exportStar(require_SelfResponse(), exports);
    __exportStar(require_IUserPerk(), exports);
    __exportStar(require_LanguageBundle(), exports);
    __exportStar(require_Rewardable(), exports);
    __exportStar(require_UserProperties(), exports);
    __exportStar(require_RedeemTransactionLogs(), exports);
    __exportStar(require_rewards(), exports);
    __exportStar(require_TextNode(), exports);
    __exportStar(require_scrim_lang_requirement(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/challengeProgressEngines.js
var require_challengeProgressEngines = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/challengeProgressEngines.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/regions.js
var require_regions = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/regions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/redeemOptions.js
var require_redeemOptions = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/redeemOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RedeemProviderTypesMap = exports.RedeemProviderTypes = exports.RedeemProviders = void 0;
    exports.RedeemProviders = ["prizeout", "webhook", "tangible"];
    exports.RedeemProviderTypes = [
      "prizeout",
      "currency conversion",
      "physical",
      "digital"
    ];
    exports.RedeemProviderTypesMap = {
      prizeout: "prizeout",
      "currency conversion": "webhook",
      physical: "tangible",
      digital: "tangible"
    };
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/progressOptions.js
var require_progressOptions = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/progressOptions.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PROGRESS_OPTIONS = void 0;
    exports.PROGRESS_OPTIONS = [
      "Waking up wild lamas",
      "Throwing mushrooms in mario",
      "Building robots",
      "Analyzing past mistakes",
      "Passing the Turing test",
      "Completing the helicopter quest",
      "Building home from dirt",
      "Speedrunning video games",
      "Exploring the quantum world",
      "Simulating ecological systems",
      "Developing error correction codes",
      "Opening cases in CS:GO",
      "Making games in Unity",
      "Building a house in Minecraft",
      "Playing with a green cat in purple glasses",
      "Hiring developers for a startup",
      "Making a game in 48 hours"
    ];
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/defaultValues.js
var require_defaultValues = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/defaultValues.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.DefaultValues = exports.iconDimensionsMap = exports.DefaultValuesKeys = void 0;
    exports.DefaultValuesKeys = [
      "howItWorksPage",
      "goldQuests",
      "featuredQuests",
      "genericQuest",
      "coinsIcon",
      "perksBadge1",
      "perksBadge2",
      "perksBadge3",
      "perksBadge4",
      "perksBadge5",
      "perksLevel1",
      "perksLevel2",
      "perksLevel3",
      "perksLevel4",
      "perksLevel5",
      "image",
      "rewardsNone",
      "rewardsPerk",
      "rewardsUserStat",
      "rewardsExternal",
      "currency"
    ];
    exports.iconDimensionsMap = {
      gameRuleIcon: {
        width: 128,
        height: 128
      },
      statRequirementIcon: {
        width: 128,
        height: 128
      },
      achievementPresentationStep: {
        width: 256,
        height: 256
      },
      questIcon: {
        width: 256,
        height: 256
      },
      perkIcon: {
        width: 512,
        height: 512
      },
      userPropertyRewardIcon: {
        width: 128,
        height: 128
      },
      redeemProviderImage: {
        width: 256,
        height: 256
      },
      redeemProviderCurrencyIcon: {
        width: 256,
        height: 256
      },
      default: {
        width: 256,
        height: 256
      },
      max: {
        width: 1024,
        height: 1024
      }
    };
    exports.DefaultValues = {
      assets: {
        goldQuests: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/trophy/gold-quests.png",
          provider: "s3",
          title: "Golden Trophy",
          secondaryTitle: "Users get this Trophy for completing golden quests",
          category: "Quests"
        },
        featuredQuests: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/trophy/featured-quests.png",
          provider: "s3",
          title: "Featured Trophy",
          secondaryTitle: "Users get this Trophy for completing featured quests",
          category: "Quests"
        },
        genericQuest: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/trophy/generic-quest.png",
          provider: "s3",
          title: "Generic Quest",
          secondaryTitle: "Generic quest image for quests",
          category: "Quests"
        },
        coinsIcon: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/coins-icon.png",
          provider: "s3",
          title: "Tokens",
          secondaryTitle: "Used as icon for tokens everywhere",
          category: "Money"
        },
        currency: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Currency.svg",
          provider: "s3",
          title: "Currency",
          secondaryTitle: "Used for any other currency outside of the loyalty program.",
          category: "Money"
        },
        perksBadge1: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Perks/Badges/Common.svg",
          provider: "s3",
          title: "Common Perk Badge",
          secondaryTitle: "Used as a badge for common perks.",
          category: "Perk Badges"
        },
        perksBadge2: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Perks/Badges/Uncommon.svg",
          provider: "s3",
          title: "Uncommon Perk Badge",
          secondaryTitle: "Used as a badge for uncommon perks.",
          category: "Perk Badges"
        },
        perksBadge3: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Perks/Badges/Rare.svg",
          provider: "s3",
          title: "Rare Perk Badge",
          secondaryTitle: "Used as a badge for rare perks.",
          category: "Perk Badges"
        },
        perksBadge4: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Perks/Badges/Epic.svg",
          provider: "s3",
          title: "Epic Perk Badge",
          secondaryTitle: "Used as a badge for epic perks.",
          category: "Perk Badges"
        },
        perksBadge5: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Perks/Badges/Legendary.svg",
          provider: "s3",
          title: "Legendary Perk Badge",
          secondaryTitle: "Used as a badge for perks image.",
          category: "Perk Badges"
        },
        perksLevel1: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Perks/Levels/Common.svg",
          provider: "s3",
          title: "Common Perk",
          secondaryTitle: "Used as icon for common perks.",
          category: "Perk Levels"
        },
        perksLevel2: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Perks/Levels/Uncommon.svg",
          provider: "s3",
          title: "Uncommon Perk",
          secondaryTitle: "Used as icon for uncommon perks.",
          category: "Perk Levels"
        },
        perksLevel3: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Perks/Levels/Rare.svg",
          provider: "s3",
          title: "Rare Perk",
          secondaryTitle: "Used as icon for rare perks.",
          category: "Perk Levels"
        },
        perksLevel4: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Perks/Levels/Epic.svg",
          provider: "s3",
          title: "Epic Perk",
          secondaryTitle: "Used as icon for epic perks.",
          category: "Perk Levels"
        },
        perksLevel5: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Perks/Levels/Legendary.svg",
          provider: "s3",
          title: "Legendary Perk",
          secondaryTitle: "Used as icon for legendary perks.",
          category: "Perk Levels"
        },
        rewardsNone: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Rewards/None.svg",
          provider: "s3",
          title: "None Reward",
          secondaryTitle: "Used as icon none rewards.",
          category: "Rewards"
        },
        rewardsPerk: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Perks/Icons/Mystery.svg",
          provider: "s3",
          title: "Perk Reward",
          secondaryTitle: "Used as icon for perk rewards.",
          category: "Rewards"
        },
        rewardsUserStat: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Rewards/UserStat.svg",
          provider: "s3",
          title: "Game Element Reward",
          secondaryTitle: "Used as icon for game element rewards.",
          category: "Rewards"
        },
        rewardsExternal: {
          value: "https://white-label-default-dark-mode.s3.us-east-2.amazonaws.com/Rewards/External.svg",
          provider: "s3",
          title: "External Reward",
          secondaryTitle: "Used as icon for external rewards.",
          category: "Rewards"
        }
      },
      markdown: {
        howItWorksPage: {
          value: "# Welcome to Loyalty Program!\n## 🌟 Earn Rewards!\nEarn Rewards is simple. You do actions in the app and you receive coins. You can redeem coins and get cool things.\n\n## 🥇 Complete Quests!\nEarn coins by completing quests. Daily, weekly, special, and random quests will wait for you in the season.  \nEvery day new quests are coming! Keep following\n\n## 🚀 Level Up!\nGrow your loyalty status together and earn even more valuable rewards.\n\n## 🎁 Win Perks!\nEarn your special benefits with perks. You can activate a limited amount of perks at the same time. Level up perks and unlock even more strong exclusive benefits \n\n# Are You Ready?\nJoin us now and start your adventure with quests, levels, and perks that await!",
          provider: null,
          title: null,
          secondaryTitle: null,
          category: null
        }
      },
      perks: {},
      "user-content": {}
    };
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/staticOverrideProviders.js
var require_staticOverrideProviders = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/staticOverrideProviders.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/systemPaths.js
var require_systemPaths = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/systemPaths.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.SYSTEM_PATHS = void 0;
    exports.SYSTEM_PATHS = [
      {
        key: "$.level",
        type: "",
        strict: true,
        values: [],
        dataType: "number",
        uses: -1,
        label: "Level",
        description: "system property"
      },
      {
        key: "$.experience",
        type: "",
        strict: true,
        values: [],
        dataType: "number",
        uses: -1,
        label: "Experience",
        description: "system property"
      },
      {
        key: "$.goldTrophy",
        type: "",
        strict: true,
        values: [],
        dataType: "number",
        uses: -1,
        label: "Gold Trophy",
        description: "system property"
      },
      {
        key: "$.featuredTrophy",
        type: "",
        strict: true,
        values: [],
        dataType: "number",
        uses: -1,
        label: "Featured Trophy",
        description: "system property"
      },
      {
        key: "$.perkSlots",
        type: "",
        strict: true,
        values: [],
        dataType: "number",
        uses: -1,
        label: "Perk Slots"
      },
      {
        key: "$.tags",
        type: "",
        strict: true,
        values: [],
        dataType: "Array<string>",
        uses: -1,
        label: "Tags",
        description: "system property"
      },
      {
        key: "$.questsCompleted",
        type: "",
        strict: true,
        values: [],
        dataType: "number",
        uses: -1,
        label: "Amount of completed quests",
        description: "system property"
      },
      {
        key: "$.questsCompletedIds",
        type: "",
        strict: true,
        values: [],
        dataType: "Array<string>",
        uses: -1,
        label: "List of completed quest ids",
        description: "system property"
      },
      {
        key: "$.questsAcceptedIds",
        type: "",
        strict: true,
        values: [],
        dataType: "Array<string>",
        uses: -1,
        label: "List of accepted quest ids",
        description: "system property"
      },
      {
        key: "$.bonusClaim.daily",
        type: "",
        strict: true,
        values: [],
        dataType: "boolean",
        uses: -1,
        label: "Daily Bonus Claim"
      },
      {
        key: "$.totalRewardsEarned.primaryReward",
        type: "",
        strict: true,
        values: [],
        dataType: "number",
        uses: -1,
        label: "Total Rewards Earned"
      }
    ];
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/emojiRating.js
var require_emojiRating = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/emojiRating.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultEmojiRatings = void 0;
    exports.defaultEmojiRatings = {
      4: "😍",
      3: "🙂",
      2: "🙁",
      1: "😭"
    };
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/webhooks.js
var require_webhooks = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/webhooks.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebhookOwners = void 0;
    exports.WebhookOwners = ["admin", "workflows"];
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/s3.js
var require_s32 = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/s3.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ALLOWED_MIME_TYPES_FOR_IMAGE_UPLOAD = void 0;
    exports.ALLOWED_MIME_TYPES_FOR_IMAGE_UPLOAD = [
      "image/png",
      "image/svg+xml",
      "image/webp"
    ];
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/userProfileConfig.js
var require_userProfileConfig = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/userProfileConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.USER_DEFAULT_PROFILE = exports.DISPLAY_NAME_ALIAS = exports.UserProfileGroups = void 0;
    exports.UserProfileGroups = {
      SYSTEM: "System Fields",
      CUSTOM: "Custom Fields"
    };
    exports.DISPLAY_NAME_ALIAS = "__displayName";
    exports.USER_DEFAULT_PROFILE = {
      properties: [
        {
          group: exports.UserProfileGroups.SYSTEM,
          alias: exports.DISPLAY_NAME_ALIAS,
          key: "$.properties.__displayName"
        }
      ]
    };
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/index.js
var require_enums = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/enums/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_challengeProgressEngines(), exports);
    __exportStar(require_regions(), exports);
    __exportStar(require_redeemOptions(), exports);
    __exportStar(require_progressOptions(), exports);
    __exportStar(require_defaultValues(), exports);
    __exportStar(require_staticOverrideProviders(), exports);
    __exportStar(require_systemPaths(), exports);
    __exportStar(require_emojiRating(), exports);
    __exportStar(require_webhooks(), exports);
    __exportStar(require_s32(), exports);
    __exportStar(require_userProfileConfig(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/AdminEvents.js
var require_AdminEvents = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/AdminEvents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.AdminEventTypes = void 0;
    exports.AdminEventTypes = [
      "redeemOptionCreated",
      "redeemOptionDeleted",
      "redeemOptionUpdated",
      "createDashboardAccount",
      "deleteDashboardAccount",
      "updateDashboardAccount",
      "feedbackCreated",
      "deleteStaticOverride",
      "fileUploaded",
      "rewardableEventRecordedFromAdminPanel",
      "createUserIfNotExistFromAdminPanel",
      "createRewardableProperty",
      "deleteRewardableProperty",
      "updateRewardableProperty",
      "dataTypeCreated",
      "rewardableDeleted",
      "dataTypeUpdated",
      "createRewarderKey",
      "deleteRewarderKey",
      "achievementCreated",
      "achievementDeleted",
      "achievementUpdated",
      "getTokenRewardsStatistic",
      "levelConfigCreated",
      "levelConfigDeleted",
      "generateLevelUpRequirementTitle",
      "levelConfigUpdated",
      "createGameRule",
      "deleteGameRule",
      "updateGameRule",
      "createPerk",
      "deletePerk",
      "updatePerk",
      "updatePlayerStats",
      "userPropertyCreated",
      "userPropertyDeleted",
      "userPropertyUpdated",
      "userAcceptsQuest",
      "userActivatesPerk",
      "userCancelQuests",
      "userBurnsTokens",
      "userClaimsAchievement",
      "userClaimsDaily",
      "userClaimsQuest",
      "userDeactivatesPerk",
      "getPlayers",
      "userLevelUpsPerk",
      "userLevelsUp",
      "resetPlayer",
      "eventsQueried",
      "questTemplateCreated",
      "questTemplateDeleted",
      "questDescriptionGenerated",
      "questTemplateStatisticRequested",
      "questUnitsGenerated",
      "questTemplateUpdated",
      "rewardTemplateCreated",
      "rewardTemplateDeleted",
      "scheduledEventCreated",
      "scheduledEventDeleted",
      "scheduledEventUpdated",
      "segmentCreated",
      "segmentDeleted",
      "segmentEvaluated",
      "segmentForceRefreshed",
      "segmentUpdated",
      "dynamicPropertyAdded",
      "dynamicPropertyDeleted",
      "dynamicPropertyUpdated",
      "rewardableEventRecorded",
      "rewardableEventRecordedBatch",
      "createUserIfNotExist"
    ];
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/GameEvents.js
var require_GameEvents = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/GameEvents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GameEventTypes = void 0;
    exports.GameEventTypes = [
      "ACHIEVEMENT_REWARD_CLAIMED",
      "CHALLENGE_COMPLETED",
      "CHALLENGE_PROGRESS_UPDATED",
      "DAILY_CLAIMED",
      "DIRECT_REWARD_DISTRIBUTED",
      "LEVEL_UP",
      "PERK_ACTIVATED",
      "PERK_DISABLED",
      "PERK_REWARDED",
      "PERK_UPGRADED",
      "QUEST_ACCEPTED",
      "QUEST_CANCELED",
      "QUEST_CLAIMED",
      "QUEST_COMPLETED",
      "QUEST_LOST",
      "QUEST_PERIOD_COMPLETED",
      "QUEST_STARTED",
      "REDEEM_TRANSACTION_COMPLETED",
      "REWARD_DISTRIBUTED",
      "USER_CHARGE_COMPLETED",
      "USER_CREATED"
    ];
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/ProcessableEvents.js
var require_ProcessableEvents = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/ProcessableEvents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlayerEvents = exports.ProcessableEvents = void 0;
    exports.ProcessableEvents = [
      "rewardable.event",
      "game.events",
      "scheduled.event",
      "property.event",
      "admin.event"
    ];
    exports.PlayerEvents = [
      "rewardable.event",
      "game.events",
      "scheduled.event",
      "property.event"
    ];
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/PropertiesEvents.js
var require_PropertiesEvents = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/PropertiesEvents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/ScheduledEvents.js
var require_ScheduledEvents = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/ScheduledEvents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/ExportEvents.js
var require_ExportEvents = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/ExportEvents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/NotificationsEvents.js
var require_NotificationsEvents = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/NotificationsEvents.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/index.js
var require_events = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/events/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_AdminEvents(), exports);
    __exportStar(require_GameEvents(), exports);
    __exportStar(require_ProcessableEvents(), exports);
    __exportStar(require_PropertiesEvents(), exports);
    __exportStar(require_ScheduledEvents(), exports);
    __exportStar(require_ExportEvents(), exports);
    __exportStar(require_NotificationsEvents(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/externaEvents/ExternalMessage.js
var require_ExternalMessage = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/externaEvents/ExternalMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/externaEvents/RedirectExternalMessage.js
var require_RedirectExternalMessage = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/externaEvents/RedirectExternalMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/externaEvents/ReadyExternalMessage.js
var require_ReadyExternalMessage = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/externaEvents/ReadyExternalMessage.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/externaEvents/index.js
var require_externaEvents = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/externaEvents/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ExternalMessage(), exports);
    __exportStar(require_RedirectExternalMessage(), exports);
    __exportStar(require_ReadyExternalMessage(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/constants.js
var require_constants = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.TEMPLATE_FIELD_FALLBACK_SEGMENT = exports.PLAYER_PROPERTY_PREFIX = void 0;
    exports.PLAYER_PROPERTY_PREFIX = "$.properties.";
    exports.TEMPLATE_FIELD_FALLBACK_SEGMENT = "__fallback__";
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/message/IPlayerInfoGet.request.js
var require_IPlayerInfoGet_request = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/message/IPlayerInfoGet.request.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/message/index.js
var require_message = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/message/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IPlayerInfoGet_request(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/filters/Operators.js
var require_Operators = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/filters/Operators.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/filters/OperationMapping.js
var require_OperationMapping = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/filters/OperationMapping.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.FILTER_PROPERTY_DATA_TYPE_COLORS = exports.FILTER_OPERATOR_MAP = exports.FILTER_OPERATION_MAPPING = exports.FILTER_OPERATION_SIMPLE_ARRAY_MAPPING = void 0;
    exports.FILTER_OPERATION_SIMPLE_ARRAY_MAPPING = [
      "contains",
      "isContainedBy",
      "overlap",
      "notContains",
      "notContainedBy",
      "notOverlap"
    ];
    exports.FILTER_OPERATION_MAPPING = {
      string: ["oneOf", "matchesAll", "matchesAny"],
      number: ["gte", "eq", "gt", "lt", "lte"],
      boolean: ["eq"],
      "Array<string>": exports.FILTER_OPERATION_SIMPLE_ARRAY_MAPPING,
      "Array<number>": exports.FILTER_OPERATION_SIMPLE_ARRAY_MAPPING,
      "Array<boolean>": exports.FILTER_OPERATION_SIMPLE_ARRAY_MAPPING
    };
    exports.FILTER_OPERATOR_MAP = {
      oneOf: { extended: "is (one of)", short: "one of" },
      matchesAll: {
        extended: "string matches all elements from value",
        short: "matches all"
      },
      matchesAny: {
        extended: "string matches any element from value",
        short: "matches any"
      },
      eq: { extended: "is equal to", short: "equal" },
      gt: { extended: "is greater than", short: ">" },
      gte: { extended: "is greater than or equal to", short: "≥" },
      lt: { extended: "is less than", short: "<" },
      lte: { extended: "is less than or equal to", short: "≤" },
      contains: { extended: "contains all of the elements", short: "contains" },
      isContainedBy: {
        extended: "only contains elements from",
        short: "is contained by"
      },
      overlap: { extended: "contains any of the elements", short: "overlap" },
      notContains: {
        extended: "does not contain all of the elements",
        short: "not contains"
      },
      notContainedBy: {
        extended: "contains elements not in",
        short: "not contained by"
      },
      notOverlap: {
        extended: "contains none of the elements",
        short: "not overlap"
      }
    };
    exports.FILTER_PROPERTY_DATA_TYPE_COLORS = {
      string: "#719e72",
      number: "#6bd1c7",
      boolean: "#c49072",
      "Array<string>": "#9572cc",
      "Array<number>": "#d1c76b",
      "Array<boolean>": "#f2855d"
    };
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/filters/index.js
var require_filters = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/filters/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Operators(), exports);
    __exportStar(require_OperationMapping(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/modifiers/Modifier.js
var require_Modifier = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/modifiers/Modifier.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/modifiers/GameRuleLevelSegmentConfig.js
var require_GameRuleLevelSegmentConfig = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/modifiers/GameRuleLevelSegmentConfig.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/modifiers/index.js
var require_modifiers = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/modifiers/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_Modifier(), exports);
    __exportStar(require_GameRuleLevelSegmentConfig(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/pagination/PaginationContainer.js
var require_PaginationContainer = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/pagination/PaginationContainer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/pagination/PaginationMeta.js
var require_PaginationMeta = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/pagination/PaginationMeta.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/pagination/index.js
var require_pagination = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/pagination/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_PaginationContainer(), exports);
    __exportStar(require_PaginationMeta(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/segmentation/ISegment.dto.js
var require_ISegment_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/segmentation/ISegment.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/segmentation/ICreateSegment.dto.js
var require_ICreateSegment_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/segmentation/ICreateSegment.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/segmentation/IUpdateSegment.dto.js
var require_IUpdateSegment_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/segmentation/IUpdateSegment.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/segmentation/ISegmentStats.dto.js
var require_ISegmentStats_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/segmentation/ISegmentStats.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/segmentation/index.js
var require_segmentation = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/segmentation/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_ISegment_dto(), exports);
    __exportStar(require_ICreateSegment_dto(), exports);
    __exportStar(require_IUpdateSegment_dto(), exports);
    __exportStar(require_ISegmentStats_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/webhook/IWebhook.dto.js
var require_IWebhook_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/webhook/IWebhook.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/webhook/ICreateWebhook.dto.js
var require_ICreateWebhook_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/webhook/ICreateWebhook.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/webhook/index.js
var require_webhook = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/webhook/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IWebhook_dto(), exports);
    __exportStar(require_ICreateWebhook_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/api/WebsocketUpdates.js
var require_WebsocketUpdates = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/api/WebsocketUpdates.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.EVENT_INVALIDATION_MAPPING = exports.ScrimmageBaseApiTagTypes = void 0;
    exports.ScrimmageBaseApiTagTypes = [
      "users",
      "perks",
      "userPerks",
      "quests",
      "tokens",
      "config",
      "system",
      "redeem",
      "gameRules",
      "rewards",
      "file-system",
      "achievements",
      "feedback",
      "translations"
    ];
    exports.EVENT_INVALIDATION_MAPPING = {
      LEVEL_UP: ["users", "userPerks", "quests", "tokens"],
      QUEST_COMPLETED: ["quests"],
      QUEST_ACCEPTED: ["quests", "users"],
      QUEST_STARTED: ["quests"],
      QUEST_CANCELED: ["quests"],
      QUEST_CLAIMED: ["quests", "users", "userPerks", "tokens"],
      CHALLENGE_COMPLETED: ["quests"],
      CHALLENGE_PROGRESS_UPDATED: ["quests"],
      PERK_REWARDED: ["userPerks"],
      PERK_ACTIVATED: ["userPerks"],
      PERK_DISABLED: ["userPerks"],
      PERK_UPGRADED: ["userPerks"],
      DAILY_CLAIMED: ["quests", "users", "userPerks", "tokens"],
      QUEST_PERIOD_COMPLETED: ["quests"],
      QUEST_LOST: ["quests"],
      REWARD_DISTRIBUTED: ["quests", "users", "tokens", "userPerks"],
      REDEEM_TRANSACTION_COMPLETED: ["users", "redeem", "tokens"],
      USER_CREATED: [...exports.ScrimmageBaseApiTagTypes],
      USER_CHARGE_COMPLETED: ["users", "tokens"],
      ACHIEVEMENT_REWARD_CLAIMED: [
        "users",
        "tokens",
        "userPerks",
        "quests",
        "achievements"
      ],
      DIRECT_REWARD_DISTRIBUTED: ["quests", "users", "tokens", "userPerks"]
    };
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/api/index.js
var require_api = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/api/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_WebsocketUpdates(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/notifications/INotification.dto.js
var require_INotification_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/notifications/INotification.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/notifications/INotificationCreate.dto.js
var require_INotificationCreate_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/notifications/INotificationCreate.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/notifications/index.js
var require_notifications = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/notifications/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_INotification_dto(), exports);
    __exportStar(require_INotificationCreate_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-profile/IUserProfileConfig.dto.js
var require_IUserProfileConfig_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-profile/IUserProfileConfig.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-profile/IUserProfileProperty.dto.js
var require_IUserProfileProperty_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-profile/IUserProfileProperty.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-profile/IPlayerProfile.dto.js
var require_IPlayerProfile_dto = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-profile/IPlayerProfile.dto.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-profile/index.js
var require_user_profile = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/dto/user-profile/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_IUserProfileConfig_dto(), exports);
    __exportStar(require_IUserProfileProperty_dto(), exports);
    __exportStar(require_IPlayerProfile_dto(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/index.js
var require_dist = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+schemas@1.9.0/node_modules/@scrimmage/schemas/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    __exportStar(require_achievements(), exports);
    __exportStar(require_auth(), exports);
    __exportStar(require_bonus(), exports);
    __exportStar(require_docs(), exports);
    __exportStar(require_event(), exports);
    __exportStar(require_integrations(), exports);
    __exportStar(require_level(), exports);
    __exportStar(require_perk(), exports);
    __exportStar(require_permissions(), exports);
    __exportStar(require_player(), exports);
    __exportStar(require_quest(), exports);
    __exportStar(require_quest_statistics(), exports);
    __exportStar(require_redeem(), exports);
    __exportStar(require_reward(), exports);
    __exportStar(require_rewardable(), exports);
    __exportStar(require_role(), exports);
    __exportStar(require_s3(), exports);
    __exportStar(require_scheduled_events(), exports);
    __exportStar(require_staticOverrides(), exports);
    __exportStar(require_search_item(), exports);
    __exportStar(require_statistic(), exports);
    __exportStar(require_token(), exports);
    __exportStar(require_user(), exports);
    __exportStar(require_game_event(), exports);
    __exportStar(require_game_rules(), exports);
    __exportStar(require_i18n(), exports);
    __exportStar(require_export_import_admin_data(), exports);
    __exportStar(require_feedback(), exports);
    __exportStar(require_user_stat_rule(), exports);
    __exportStar(require_system(), exports);
    __exportStar(require_workflows(), exports);
    __exportStar(require_widgets(), exports);
    __exportStar(require_entities(), exports);
    __exportStar(require_enums(), exports);
    __exportStar(require_events(), exports);
    __exportStar(require_externaEvents(), exports);
    __exportStar(require_constants(), exports);
    __exportStar(require_message(), exports);
    __exportStar(require_filters(), exports);
    __exportStar(require_modifiers(), exports);
    __exportStar(require_pagination(), exports);
    __exportStar(require_quest_statistics(), exports);
    __exportStar(require_s3(), exports);
    __exportStar(require_segmentation(), exports);
    __exportStar(require_webhook(), exports);
    __exportStar(require_api(), exports);
    __exportStar(require_notifications(), exports);
    __exportStar(require_user_profile(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/format-text-node-description.js
var require_format_text_node_description = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/functions/format-text-node-description.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.convertScrimLangRequirementTextNodesToHtml = exports.formatScrimLangRequirementDescription = void 0;
    var schemas_1 = require_dist();
    var format_key_1 = require_format_key();
    var formatScrimLangRequirementDescription = (data) => {
      const textNodes = [];
      data.forEach((filter, filterIndex) => {
        if (filterIndex > 0) {
          textNodes.push({ text: "or", bold: false, color: "textSecondary" });
        }
        filter.elements.forEach((requirement) => {
          var _a;
          const operator = ((_a = schemas_1.FILTER_OPERATOR_MAP[requirement.filter.operator]) === null || _a === void 0 ? void 0 : _a.extended) || requirement.filter.operator;
          const value = Array.isArray(requirement.filter.value) ? requirement.filter.value.join(", ") : requirement.filter.value.toString();
          textNodes.push({
            text: `${(0, format_key_1.formatScrimlangKey)(requirement.path, true)} ${operator} ${value}`,
            bold: false,
            color: "textPrimary"
          });
        });
      });
      return textNodes;
    };
    exports.formatScrimLangRequirementDescription = formatScrimLangRequirementDescription;
    var convertScrimLangRequirementTextNodesToHtml = (textNodes) => {
      if (textNodes.length === 0) {
        return "";
      }
      const listItems = textNodes.map((node) => {
        const boldTag = node.bold ? "strong" : "span";
        return node.text === "or" ? `<${boldTag}>${node.text}</${boldTag}>` : `<li><${boldTag}>${node.text}</${boldTag}></li>`;
      }).join("");
      return `<ul>${listItems}</ul>`;
    };
    exports.convertScrimLangRequirementTextNodesToHtml = convertScrimLangRequirementTextNodesToHtml;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/index.js
var require_src = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/src/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var get_value_1 = require_get_value();
    var get_entries_1 = require_get_entries();
    var is_simple_value_1 = require_is_simple_value();
    var process_property_1 = require_process_property();
    var update_value_1 = require_update_value();
    var create_property_if_doest_exist_1 = require_create_property_if_doest_exist();
    var check_if_requirements_fits_object_1 = require_check_if_requirements_fits_object();
    var get_properties_1 = require_get_properties();
    var get_values_1 = require_get_values();
    var detect_property_data_type_1 = require_detect_property_data_type();
    var validatePath_1 = require_validatePath();
    var format_key_1 = require_format_key();
    var get_data_type_default_1 = require_get_data_type_default();
    var get_difference_1 = require_get_difference();
    var make_inline_key_1 = require_make_inline_key();
    var format_text_node_description_1 = require_format_text_node_description();
    var ScrimLang = {
      getValue: get_value_1.getValue,
      getValues: get_values_1.getValues,
      getEntries: get_entries_1.getEntries,
      isSimpleValue: is_simple_value_1.isSimpleValue,
      makeInlineKey: make_inline_key_1.makeInlineKey,
      checkIfRequirementsFitsObject: check_if_requirements_fits_object_1.checkIfRequirementsFitsObject,
      processProperty: process_property_1.processProperty,
      detectPropertyDataType: detect_property_data_type_1.detectPropertyDataType,
      updateValue: update_value_1.updateValue,
      createPropertyIfDoesntExist: create_property_if_doest_exist_1.createPropertyIfDoesntExist,
      getProperties: get_properties_1.getProperties,
      validatePath: validatePath_1.validatePath,
      formatScrimlangKey: format_key_1.formatScrimlangKey,
      getDataTypeDefault: get_data_type_default_1.getDataTypeDefault,
      getDifference: get_difference_1.getDifference,
      formatScrimLangRequirementDescription: format_text_node_description_1.formatScrimLangRequirementDescription,
      convertScrimLangRequirementTextNodesToHtml: format_text_node_description_1.convertScrimLangRequirementTextNodesToHtml
    };
    exports.default = ScrimLang;
  }
});

// ../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/index.js
var require_dist2 = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+scrimlang@1.2.0/node_modules/@scrimmage/scrimlang/dist/index.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __exportStar = exports && exports.__exportStar || function(m, exports2) {
      for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports2, p)) __createBinding(exports2, m, p);
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ScrimLang = void 0;
    var src_1 = require_src();
    Object.defineProperty(exports, "ScrimLang", { enumerable: true, get: function() {
      return __importDefault(src_1).default;
    } });
    __exportStar(require_src(), exports);
  }
});

// ../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/api/GameRule.service.js
var require_GameRule_service = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/api/GameRule.service.js"(exports) {
    "use strict";
    var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function(k, v) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = exports && exports.__param || function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.GameRuleService = void 0;
    var inversify_1 = require_cjs4();
    var Http_service_1 = require_Http_service();
    var scrimlang_1 = require_dist2();
    var GameRuleService = (
      /** @class */
      function() {
        function GameRuleService2(httpService) {
          this.httpService = httpService;
        }
        GameRuleService2.prototype.getAll = function() {
          return __awaiter(this, void 0, void 0, function() {
            var response;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.httpService.get("p2e/players/@me/game-rules")];
                case 1:
                  response = _a.sent();
                  return [2, response.data];
              }
            });
          });
        };
        GameRuleService2.prototype.isUserQualified = function(user, gameRule) {
          return scrimlang_1.ScrimLang.checkIfRequirementsFitsObject(gameRule.requirements, user.properties);
        };
        GameRuleService2 = __decorate([
          (0, inversify_1.injectable)(),
          __param(0, (0, inversify_1.inject)(Http_service_1.HttpService)),
          __metadata("design:paramtypes", [Http_service_1.HttpService])
        ], GameRuleService2);
        return GameRuleService2;
      }()
    );
    exports.GameRuleService = GameRuleService;
  }
});

// ../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/api/Player.service.js
var require_Player_service = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/api/Player.service.js"(exports) {
    "use strict";
    var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function(k, v) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = exports && exports.__param || function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.PlayerService = void 0;
    var inversify_1 = require_cjs4();
    var Http_service_1 = require_Http_service();
    var PlayerService = (
      /** @class */
      function() {
        function PlayerService2(httpService) {
          this.httpService = httpService;
        }
        PlayerService2.prototype.get = function() {
          return __awaiter(this, void 0, void 0, function() {
            var response;
            return __generator(this, function(_a) {
              switch (_a.label) {
                case 0:
                  return [4, this.httpService.get("p2e/players/@me/resources")];
                case 1:
                  response = _a.sent();
                  return [2, response === null || response === void 0 ? void 0 : response.data];
              }
            });
          });
        };
        PlayerService2 = __decorate([
          (0, inversify_1.injectable)(),
          __param(0, (0, inversify_1.inject)(Http_service_1.HttpService)),
          __metadata("design:paramtypes", [Http_service_1.HttpService])
        ], PlayerService2);
        return PlayerService2;
      }()
    );
    exports.PlayerService = PlayerService;
  }
});

// ../../node_modules/.pnpm/events@3.3.0/node_modules/events/events.js
var require_events2 = __commonJS({
  "../../node_modules/.pnpm/events@3.3.0/node_modules/events/events.js"(exports, module) {
    "use strict";
    var R = typeof Reflect === "object" ? Reflect : null;
    var ReflectApply = R && typeof R.apply === "function" ? R.apply : function ReflectApply2(target, receiver, args) {
      return Function.prototype.apply.call(target, receiver, args);
    };
    var ReflectOwnKeys;
    if (R && typeof R.ownKeys === "function") {
      ReflectOwnKeys = R.ownKeys;
    } else if (Object.getOwnPropertySymbols) {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
      };
    } else {
      ReflectOwnKeys = function ReflectOwnKeys2(target) {
        return Object.getOwnPropertyNames(target);
      };
    }
    function ProcessEmitWarning(warning) {
      if (console && console.warn) console.warn(warning);
    }
    var NumberIsNaN = Number.isNaN || function NumberIsNaN2(value) {
      return value !== value;
    };
    function EventEmitter() {
      EventEmitter.init.call(this);
    }
    module.exports = EventEmitter;
    module.exports.once = once;
    EventEmitter.EventEmitter = EventEmitter;
    EventEmitter.prototype._events = void 0;
    EventEmitter.prototype._eventsCount = 0;
    EventEmitter.prototype._maxListeners = void 0;
    var defaultMaxListeners = 10;
    function checkListener(listener) {
      if (typeof listener !== "function") {
        throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
      }
    }
    Object.defineProperty(EventEmitter, "defaultMaxListeners", {
      enumerable: true,
      get: function() {
        return defaultMaxListeners;
      },
      set: function(arg) {
        if (typeof arg !== "number" || arg < 0 || NumberIsNaN(arg)) {
          throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + ".");
        }
        defaultMaxListeners = arg;
      }
    });
    EventEmitter.init = function() {
      if (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) {
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
      }
      this._maxListeners = this._maxListeners || void 0;
    };
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== "number" || n < 0 || NumberIsNaN(n)) {
        throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + ".");
      }
      this._maxListeners = n;
      return this;
    };
    function _getMaxListeners(that) {
      if (that._maxListeners === void 0)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }
    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return _getMaxListeners(this);
    };
    EventEmitter.prototype.emit = function emit(type) {
      var args = [];
      for (var i = 1; i < arguments.length; i++) args.push(arguments[i]);
      var doError = type === "error";
      var events = this._events;
      if (events !== void 0)
        doError = doError && events.error === void 0;
      else if (!doError)
        return false;
      if (doError) {
        var er;
        if (args.length > 0)
          er = args[0];
        if (er instanceof Error) {
          throw er;
        }
        var err = new Error("Unhandled error." + (er ? " (" + er.message + ")" : ""));
        err.context = er;
        throw err;
      }
      var handler = events[type];
      if (handler === void 0)
        return false;
      if (typeof handler === "function") {
        ReflectApply(handler, this, args);
      } else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          ReflectApply(listeners[i], this, args);
      }
      return true;
    };
    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;
      checkListener(listener);
      events = target._events;
      if (events === void 0) {
        events = target._events = /* @__PURE__ */ Object.create(null);
        target._eventsCount = 0;
      } else {
        if (events.newListener !== void 0) {
          target.emit(
            "newListener",
            type,
            listener.listener ? listener.listener : listener
          );
          events = target._events;
        }
        existing = events[type];
      }
      if (existing === void 0) {
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === "function") {
          existing = events[type] = prepend ? [listener, existing] : [existing, listener];
        } else if (prepend) {
          existing.unshift(listener);
        } else {
          existing.push(listener);
        }
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
          existing.warned = true;
          var w = new Error("Possible EventEmitter memory leak detected. " + existing.length + " " + String(type) + " listeners added. Use emitter.setMaxListeners() to increase limit");
          w.name = "MaxListenersExceededWarning";
          w.emitter = target;
          w.type = type;
          w.count = existing.length;
          ProcessEmitWarning(w);
        }
      }
      return target;
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };
    EventEmitter.prototype.on = EventEmitter.prototype.addListener;
    EventEmitter.prototype.prependListener = function prependListener(type, listener) {
      return _addListener(this, type, listener, true);
    };
    function onceWrapper() {
      if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0)
          return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
      }
    }
    function _onceWrap(target, type, listener) {
      var state = { fired: false, wrapFn: void 0, target, type, listener };
      var wrapped = onceWrapper.bind(state);
      wrapped.listener = listener;
      state.wrapFn = wrapped;
      return wrapped;
    }
    EventEmitter.prototype.once = function once2(type, listener) {
      checkListener(listener);
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
      checkListener(listener);
      this.prependListener(type, _onceWrap(this, type, listener));
      return this;
    };
    EventEmitter.prototype.removeListener = function removeListener(type, listener) {
      var list, events, position, i, originalListener;
      checkListener(listener);
      events = this._events;
      if (events === void 0)
        return this;
      list = events[type];
      if (list === void 0)
        return this;
      if (list === listener || list.listener === listener) {
        if (--this._eventsCount === 0)
          this._events = /* @__PURE__ */ Object.create(null);
        else {
          delete events[type];
          if (events.removeListener)
            this.emit("removeListener", type, list.listener || listener);
        }
      } else if (typeof list !== "function") {
        position = -1;
        for (i = list.length - 1; i >= 0; i--) {
          if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
          }
        }
        if (position < 0)
          return this;
        if (position === 0)
          list.shift();
        else {
          spliceOne(list, position);
        }
        if (list.length === 1)
          events[type] = list[0];
        if (events.removeListener !== void 0)
          this.emit("removeListener", type, originalListener || listener);
      }
      return this;
    };
    EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
    EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
      var listeners, events, i;
      events = this._events;
      if (events === void 0)
        return this;
      if (events.removeListener === void 0) {
        if (arguments.length === 0) {
          this._events = /* @__PURE__ */ Object.create(null);
          this._eventsCount = 0;
        } else if (events[type] !== void 0) {
          if (--this._eventsCount === 0)
            this._events = /* @__PURE__ */ Object.create(null);
          else
            delete events[type];
        }
        return this;
      }
      if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for (i = 0; i < keys.length; ++i) {
          key = keys[i];
          if (key === "removeListener") continue;
          this.removeAllListeners(key);
        }
        this.removeAllListeners("removeListener");
        this._events = /* @__PURE__ */ Object.create(null);
        this._eventsCount = 0;
        return this;
      }
      listeners = events[type];
      if (typeof listeners === "function") {
        this.removeListener(type, listeners);
      } else if (listeners !== void 0) {
        for (i = listeners.length - 1; i >= 0; i--) {
          this.removeListener(type, listeners[i]);
        }
      }
      return this;
    };
    function _listeners(target, type, unwrap) {
      var events = target._events;
      if (events === void 0)
        return [];
      var evlistener = events[type];
      if (evlistener === void 0)
        return [];
      if (typeof evlistener === "function")
        return unwrap ? [evlistener.listener || evlistener] : [evlistener];
      return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
    }
    EventEmitter.prototype.listeners = function listeners(type) {
      return _listeners(this, type, true);
    };
    EventEmitter.prototype.rawListeners = function rawListeners(type) {
      return _listeners(this, type, false);
    };
    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === "function") {
        return emitter.listenerCount(type);
      } else {
        return listenerCount.call(emitter, type);
      }
    };
    EventEmitter.prototype.listenerCount = listenerCount;
    function listenerCount(type) {
      var events = this._events;
      if (events !== void 0) {
        var evlistener = events[type];
        if (typeof evlistener === "function") {
          return 1;
        } else if (evlistener !== void 0) {
          return evlistener.length;
        }
      }
      return 0;
    }
    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
    };
    function arrayClone(arr, n) {
      var copy = new Array(n);
      for (var i = 0; i < n; ++i)
        copy[i] = arr[i];
      return copy;
    }
    function spliceOne(list, index2) {
      for (; index2 + 1 < list.length; index2++)
        list[index2] = list[index2 + 1];
      list.pop();
    }
    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }
    function once(emitter, name) {
      return new Promise(function(resolve, reject) {
        function errorListener(err) {
          emitter.removeListener(name, resolver);
          reject(err);
        }
        function resolver() {
          if (typeof emitter.removeListener === "function") {
            emitter.removeListener("error", errorListener);
          }
          resolve([].slice.call(arguments));
        }
        ;
        eventTargetAgnosticAddListener(emitter, name, resolver, { once: true });
        if (name !== "error") {
          addErrorHandlerIfEventEmitter(emitter, errorListener, { once: true });
        }
      });
    }
    function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
      if (typeof emitter.on === "function") {
        eventTargetAgnosticAddListener(emitter, "error", handler, flags);
      }
    }
    function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
      if (typeof emitter.on === "function") {
        if (flags.once) {
          emitter.once(name, listener);
        } else {
          emitter.on(name, listener);
        }
      } else if (typeof emitter.addEventListener === "function") {
        emitter.addEventListener(name, function wrapListener(arg) {
          if (flags.once) {
            emitter.removeEventListener(name, wrapListener);
          }
          listener(arg);
        });
      } else {
        throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
      }
    }
  }
});

// ../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/commons.js
var require_commons = __commonJS({
  "../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/commons.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.ERROR_PACKET = exports.PACKET_TYPES_REVERSE = exports.PACKET_TYPES = void 0;
    var PACKET_TYPES = /* @__PURE__ */ Object.create(null);
    exports.PACKET_TYPES = PACKET_TYPES;
    PACKET_TYPES["open"] = "0";
    PACKET_TYPES["close"] = "1";
    PACKET_TYPES["ping"] = "2";
    PACKET_TYPES["pong"] = "3";
    PACKET_TYPES["message"] = "4";
    PACKET_TYPES["upgrade"] = "5";
    PACKET_TYPES["noop"] = "6";
    var PACKET_TYPES_REVERSE = /* @__PURE__ */ Object.create(null);
    exports.PACKET_TYPES_REVERSE = PACKET_TYPES_REVERSE;
    Object.keys(PACKET_TYPES).forEach((key) => {
      PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;
    });
    var ERROR_PACKET = { type: "error", data: "parser error" };
    exports.ERROR_PACKET = ERROR_PACKET;
  }
});

// ../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/encodePacket.browser.js
var require_encodePacket_browser = __commonJS({
  "../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/encodePacket.browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encodePacket = void 0;
    exports.encodePacketToBinary = encodePacketToBinary;
    var commons_js_1 = require_commons();
    var withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && Object.prototype.toString.call(Blob) === "[object BlobConstructor]";
    var withNativeArrayBuffer = typeof ArrayBuffer === "function";
    var isView = (obj) => {
      return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj && obj.buffer instanceof ArrayBuffer;
    };
    var encodePacket = ({ type, data }, supportsBinary, callback) => {
      if (withNativeBlob && data instanceof Blob) {
        if (supportsBinary) {
          return callback(data);
        } else {
          return encodeBlobAsBase64(data, callback);
        }
      } else if (withNativeArrayBuffer && (data instanceof ArrayBuffer || isView(data))) {
        if (supportsBinary) {
          return callback(data);
        } else {
          return encodeBlobAsBase64(new Blob([data]), callback);
        }
      }
      return callback(commons_js_1.PACKET_TYPES[type] + (data || ""));
    };
    exports.encodePacket = encodePacket;
    var encodeBlobAsBase64 = (data, callback) => {
      const fileReader = new FileReader();
      fileReader.onload = function() {
        const content = fileReader.result.split(",")[1];
        callback("b" + (content || ""));
      };
      return fileReader.readAsDataURL(data);
    };
    function toArray(data) {
      if (data instanceof Uint8Array) {
        return data;
      } else if (data instanceof ArrayBuffer) {
        return new Uint8Array(data);
      } else {
        return new Uint8Array(data.buffer, data.byteOffset, data.byteLength);
      }
    }
    var TEXT_ENCODER;
    function encodePacketToBinary(packet, callback) {
      if (withNativeBlob && packet.data instanceof Blob) {
        return packet.data.arrayBuffer().then(toArray).then(callback);
      } else if (withNativeArrayBuffer && (packet.data instanceof ArrayBuffer || isView(packet.data))) {
        return callback(toArray(packet.data));
      }
      encodePacket(packet, false, (encoded) => {
        if (!TEXT_ENCODER) {
          TEXT_ENCODER = new TextEncoder();
        }
        callback(TEXT_ENCODER.encode(encoded));
      });
    }
  }
});

// ../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/contrib/base64-arraybuffer.js
var require_base64_arraybuffer = __commonJS({
  "../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/contrib/base64-arraybuffer.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decode = exports.encode = void 0;
    var chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
    var lookup = typeof Uint8Array === "undefined" ? [] : new Uint8Array(256);
    for (let i = 0; i < chars.length; i++) {
      lookup[chars.charCodeAt(i)] = i;
    }
    var encode = (arraybuffer) => {
      let bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = "";
      for (i = 0; i < len; i += 3) {
        base64 += chars[bytes[i] >> 2];
        base64 += chars[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
        base64 += chars[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
        base64 += chars[bytes[i + 2] & 63];
      }
      if (len % 3 === 2) {
        base64 = base64.substring(0, base64.length - 1) + "=";
      } else if (len % 3 === 1) {
        base64 = base64.substring(0, base64.length - 2) + "==";
      }
      return base64;
    };
    exports.encode = encode;
    var decode = (base64) => {
      let bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;
      if (base64[base64.length - 1] === "=") {
        bufferLength--;
        if (base64[base64.length - 2] === "=") {
          bufferLength--;
        }
      }
      const arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);
      for (i = 0; i < len; i += 4) {
        encoded1 = lookup[base64.charCodeAt(i)];
        encoded2 = lookup[base64.charCodeAt(i + 1)];
        encoded3 = lookup[base64.charCodeAt(i + 2)];
        encoded4 = lookup[base64.charCodeAt(i + 3)];
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
      }
      return arraybuffer;
    };
    exports.decode = decode;
  }
});

// ../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/decodePacket.browser.js
var require_decodePacket_browser = __commonJS({
  "../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/decodePacket.browser.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodePacket = void 0;
    var commons_js_1 = require_commons();
    var base64_arraybuffer_js_1 = require_base64_arraybuffer();
    var withNativeArrayBuffer = typeof ArrayBuffer === "function";
    var decodePacket = (encodedPacket, binaryType) => {
      if (typeof encodedPacket !== "string") {
        return {
          type: "message",
          data: mapBinary(encodedPacket, binaryType)
        };
      }
      const type = encodedPacket.charAt(0);
      if (type === "b") {
        return {
          type: "message",
          data: decodeBase64Packet(encodedPacket.substring(1), binaryType)
        };
      }
      const packetType = commons_js_1.PACKET_TYPES_REVERSE[type];
      if (!packetType) {
        return commons_js_1.ERROR_PACKET;
      }
      return encodedPacket.length > 1 ? {
        type: commons_js_1.PACKET_TYPES_REVERSE[type],
        data: encodedPacket.substring(1)
      } : {
        type: commons_js_1.PACKET_TYPES_REVERSE[type]
      };
    };
    exports.decodePacket = decodePacket;
    var decodeBase64Packet = (data, binaryType) => {
      if (withNativeArrayBuffer) {
        const decoded = (0, base64_arraybuffer_js_1.decode)(data);
        return mapBinary(decoded, binaryType);
      } else {
        return { base64: true, data };
      }
    };
    var mapBinary = (data, binaryType) => {
      switch (binaryType) {
        case "blob":
          if (data instanceof Blob) {
            return data;
          } else {
            return new Blob([data]);
          }
        case "arraybuffer":
        default:
          if (data instanceof ArrayBuffer) {
            return data;
          } else {
            return data.buffer;
          }
      }
    };
  }
});

// ../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/index.js
var require_cjs6 = __commonJS({
  "../../node_modules/.pnpm/engine.io-parser@5.2.3/node_modules/engine.io-parser/build/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.decodePayload = exports.decodePacket = exports.encodePayload = exports.encodePacket = exports.protocol = void 0;
    exports.createPacketEncoderStream = createPacketEncoderStream;
    exports.createPacketDecoderStream = createPacketDecoderStream;
    var encodePacket_js_1 = require_encodePacket_browser();
    Object.defineProperty(exports, "encodePacket", { enumerable: true, get: function() {
      return encodePacket_js_1.encodePacket;
    } });
    var decodePacket_js_1 = require_decodePacket_browser();
    Object.defineProperty(exports, "decodePacket", { enumerable: true, get: function() {
      return decodePacket_js_1.decodePacket;
    } });
    var commons_js_1 = require_commons();
    var SEPARATOR = String.fromCharCode(30);
    var encodePayload = (packets, callback) => {
      const length = packets.length;
      const encodedPackets = new Array(length);
      let count = 0;
      packets.forEach((packet, i) => {
        (0, encodePacket_js_1.encodePacket)(packet, false, (encodedPacket) => {
          encodedPackets[i] = encodedPacket;
          if (++count === length) {
            callback(encodedPackets.join(SEPARATOR));
          }
        });
      });
    };
    exports.encodePayload = encodePayload;
    var decodePayload = (encodedPayload, binaryType) => {
      const encodedPackets = encodedPayload.split(SEPARATOR);
      const packets = [];
      for (let i = 0; i < encodedPackets.length; i++) {
        const decodedPacket = (0, decodePacket_js_1.decodePacket)(encodedPackets[i], binaryType);
        packets.push(decodedPacket);
        if (decodedPacket.type === "error") {
          break;
        }
      }
      return packets;
    };
    exports.decodePayload = decodePayload;
    function createPacketEncoderStream() {
      return new TransformStream({
        transform(packet, controller) {
          (0, encodePacket_js_1.encodePacketToBinary)(packet, (encodedPacket) => {
            const payloadLength = encodedPacket.length;
            let header;
            if (payloadLength < 126) {
              header = new Uint8Array(1);
              new DataView(header.buffer).setUint8(0, payloadLength);
            } else if (payloadLength < 65536) {
              header = new Uint8Array(3);
              const view = new DataView(header.buffer);
              view.setUint8(0, 126);
              view.setUint16(1, payloadLength);
            } else {
              header = new Uint8Array(9);
              const view = new DataView(header.buffer);
              view.setUint8(0, 127);
              view.setBigUint64(1, BigInt(payloadLength));
            }
            if (packet.data && typeof packet.data !== "string") {
              header[0] |= 128;
            }
            controller.enqueue(header);
            controller.enqueue(encodedPacket);
          });
        }
      });
    }
    var TEXT_DECODER;
    function totalLength(chunks) {
      return chunks.reduce((acc, chunk) => acc + chunk.length, 0);
    }
    function concatChunks(chunks, size) {
      if (chunks[0].length === size) {
        return chunks.shift();
      }
      const buffer = new Uint8Array(size);
      let j = 0;
      for (let i = 0; i < size; i++) {
        buffer[i] = chunks[0][j++];
        if (j === chunks[0].length) {
          chunks.shift();
          j = 0;
        }
      }
      if (chunks.length && j < chunks[0].length) {
        chunks[0] = chunks[0].slice(j);
      }
      return buffer;
    }
    function createPacketDecoderStream(maxPayload, binaryType) {
      if (!TEXT_DECODER) {
        TEXT_DECODER = new TextDecoder();
      }
      const chunks = [];
      let state = 0;
      let expectedLength = -1;
      let isBinary = false;
      return new TransformStream({
        transform(chunk, controller) {
          chunks.push(chunk);
          while (true) {
            if (state === 0) {
              if (totalLength(chunks) < 1) {
                break;
              }
              const header = concatChunks(chunks, 1);
              isBinary = (header[0] & 128) === 128;
              expectedLength = header[0] & 127;
              if (expectedLength < 126) {
                state = 3;
              } else if (expectedLength === 126) {
                state = 1;
              } else {
                state = 2;
              }
            } else if (state === 1) {
              if (totalLength(chunks) < 2) {
                break;
              }
              const headerArray = concatChunks(chunks, 2);
              expectedLength = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length).getUint16(0);
              state = 3;
            } else if (state === 2) {
              if (totalLength(chunks) < 8) {
                break;
              }
              const headerArray = concatChunks(chunks, 8);
              const view = new DataView(headerArray.buffer, headerArray.byteOffset, headerArray.length);
              const n = view.getUint32(0);
              if (n > Math.pow(2, 53 - 32) - 1) {
                controller.enqueue(commons_js_1.ERROR_PACKET);
                break;
              }
              expectedLength = n * Math.pow(2, 32) + view.getUint32(4);
              state = 3;
            } else {
              if (totalLength(chunks) < expectedLength) {
                break;
              }
              const data = concatChunks(chunks, expectedLength);
              controller.enqueue((0, decodePacket_js_1.decodePacket)(isBinary ? data : TEXT_DECODER.decode(data), binaryType));
              state = 0;
            }
            if (expectedLength === 0 || expectedLength > maxPayload) {
              controller.enqueue(commons_js_1.ERROR_PACKET);
              break;
            }
          }
        }
      });
    }
    exports.protocol = 4;
  }
});

// ../../node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  Emitter: () => Emitter
});
function Emitter(obj) {
  if (obj) return mixin(obj);
}
function mixin(obj) {
  for (var key in Emitter.prototype) {
    obj[key] = Emitter.prototype[key];
  }
  return obj;
}
var init_esm = __esm({
  "../../node_modules/.pnpm/@socket.io+component-emitter@3.1.2/node_modules/@socket.io/component-emitter/lib/esm/index.js"() {
    Emitter.prototype.on = Emitter.prototype.addEventListener = function(event, fn) {
      this._callbacks = this._callbacks || {};
      (this._callbacks["$" + event] = this._callbacks["$" + event] || []).push(fn);
      return this;
    };
    Emitter.prototype.once = function(event, fn) {
      function on() {
        this.off(event, on);
        fn.apply(this, arguments);
      }
      on.fn = fn;
      this.on(event, on);
      return this;
    };
    Emitter.prototype.off = Emitter.prototype.removeListener = Emitter.prototype.removeAllListeners = Emitter.prototype.removeEventListener = function(event, fn) {
      this._callbacks = this._callbacks || {};
      if (0 == arguments.length) {
        this._callbacks = {};
        return this;
      }
      var callbacks = this._callbacks["$" + event];
      if (!callbacks) return this;
      if (1 == arguments.length) {
        delete this._callbacks["$" + event];
        return this;
      }
      var cb;
      for (var i = 0; i < callbacks.length; i++) {
        cb = callbacks[i];
        if (cb === fn || cb.fn === fn) {
          callbacks.splice(i, 1);
          break;
        }
      }
      if (callbacks.length === 0) {
        delete this._callbacks["$" + event];
      }
      return this;
    };
    Emitter.prototype.emit = function(event) {
      this._callbacks = this._callbacks || {};
      var args = new Array(arguments.length - 1), callbacks = this._callbacks["$" + event];
      for (var i = 1; i < arguments.length; i++) {
        args[i - 1] = arguments[i];
      }
      if (callbacks) {
        callbacks = callbacks.slice(0);
        for (var i = 0, len = callbacks.length; i < len; ++i) {
          callbacks[i].apply(this, args);
        }
      }
      return this;
    };
    Emitter.prototype.emitReserved = Emitter.prototype.emit;
    Emitter.prototype.listeners = function(event) {
      this._callbacks = this._callbacks || {};
      return this._callbacks["$" + event] || [];
    };
    Emitter.prototype.hasListeners = function(event) {
      return !!this.listeners(event).length;
    };
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/globals.js
var require_globals = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/globals.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.defaultBinaryType = exports.globalThisShim = exports.nextTick = void 0;
    exports.createCookieJar = createCookieJar;
    exports.nextTick = (() => {
      const isPromiseAvailable = typeof Promise === "function" && typeof Promise.resolve === "function";
      if (isPromiseAvailable) {
        return (cb) => Promise.resolve().then(cb);
      } else {
        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);
      }
    })();
    exports.globalThisShim = (() => {
      if (typeof self !== "undefined") {
        return self;
      } else if (typeof window !== "undefined") {
        return window;
      } else {
        return Function("return this")();
      }
    })();
    exports.defaultBinaryType = "arraybuffer";
    function createCookieJar() {
    }
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/util.js
var require_util = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/util.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.pick = pick;
    exports.installTimerFunctions = installTimerFunctions;
    exports.byteLength = byteLength;
    exports.randomString = randomString;
    var globals_node_js_1 = require_globals();
    function pick(obj, ...attr) {
      return attr.reduce((acc, k) => {
        if (obj.hasOwnProperty(k)) {
          acc[k] = obj[k];
        }
        return acc;
      }, {});
    }
    var NATIVE_SET_TIMEOUT = globals_node_js_1.globalThisShim.setTimeout;
    var NATIVE_CLEAR_TIMEOUT = globals_node_js_1.globalThisShim.clearTimeout;
    function installTimerFunctions(obj, opts) {
      if (opts.useNativeTimers) {
        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globals_node_js_1.globalThisShim);
        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globals_node_js_1.globalThisShim);
      } else {
        obj.setTimeoutFn = globals_node_js_1.globalThisShim.setTimeout.bind(globals_node_js_1.globalThisShim);
        obj.clearTimeoutFn = globals_node_js_1.globalThisShim.clearTimeout.bind(globals_node_js_1.globalThisShim);
      }
    }
    var BASE64_OVERHEAD = 1.33;
    function byteLength(obj) {
      if (typeof obj === "string") {
        return utf8Length(obj);
      }
      return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);
    }
    function utf8Length(str) {
      let c = 0, length = 0;
      for (let i = 0, l = str.length; i < l; i++) {
        c = str.charCodeAt(i);
        if (c < 128) {
          length += 1;
        } else if (c < 2048) {
          length += 2;
        } else if (c < 55296 || c >= 57344) {
          length += 3;
        } else {
          i++;
          length += 4;
        }
      }
      return length;
    }
    function randomString() {
      return Date.now().toString(36).substring(3) + Math.random().toString(36).substring(2, 5);
    }
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseqs.js
var require_parseqs = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseqs.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.encode = encode;
    exports.decode = decode;
    function encode(obj) {
      let str = "";
      for (let i in obj) {
        if (obj.hasOwnProperty(i)) {
          if (str.length)
            str += "&";
          str += encodeURIComponent(i) + "=" + encodeURIComponent(obj[i]);
        }
      }
      return str;
    }
    function decode(qs) {
      let qry = {};
      let pairs = qs.split("&");
      for (let i = 0, l = pairs.length; i < l; i++) {
        let pair = pairs[i].split("=");
        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);
      }
      return qry;
    }
  }
});

// ../../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js
var require_ms = __commonJS({
  "../../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js"(exports, module) {
    var s = 1e3;
    var m = s * 60;
    var h = m * 60;
    var d = h * 24;
    var w = d * 7;
    var y = d * 365.25;
    module.exports = function(val, options) {
      options = options || {};
      var type = typeof val;
      if (type === "string" && val.length > 0) {
        return parse(val);
      } else if (type === "number" && isFinite(val)) {
        return options.long ? fmtLong(val) : fmtShort(val);
      }
      throw new Error(
        "val is not a non-empty string or a valid number. val=" + JSON.stringify(val)
      );
    };
    function parse(str) {
      str = String(str);
      if (str.length > 100) {
        return;
      }
      var match = /^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(
        str
      );
      if (!match) {
        return;
      }
      var n = parseFloat(match[1]);
      var type = (match[2] || "ms").toLowerCase();
      switch (type) {
        case "years":
        case "year":
        case "yrs":
        case "yr":
        case "y":
          return n * y;
        case "weeks":
        case "week":
        case "w":
          return n * w;
        case "days":
        case "day":
        case "d":
          return n * d;
        case "hours":
        case "hour":
        case "hrs":
        case "hr":
        case "h":
          return n * h;
        case "minutes":
        case "minute":
        case "mins":
        case "min":
        case "m":
          return n * m;
        case "seconds":
        case "second":
        case "secs":
        case "sec":
        case "s":
          return n * s;
        case "milliseconds":
        case "millisecond":
        case "msecs":
        case "msec":
        case "ms":
          return n;
        default:
          return void 0;
      }
    }
    function fmtShort(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return Math.round(ms / d) + "d";
      }
      if (msAbs >= h) {
        return Math.round(ms / h) + "h";
      }
      if (msAbs >= m) {
        return Math.round(ms / m) + "m";
      }
      if (msAbs >= s) {
        return Math.round(ms / s) + "s";
      }
      return ms + "ms";
    }
    function fmtLong(ms) {
      var msAbs = Math.abs(ms);
      if (msAbs >= d) {
        return plural(ms, msAbs, d, "day");
      }
      if (msAbs >= h) {
        return plural(ms, msAbs, h, "hour");
      }
      if (msAbs >= m) {
        return plural(ms, msAbs, m, "minute");
      }
      if (msAbs >= s) {
        return plural(ms, msAbs, s, "second");
      }
      return ms + " ms";
    }
    function plural(ms, msAbs, n, name) {
      var isPlural = msAbs >= n * 1.5;
      return Math.round(ms / n) + " " + name + (isPlural ? "s" : "");
    }
  }
});

// ../../node_modules/.pnpm/debug@4.3.5/node_modules/debug/src/common.js
var require_common = __commonJS({
  "../../node_modules/.pnpm/debug@4.3.5/node_modules/debug/src/common.js"(exports, module) {
    function setup(env) {
      createDebug.debug = createDebug;
      createDebug.default = createDebug;
      createDebug.coerce = coerce;
      createDebug.disable = disable;
      createDebug.enable = enable;
      createDebug.enabled = enabled;
      createDebug.humanize = require_ms();
      createDebug.destroy = destroy;
      Object.keys(env).forEach((key) => {
        createDebug[key] = env[key];
      });
      createDebug.names = [];
      createDebug.skips = [];
      createDebug.formatters = {};
      function selectColor(namespace) {
        let hash = 0;
        for (let i = 0; i < namespace.length; i++) {
          hash = (hash << 5) - hash + namespace.charCodeAt(i);
          hash |= 0;
        }
        return createDebug.colors[Math.abs(hash) % createDebug.colors.length];
      }
      createDebug.selectColor = selectColor;
      function createDebug(namespace) {
        let prevTime;
        let enableOverride = null;
        let namespacesCache;
        let enabledCache;
        function debug(...args) {
          if (!debug.enabled) {
            return;
          }
          const self2 = debug;
          const curr = Number(/* @__PURE__ */ new Date());
          const ms = curr - (prevTime || curr);
          self2.diff = ms;
          self2.prev = prevTime;
          self2.curr = curr;
          prevTime = curr;
          args[0] = createDebug.coerce(args[0]);
          if (typeof args[0] !== "string") {
            args.unshift("%O");
          }
          let index2 = 0;
          args[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {
            if (match === "%%") {
              return "%";
            }
            index2++;
            const formatter = createDebug.formatters[format];
            if (typeof formatter === "function") {
              const val = args[index2];
              match = formatter.call(self2, val);
              args.splice(index2, 1);
              index2--;
            }
            return match;
          });
          createDebug.formatArgs.call(self2, args);
          const logFn = self2.log || createDebug.log;
          logFn.apply(self2, args);
        }
        debug.namespace = namespace;
        debug.useColors = createDebug.useColors();
        debug.color = createDebug.selectColor(namespace);
        debug.extend = extend;
        debug.destroy = createDebug.destroy;
        Object.defineProperty(debug, "enabled", {
          enumerable: true,
          configurable: false,
          get: () => {
            if (enableOverride !== null) {
              return enableOverride;
            }
            if (namespacesCache !== createDebug.namespaces) {
              namespacesCache = createDebug.namespaces;
              enabledCache = createDebug.enabled(namespace);
            }
            return enabledCache;
          },
          set: (v) => {
            enableOverride = v;
          }
        });
        if (typeof createDebug.init === "function") {
          createDebug.init(debug);
        }
        return debug;
      }
      function extend(namespace, delimiter) {
        const newDebug = createDebug(this.namespace + (typeof delimiter === "undefined" ? ":" : delimiter) + namespace);
        newDebug.log = this.log;
        return newDebug;
      }
      function enable(namespaces) {
        createDebug.save(namespaces);
        createDebug.namespaces = namespaces;
        createDebug.names = [];
        createDebug.skips = [];
        let i;
        const split = (typeof namespaces === "string" ? namespaces : "").split(/[\s,]+/);
        const len = split.length;
        for (i = 0; i < len; i++) {
          if (!split[i]) {
            continue;
          }
          namespaces = split[i].replace(/\*/g, ".*?");
          if (namespaces[0] === "-") {
            createDebug.skips.push(new RegExp("^" + namespaces.slice(1) + "$"));
          } else {
            createDebug.names.push(new RegExp("^" + namespaces + "$"));
          }
        }
      }
      function disable() {
        const namespaces = [
          ...createDebug.names.map(toNamespace),
          ...createDebug.skips.map(toNamespace).map((namespace) => "-" + namespace)
        ].join(",");
        createDebug.enable("");
        return namespaces;
      }
      function enabled(name) {
        if (name[name.length - 1] === "*") {
          return true;
        }
        let i;
        let len;
        for (i = 0, len = createDebug.skips.length; i < len; i++) {
          if (createDebug.skips[i].test(name)) {
            return false;
          }
        }
        for (i = 0, len = createDebug.names.length; i < len; i++) {
          if (createDebug.names[i].test(name)) {
            return true;
          }
        }
        return false;
      }
      function toNamespace(regexp) {
        return regexp.toString().substring(2, regexp.toString().length - 2).replace(/\.\*\?$/, "*");
      }
      function coerce(val) {
        if (val instanceof Error) {
          return val.stack || val.message;
        }
        return val;
      }
      function destroy() {
        console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
      }
      createDebug.enable(createDebug.load());
      return createDebug;
    }
    module.exports = setup;
  }
});

// ../../node_modules/.pnpm/debug@4.3.5/node_modules/debug/src/browser.js
var require_browser = __commonJS({
  "../../node_modules/.pnpm/debug@4.3.5/node_modules/debug/src/browser.js"(exports, module) {
    exports.formatArgs = formatArgs;
    exports.save = save;
    exports.load = load;
    exports.useColors = useColors;
    exports.storage = localstorage();
    exports.destroy = /* @__PURE__ */ (() => {
      let warned = false;
      return () => {
        if (!warned) {
          warned = true;
          console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.");
        }
      };
    })();
    exports.colors = [
      "#0000CC",
      "#0000FF",
      "#0033CC",
      "#0033FF",
      "#0066CC",
      "#0066FF",
      "#0099CC",
      "#0099FF",
      "#00CC00",
      "#00CC33",
      "#00CC66",
      "#00CC99",
      "#00CCCC",
      "#00CCFF",
      "#3300CC",
      "#3300FF",
      "#3333CC",
      "#3333FF",
      "#3366CC",
      "#3366FF",
      "#3399CC",
      "#3399FF",
      "#33CC00",
      "#33CC33",
      "#33CC66",
      "#33CC99",
      "#33CCCC",
      "#33CCFF",
      "#6600CC",
      "#6600FF",
      "#6633CC",
      "#6633FF",
      "#66CC00",
      "#66CC33",
      "#9900CC",
      "#9900FF",
      "#9933CC",
      "#9933FF",
      "#99CC00",
      "#99CC33",
      "#CC0000",
      "#CC0033",
      "#CC0066",
      "#CC0099",
      "#CC00CC",
      "#CC00FF",
      "#CC3300",
      "#CC3333",
      "#CC3366",
      "#CC3399",
      "#CC33CC",
      "#CC33FF",
      "#CC6600",
      "#CC6633",
      "#CC9900",
      "#CC9933",
      "#CCCC00",
      "#CCCC33",
      "#FF0000",
      "#FF0033",
      "#FF0066",
      "#FF0099",
      "#FF00CC",
      "#FF00FF",
      "#FF3300",
      "#FF3333",
      "#FF3366",
      "#FF3399",
      "#FF33CC",
      "#FF33FF",
      "#FF6600",
      "#FF6633",
      "#FF9900",
      "#FF9933",
      "#FFCC00",
      "#FFCC33"
    ];
    function useColors() {
      if (typeof window !== "undefined" && window.process && (window.process.type === "renderer" || window.process.__nwjs)) {
        return true;
      }
      if (typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/)) {
        return false;
      }
      return typeof document !== "undefined" && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance || // Is firebug? http://stackoverflow.com/a/398120/376773
      typeof window !== "undefined" && window.console && (window.console.firebug || window.console.exception && window.console.table) || // Is firefox >= v31?
      // https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/) && parseInt(RegExp.$1, 10) >= 31 || // Double check webkit in userAgent just in case we are in a worker
      typeof navigator !== "undefined" && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/);
    }
    function formatArgs(args) {
      args[0] = (this.useColors ? "%c" : "") + this.namespace + (this.useColors ? " %c" : " ") + args[0] + (this.useColors ? "%c " : " ") + "+" + module.exports.humanize(this.diff);
      if (!this.useColors) {
        return;
      }
      const c = "color: " + this.color;
      args.splice(1, 0, c, "color: inherit");
      let index2 = 0;
      let lastC = 0;
      args[0].replace(/%[a-zA-Z%]/g, (match) => {
        if (match === "%%") {
          return;
        }
        index2++;
        if (match === "%c") {
          lastC = index2;
        }
      });
      args.splice(lastC, 0, c);
    }
    exports.log = console.debug || console.log || (() => {
    });
    function save(namespaces) {
      try {
        if (namespaces) {
          exports.storage.setItem("debug", namespaces);
        } else {
          exports.storage.removeItem("debug");
        }
      } catch (error) {
      }
    }
    function load() {
      let r;
      try {
        r = exports.storage.getItem("debug");
      } catch (error) {
      }
      if (!r && typeof process !== "undefined" && "env" in process) {
        r = process.env.DEBUG;
      }
      return r;
    }
    function localstorage() {
      try {
        return localStorage;
      } catch (error) {
      }
    }
    module.exports = require_common()(exports);
    var { formatters } = module.exports;
    formatters.j = function(v) {
      try {
        return JSON.stringify(v);
      } catch (error) {
        return "[UnexpectedJSONParseError]: " + error.message;
      }
    };
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transport.js
var require_transport = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transport.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Transport = exports.TransportError = void 0;
    var engine_io_parser_1 = require_cjs6();
    var component_emitter_1 = (init_esm(), __toCommonJS(esm_exports));
    var util_js_1 = require_util();
    var parseqs_js_1 = require_parseqs();
    var debug_1 = __importDefault(require_browser());
    var debug = (0, debug_1.default)("engine.io-client:transport");
    var TransportError = class extends Error {
      constructor(reason, description, context) {
        super(reason);
        this.description = description;
        this.context = context;
        this.type = "TransportError";
      }
    };
    exports.TransportError = TransportError;
    var Transport = class extends component_emitter_1.Emitter {
      /**
       * Transport abstract constructor.
       *
       * @param {Object} opts - options
       * @protected
       */
      constructor(opts) {
        super();
        this.writable = false;
        (0, util_js_1.installTimerFunctions)(this, opts);
        this.opts = opts;
        this.query = opts.query;
        this.socket = opts.socket;
        this.supportsBinary = !opts.forceBase64;
      }
      /**
       * Emits an error.
       *
       * @param {String} reason
       * @param description
       * @param context - the error context
       * @return {Transport} for chaining
       * @protected
       */
      onError(reason, description, context) {
        super.emitReserved("error", new TransportError(reason, description, context));
        return this;
      }
      /**
       * Opens the transport.
       */
      open() {
        this.readyState = "opening";
        this.doOpen();
        return this;
      }
      /**
       * Closes the transport.
       */
      close() {
        if (this.readyState === "opening" || this.readyState === "open") {
          this.doClose();
          this.onClose();
        }
        return this;
      }
      /**
       * Sends multiple packets.
       *
       * @param {Array} packets
       */
      send(packets) {
        if (this.readyState === "open") {
          this.write(packets);
        } else {
          debug("transport is not open, discarding packets");
        }
      }
      /**
       * Called upon open
       *
       * @protected
       */
      onOpen() {
        this.readyState = "open";
        this.writable = true;
        super.emitReserved("open");
      }
      /**
       * Called with data.
       *
       * @param {String} data
       * @protected
       */
      onData(data) {
        const packet = (0, engine_io_parser_1.decodePacket)(data, this.socket.binaryType);
        this.onPacket(packet);
      }
      /**
       * Called with a decoded packet.
       *
       * @protected
       */
      onPacket(packet) {
        super.emitReserved("packet", packet);
      }
      /**
       * Called upon close.
       *
       * @protected
       */
      onClose(details) {
        this.readyState = "closed";
        super.emitReserved("close", details);
      }
      /**
       * Pauses the transport, in order not to lose packets during an upgrade.
       *
       * @param onPause
       */
      pause(onPause) {
      }
      createUri(schema, query = {}) {
        return schema + "://" + this._hostname() + this._port() + this.opts.path + this._query(query);
      }
      _hostname() {
        const hostname = this.opts.hostname;
        return hostname.indexOf(":") === -1 ? hostname : "[" + hostname + "]";
      }
      _port() {
        if (this.opts.port && (this.opts.secure && Number(this.opts.port !== 443) || !this.opts.secure && Number(this.opts.port) !== 80)) {
          return ":" + this.opts.port;
        } else {
          return "";
        }
      }
      _query(query) {
        const encodedQuery = (0, parseqs_js_1.encode)(query);
        return encodedQuery.length ? "?" + encodedQuery : "";
      }
    };
    exports.Transport = Transport;
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling.js
var require_polling = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Polling = void 0;
    var transport_js_1 = require_transport();
    var util_js_1 = require_util();
    var engine_io_parser_1 = require_cjs6();
    var debug_1 = __importDefault(require_browser());
    var debug = (0, debug_1.default)("engine.io-client:polling");
    var Polling = class extends transport_js_1.Transport {
      constructor() {
        super(...arguments);
        this._polling = false;
      }
      get name() {
        return "polling";
      }
      /**
       * Opens the socket (triggers polling). We write a PING message to determine
       * when the transport is open.
       *
       * @protected
       */
      doOpen() {
        this._poll();
      }
      /**
       * Pauses polling.
       *
       * @param {Function} onPause - callback upon buffers are flushed and transport is paused
       * @package
       */
      pause(onPause) {
        this.readyState = "pausing";
        const pause = () => {
          debug("paused");
          this.readyState = "paused";
          onPause();
        };
        if (this._polling || !this.writable) {
          let total = 0;
          if (this._polling) {
            debug("we are currently polling - waiting to pause");
            total++;
            this.once("pollComplete", function() {
              debug("pre-pause polling complete");
              --total || pause();
            });
          }
          if (!this.writable) {
            debug("we are currently writing - waiting to pause");
            total++;
            this.once("drain", function() {
              debug("pre-pause writing complete");
              --total || pause();
            });
          }
        } else {
          pause();
        }
      }
      /**
       * Starts polling cycle.
       *
       * @private
       */
      _poll() {
        debug("polling");
        this._polling = true;
        this.doPoll();
        this.emitReserved("poll");
      }
      /**
       * Overloads onData to detect payloads.
       *
       * @protected
       */
      onData(data) {
        debug("polling got data %s", data);
        const callback = (packet) => {
          if ("opening" === this.readyState && packet.type === "open") {
            this.onOpen();
          }
          if ("close" === packet.type) {
            this.onClose({ description: "transport closed by the server" });
            return false;
          }
          this.onPacket(packet);
        };
        (0, engine_io_parser_1.decodePayload)(data, this.socket.binaryType).forEach(callback);
        if ("closed" !== this.readyState) {
          this._polling = false;
          this.emitReserved("pollComplete");
          if ("open" === this.readyState) {
            this._poll();
          } else {
            debug('ignoring poll - transport state "%s"', this.readyState);
          }
        }
      }
      /**
       * For polling, send a close packet.
       *
       * @protected
       */
      doClose() {
        const close = () => {
          debug("writing close packet");
          this.write([{ type: "close" }]);
        };
        if ("open" === this.readyState) {
          debug("transport open - closing");
          close();
        } else {
          debug("transport not open - deferring close");
          this.once("open", close);
        }
      }
      /**
       * Writes a packets payload.
       *
       * @param {Array} packets - data packets
       * @protected
       */
      write(packets) {
        this.writable = false;
        (0, engine_io_parser_1.encodePayload)(packets, (data) => {
          this.doWrite(data, () => {
            this.writable = true;
            this.emitReserved("drain");
          });
        });
      }
      /**
       * Generates uri for connection.
       *
       * @private
       */
      uri() {
        const schema = this.opts.secure ? "https" : "http";
        const query = this.query || {};
        if (false !== this.opts.timestampRequests) {
          query[this.opts.timestampParam] = (0, util_js_1.randomString)();
        }
        if (!this.supportsBinary && !query.sid) {
          query.b64 = 1;
        }
        return this.createUri(schema, query);
      }
    };
    exports.Polling = Polling;
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/has-cors.js
var require_has_cors = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/has-cors.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasCORS = void 0;
    var value = false;
    try {
      value = typeof XMLHttpRequest !== "undefined" && "withCredentials" in new XMLHttpRequest();
    } catch (err) {
    }
    exports.hasCORS = value;
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-xhr.js
var require_polling_xhr = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-xhr.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.XHR = exports.Request = exports.BaseXHR = void 0;
    var polling_js_1 = require_polling();
    var component_emitter_1 = (init_esm(), __toCommonJS(esm_exports));
    var util_js_1 = require_util();
    var globals_node_js_1 = require_globals();
    var has_cors_js_1 = require_has_cors();
    var debug_1 = __importDefault(require_browser());
    var debug = (0, debug_1.default)("engine.io-client:polling");
    function empty() {
    }
    var BaseXHR = class extends polling_js_1.Polling {
      /**
       * XHR Polling constructor.
       *
       * @param {Object} opts
       * @package
       */
      constructor(opts) {
        super(opts);
        if (typeof location !== "undefined") {
          const isSSL = "https:" === location.protocol;
          let port = location.port;
          if (!port) {
            port = isSSL ? "443" : "80";
          }
          this.xd = typeof location !== "undefined" && opts.hostname !== location.hostname || port !== opts.port;
        }
      }
      /**
       * Sends data.
       *
       * @param {String} data to send.
       * @param {Function} called upon flush.
       * @private
       */
      doWrite(data, fn) {
        const req = this.request({
          method: "POST",
          data
        });
        req.on("success", fn);
        req.on("error", (xhrStatus, context) => {
          this.onError("xhr post error", xhrStatus, context);
        });
      }
      /**
       * Starts a poll cycle.
       *
       * @private
       */
      doPoll() {
        debug("xhr poll");
        const req = this.request();
        req.on("data", this.onData.bind(this));
        req.on("error", (xhrStatus, context) => {
          this.onError("xhr poll error", xhrStatus, context);
        });
        this.pollXhr = req;
      }
    };
    exports.BaseXHR = BaseXHR;
    var Request2 = class _Request extends component_emitter_1.Emitter {
      /**
       * Request constructor
       *
       * @param {Object} options
       * @package
       */
      constructor(createRequest, uri, opts) {
        super();
        this.createRequest = createRequest;
        (0, util_js_1.installTimerFunctions)(this, opts);
        this._opts = opts;
        this._method = opts.method || "GET";
        this._uri = uri;
        this._data = void 0 !== opts.data ? opts.data : null;
        this._create();
      }
      /**
       * Creates the XHR object and sends the request.
       *
       * @private
       */
      _create() {
        var _a;
        const opts = (0, util_js_1.pick)(this._opts, "agent", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "autoUnref");
        opts.xdomain = !!this._opts.xd;
        const xhr = this._xhr = this.createRequest(opts);
        try {
          debug("xhr open %s: %s", this._method, this._uri);
          xhr.open(this._method, this._uri, true);
          try {
            if (this._opts.extraHeaders) {
              xhr.setDisableHeaderCheck && xhr.setDisableHeaderCheck(true);
              for (let i in this._opts.extraHeaders) {
                if (this._opts.extraHeaders.hasOwnProperty(i)) {
                  xhr.setRequestHeader(i, this._opts.extraHeaders[i]);
                }
              }
            }
          } catch (e) {
          }
          if ("POST" === this._method) {
            try {
              xhr.setRequestHeader("Content-type", "text/plain;charset=UTF-8");
            } catch (e) {
            }
          }
          try {
            xhr.setRequestHeader("Accept", "*/*");
          } catch (e) {
          }
          (_a = this._opts.cookieJar) === null || _a === void 0 ? void 0 : _a.addCookies(xhr);
          if ("withCredentials" in xhr) {
            xhr.withCredentials = this._opts.withCredentials;
          }
          if (this._opts.requestTimeout) {
            xhr.timeout = this._opts.requestTimeout;
          }
          xhr.onreadystatechange = () => {
            var _a2;
            if (xhr.readyState === 3) {
              (_a2 = this._opts.cookieJar) === null || _a2 === void 0 ? void 0 : _a2.parseCookies(
                // @ts-ignore
                xhr.getResponseHeader("set-cookie")
              );
            }
            if (4 !== xhr.readyState)
              return;
            if (200 === xhr.status || 1223 === xhr.status) {
              this._onLoad();
            } else {
              this.setTimeoutFn(() => {
                this._onError(typeof xhr.status === "number" ? xhr.status : 0);
              }, 0);
            }
          };
          debug("xhr data %s", this._data);
          xhr.send(this._data);
        } catch (e) {
          this.setTimeoutFn(() => {
            this._onError(e);
          }, 0);
          return;
        }
        if (typeof document !== "undefined") {
          this._index = _Request.requestsCount++;
          _Request.requests[this._index] = this;
        }
      }
      /**
       * Called upon error.
       *
       * @private
       */
      _onError(err) {
        this.emitReserved("error", err, this._xhr);
        this._cleanup(true);
      }
      /**
       * Cleans up house.
       *
       * @private
       */
      _cleanup(fromError) {
        if ("undefined" === typeof this._xhr || null === this._xhr) {
          return;
        }
        this._xhr.onreadystatechange = empty;
        if (fromError) {
          try {
            this._xhr.abort();
          } catch (e) {
          }
        }
        if (typeof document !== "undefined") {
          delete _Request.requests[this._index];
        }
        this._xhr = null;
      }
      /**
       * Called upon load.
       *
       * @private
       */
      _onLoad() {
        const data = this._xhr.responseText;
        if (data !== null) {
          this.emitReserved("data", data);
          this.emitReserved("success");
          this._cleanup();
        }
      }
      /**
       * Aborts the request.
       *
       * @package
       */
      abort() {
        this._cleanup();
      }
    };
    exports.Request = Request2;
    Request2.requestsCount = 0;
    Request2.requests = {};
    if (typeof document !== "undefined") {
      if (typeof attachEvent === "function") {
        attachEvent("onunload", unloadHandler);
      } else if (typeof addEventListener === "function") {
        const terminationEvent = "onpagehide" in globals_node_js_1.globalThisShim ? "pagehide" : "unload";
        addEventListener(terminationEvent, unloadHandler, false);
      }
    }
    function unloadHandler() {
      for (let i in Request2.requests) {
        if (Request2.requests.hasOwnProperty(i)) {
          Request2.requests[i].abort();
        }
      }
    }
    var hasXHR2 = function() {
      const xhr = newRequest({
        xdomain: false
      });
      return xhr && xhr.responseType !== null;
    }();
    var XHR = class extends BaseXHR {
      constructor(opts) {
        super(opts);
        const forceBase64 = opts && opts.forceBase64;
        this.supportsBinary = hasXHR2 && !forceBase64;
      }
      request(opts = {}) {
        Object.assign(opts, { xd: this.xd }, this.opts);
        return new Request2(newRequest, this.uri(), opts);
      }
    };
    exports.XHR = XHR;
    function newRequest(opts) {
      const xdomain = opts.xdomain;
      try {
        if ("undefined" !== typeof XMLHttpRequest && (!xdomain || has_cors_js_1.hasCORS)) {
          return new XMLHttpRequest();
        }
      } catch (e) {
      }
      if (!xdomain) {
        try {
          return new globals_node_js_1.globalThisShim[["Active"].concat("Object").join("X")]("Microsoft.XMLHTTP");
        } catch (e) {
        }
      }
    }
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/websocket.js
var require_websocket = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/websocket.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WS = exports.BaseWS = void 0;
    var transport_js_1 = require_transport();
    var util_js_1 = require_util();
    var engine_io_parser_1 = require_cjs6();
    var globals_node_js_1 = require_globals();
    var debug_1 = __importDefault(require_browser());
    var debug = (0, debug_1.default)("engine.io-client:websocket");
    var isReactNative = typeof navigator !== "undefined" && typeof navigator.product === "string" && navigator.product.toLowerCase() === "reactnative";
    var BaseWS = class extends transport_js_1.Transport {
      get name() {
        return "websocket";
      }
      doOpen() {
        const uri = this.uri();
        const protocols = this.opts.protocols;
        const opts = isReactNative ? {} : (0, util_js_1.pick)(this.opts, "agent", "perMessageDeflate", "pfx", "key", "passphrase", "cert", "ca", "ciphers", "rejectUnauthorized", "localAddress", "protocolVersion", "origin", "maxPayload", "family", "checkServerIdentity");
        if (this.opts.extraHeaders) {
          opts.headers = this.opts.extraHeaders;
        }
        try {
          this.ws = this.createSocket(uri, protocols, opts);
        } catch (err) {
          return this.emitReserved("error", err);
        }
        this.ws.binaryType = this.socket.binaryType;
        this.addEventListeners();
      }
      /**
       * Adds event listeners to the socket
       *
       * @private
       */
      addEventListeners() {
        this.ws.onopen = () => {
          if (this.opts.autoUnref) {
            this.ws._socket.unref();
          }
          this.onOpen();
        };
        this.ws.onclose = (closeEvent) => this.onClose({
          description: "websocket connection closed",
          context: closeEvent
        });
        this.ws.onmessage = (ev) => this.onData(ev.data);
        this.ws.onerror = (e) => this.onError("websocket error", e);
      }
      write(packets) {
        this.writable = false;
        for (let i = 0; i < packets.length; i++) {
          const packet = packets[i];
          const lastPacket = i === packets.length - 1;
          (0, engine_io_parser_1.encodePacket)(packet, this.supportsBinary, (data) => {
            try {
              this.doWrite(packet, data);
            } catch (e) {
              debug("websocket closed before onclose event");
            }
            if (lastPacket) {
              (0, globals_node_js_1.nextTick)(() => {
                this.writable = true;
                this.emitReserved("drain");
              }, this.setTimeoutFn);
            }
          });
        }
      }
      doClose() {
        if (typeof this.ws !== "undefined") {
          this.ws.onerror = () => {
          };
          this.ws.close();
          this.ws = null;
        }
      }
      /**
       * Generates uri for connection.
       *
       * @private
       */
      uri() {
        const schema = this.opts.secure ? "wss" : "ws";
        const query = this.query || {};
        if (this.opts.timestampRequests) {
          query[this.opts.timestampParam] = (0, util_js_1.randomString)();
        }
        if (!this.supportsBinary) {
          query.b64 = 1;
        }
        return this.createUri(schema, query);
      }
    };
    exports.BaseWS = BaseWS;
    var WebSocketCtor = globals_node_js_1.globalThisShim.WebSocket || globals_node_js_1.globalThisShim.MozWebSocket;
    var WS = class extends BaseWS {
      createSocket(uri, protocols, opts) {
        return !isReactNative ? protocols ? new WebSocketCtor(uri, protocols) : new WebSocketCtor(uri) : new WebSocketCtor(uri, protocols, opts);
      }
      doWrite(_packet, data) {
        this.ws.send(data);
      }
    };
    exports.WS = WS;
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/webtransport.js
var require_webtransport = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/webtransport.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WT = void 0;
    var transport_js_1 = require_transport();
    var globals_node_js_1 = require_globals();
    var engine_io_parser_1 = require_cjs6();
    var debug_1 = __importDefault(require_browser());
    var debug = (0, debug_1.default)("engine.io-client:webtransport");
    var WT = class extends transport_js_1.Transport {
      get name() {
        return "webtransport";
      }
      doOpen() {
        try {
          this._transport = new WebTransport(this.createUri("https"), this.opts.transportOptions[this.name]);
        } catch (err) {
          return this.emitReserved("error", err);
        }
        this._transport.closed.then(() => {
          debug("transport closed gracefully");
          this.onClose();
        }).catch((err) => {
          debug("transport closed due to %s", err);
          this.onError("webtransport error", err);
        });
        this._transport.ready.then(() => {
          this._transport.createBidirectionalStream().then((stream) => {
            const decoderStream = (0, engine_io_parser_1.createPacketDecoderStream)(Number.MAX_SAFE_INTEGER, this.socket.binaryType);
            const reader = stream.readable.pipeThrough(decoderStream).getReader();
            const encoderStream = (0, engine_io_parser_1.createPacketEncoderStream)();
            encoderStream.readable.pipeTo(stream.writable);
            this._writer = encoderStream.writable.getWriter();
            const read = () => {
              reader.read().then(({ done, value }) => {
                if (done) {
                  debug("session is closed");
                  return;
                }
                debug("received chunk: %o", value);
                this.onPacket(value);
                read();
              }).catch((err) => {
                debug("an error occurred while reading: %s", err);
              });
            };
            read();
            const packet = { type: "open" };
            if (this.query.sid) {
              packet.data = `{"sid":"${this.query.sid}"}`;
            }
            this._writer.write(packet).then(() => this.onOpen());
          });
        });
      }
      write(packets) {
        this.writable = false;
        for (let i = 0; i < packets.length; i++) {
          const packet = packets[i];
          const lastPacket = i === packets.length - 1;
          this._writer.write(packet).then(() => {
            if (lastPacket) {
              (0, globals_node_js_1.nextTick)(() => {
                this.writable = true;
                this.emitReserved("drain");
              }, this.setTimeoutFn);
            }
          });
        }
      }
      doClose() {
        var _a;
        (_a = this._transport) === null || _a === void 0 ? void 0 : _a.close();
      }
    };
    exports.WT = WT;
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/index.js
var require_transports = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transports = void 0;
    var polling_xhr_node_js_1 = require_polling_xhr();
    var websocket_node_js_1 = require_websocket();
    var webtransport_js_1 = require_webtransport();
    exports.transports = {
      websocket: websocket_node_js_1.WS,
      webtransport: webtransport_js_1.WT,
      polling: polling_xhr_node_js_1.XHR
    };
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseuri.js
var require_parseuri = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/contrib/parseuri.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.parse = parse;
    var re = /^(?:(?![^:@\/?#]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@\/?#]*)(?::([^:@\/?#]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/;
    var parts = [
      "source",
      "protocol",
      "authority",
      "userInfo",
      "user",
      "password",
      "host",
      "port",
      "relative",
      "path",
      "directory",
      "file",
      "query",
      "anchor"
    ];
    function parse(str) {
      if (str.length > 8e3) {
        throw "URI too long";
      }
      const src = str, b = str.indexOf("["), e = str.indexOf("]");
      if (b != -1 && e != -1) {
        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ";") + str.substring(e, str.length);
      }
      let m = re.exec(str || ""), uri = {}, i = 14;
      while (i--) {
        uri[parts[i]] = m[i] || "";
      }
      if (b != -1 && e != -1) {
        uri.source = src;
        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ":");
        uri.authority = uri.authority.replace("[", "").replace("]", "").replace(/;/g, ":");
        uri.ipv6uri = true;
      }
      uri.pathNames = pathNames(uri, uri["path"]);
      uri.queryKey = queryKey(uri, uri["query"]);
      return uri;
    }
    function pathNames(obj, path) {
      const regx = /\/{2,9}/g, names = path.replace(regx, "/").split("/");
      if (path.slice(0, 1) == "/" || path.length === 0) {
        names.splice(0, 1);
      }
      if (path.slice(-1) == "/") {
        names.splice(names.length - 1, 1);
      }
      return names;
    }
    function queryKey(uri, query) {
      const data = {};
      query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function($0, $1, $2) {
        if ($1) {
          data[$1] = $2;
        }
      });
      return data;
    }
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/socket.js
var require_socket = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/socket.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Socket = exports.SocketWithUpgrade = exports.SocketWithoutUpgrade = void 0;
    var index_js_1 = require_transports();
    var util_js_1 = require_util();
    var parseqs_js_1 = require_parseqs();
    var parseuri_js_1 = require_parseuri();
    var component_emitter_1 = (init_esm(), __toCommonJS(esm_exports));
    var engine_io_parser_1 = require_cjs6();
    var globals_node_js_1 = require_globals();
    var debug_1 = __importDefault(require_browser());
    var debug = (0, debug_1.default)("engine.io-client:socket");
    var withEventListeners = typeof addEventListener === "function" && typeof removeEventListener === "function";
    var OFFLINE_EVENT_LISTENERS = [];
    if (withEventListeners) {
      addEventListener("offline", () => {
        debug("closing %d connection(s) because the network was lost", OFFLINE_EVENT_LISTENERS.length);
        OFFLINE_EVENT_LISTENERS.forEach((listener) => listener());
      }, false);
    }
    var SocketWithoutUpgrade = class _SocketWithoutUpgrade extends component_emitter_1.Emitter {
      /**
       * Socket constructor.
       *
       * @param {String|Object} uri - uri or options
       * @param {Object} opts - options
       */
      constructor(uri, opts) {
        super();
        this.binaryType = globals_node_js_1.defaultBinaryType;
        this.writeBuffer = [];
        this._prevBufferLen = 0;
        this._pingInterval = -1;
        this._pingTimeout = -1;
        this._maxPayload = -1;
        this._pingTimeoutTime = Infinity;
        if (uri && "object" === typeof uri) {
          opts = uri;
          uri = null;
        }
        if (uri) {
          const parsedUri = (0, parseuri_js_1.parse)(uri);
          opts.hostname = parsedUri.host;
          opts.secure = parsedUri.protocol === "https" || parsedUri.protocol === "wss";
          opts.port = parsedUri.port;
          if (parsedUri.query)
            opts.query = parsedUri.query;
        } else if (opts.host) {
          opts.hostname = (0, parseuri_js_1.parse)(opts.host).host;
        }
        (0, util_js_1.installTimerFunctions)(this, opts);
        this.secure = null != opts.secure ? opts.secure : typeof location !== "undefined" && "https:" === location.protocol;
        if (opts.hostname && !opts.port) {
          opts.port = this.secure ? "443" : "80";
        }
        this.hostname = opts.hostname || (typeof location !== "undefined" ? location.hostname : "localhost");
        this.port = opts.port || (typeof location !== "undefined" && location.port ? location.port : this.secure ? "443" : "80");
        this.transports = [];
        this._transportsByName = {};
        opts.transports.forEach((t) => {
          const transportName = t.prototype.name;
          this.transports.push(transportName);
          this._transportsByName[transportName] = t;
        });
        this.opts = Object.assign({
          path: "/engine.io",
          agent: false,
          withCredentials: false,
          upgrade: true,
          timestampParam: "t",
          rememberUpgrade: false,
          addTrailingSlash: true,
          rejectUnauthorized: true,
          perMessageDeflate: {
            threshold: 1024
          },
          transportOptions: {},
          closeOnBeforeunload: false
        }, opts);
        this.opts.path = this.opts.path.replace(/\/$/, "") + (this.opts.addTrailingSlash ? "/" : "");
        if (typeof this.opts.query === "string") {
          this.opts.query = (0, parseqs_js_1.decode)(this.opts.query);
        }
        if (withEventListeners) {
          if (this.opts.closeOnBeforeunload) {
            this._beforeunloadEventListener = () => {
              if (this.transport) {
                this.transport.removeAllListeners();
                this.transport.close();
              }
            };
            addEventListener("beforeunload", this._beforeunloadEventListener, false);
          }
          if (this.hostname !== "localhost") {
            debug("adding listener for the 'offline' event");
            this._offlineEventListener = () => {
              this._onClose("transport close", {
                description: "network connection lost"
              });
            };
            OFFLINE_EVENT_LISTENERS.push(this._offlineEventListener);
          }
        }
        if (this.opts.withCredentials) {
          this._cookieJar = (0, globals_node_js_1.createCookieJar)();
        }
        this._open();
      }
      /**
       * Creates transport of the given type.
       *
       * @param {String} name - transport name
       * @return {Transport}
       * @private
       */
      createTransport(name) {
        debug('creating transport "%s"', name);
        const query = Object.assign({}, this.opts.query);
        query.EIO = engine_io_parser_1.protocol;
        query.transport = name;
        if (this.id)
          query.sid = this.id;
        const opts = Object.assign({}, this.opts, {
          query,
          socket: this,
          hostname: this.hostname,
          secure: this.secure,
          port: this.port
        }, this.opts.transportOptions[name]);
        debug("options: %j", opts);
        return new this._transportsByName[name](opts);
      }
      /**
       * Initializes transport to use and starts probe.
       *
       * @private
       */
      _open() {
        if (this.transports.length === 0) {
          this.setTimeoutFn(() => {
            this.emitReserved("error", "No transports available");
          }, 0);
          return;
        }
        const transportName = this.opts.rememberUpgrade && _SocketWithoutUpgrade.priorWebsocketSuccess && this.transports.indexOf("websocket") !== -1 ? "websocket" : this.transports[0];
        this.readyState = "opening";
        const transport = this.createTransport(transportName);
        transport.open();
        this.setTransport(transport);
      }
      /**
       * Sets the current transport. Disables the existing one (if any).
       *
       * @private
       */
      setTransport(transport) {
        debug("setting transport %s", transport.name);
        if (this.transport) {
          debug("clearing existing transport %s", this.transport.name);
          this.transport.removeAllListeners();
        }
        this.transport = transport;
        transport.on("drain", this._onDrain.bind(this)).on("packet", this._onPacket.bind(this)).on("error", this._onError.bind(this)).on("close", (reason) => this._onClose("transport close", reason));
      }
      /**
       * Called when connection is deemed open.
       *
       * @private
       */
      onOpen() {
        debug("socket open");
        this.readyState = "open";
        _SocketWithoutUpgrade.priorWebsocketSuccess = "websocket" === this.transport.name;
        this.emitReserved("open");
        this.flush();
      }
      /**
       * Handles a packet.
       *
       * @private
       */
      _onPacket(packet) {
        if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
          debug('socket receive: type "%s", data "%s"', packet.type, packet.data);
          this.emitReserved("packet", packet);
          this.emitReserved("heartbeat");
          switch (packet.type) {
            case "open":
              this.onHandshake(JSON.parse(packet.data));
              break;
            case "ping":
              this._sendPacket("pong");
              this.emitReserved("ping");
              this.emitReserved("pong");
              this._resetPingTimeout();
              break;
            case "error":
              const err = new Error("server error");
              err.code = packet.data;
              this._onError(err);
              break;
            case "message":
              this.emitReserved("data", packet.data);
              this.emitReserved("message", packet.data);
              break;
          }
        } else {
          debug('packet received with socket readyState "%s"', this.readyState);
        }
      }
      /**
       * Called upon handshake completion.
       *
       * @param {Object} data - handshake obj
       * @private
       */
      onHandshake(data) {
        this.emitReserved("handshake", data);
        this.id = data.sid;
        this.transport.query.sid = data.sid;
        this._pingInterval = data.pingInterval;
        this._pingTimeout = data.pingTimeout;
        this._maxPayload = data.maxPayload;
        this.onOpen();
        if ("closed" === this.readyState)
          return;
        this._resetPingTimeout();
      }
      /**
       * Sets and resets ping timeout timer based on server pings.
       *
       * @private
       */
      _resetPingTimeout() {
        this.clearTimeoutFn(this._pingTimeoutTimer);
        const delay = this._pingInterval + this._pingTimeout;
        this._pingTimeoutTime = Date.now() + delay;
        this._pingTimeoutTimer = this.setTimeoutFn(() => {
          this._onClose("ping timeout");
        }, delay);
        if (this.opts.autoUnref) {
          this._pingTimeoutTimer.unref();
        }
      }
      /**
       * Called on `drain` event
       *
       * @private
       */
      _onDrain() {
        this.writeBuffer.splice(0, this._prevBufferLen);
        this._prevBufferLen = 0;
        if (0 === this.writeBuffer.length) {
          this.emitReserved("drain");
        } else {
          this.flush();
        }
      }
      /**
       * Flush write buffers.
       *
       * @private
       */
      flush() {
        if ("closed" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {
          const packets = this._getWritablePackets();
          debug("flushing %d packets in socket", packets.length);
          this.transport.send(packets);
          this._prevBufferLen = packets.length;
          this.emitReserved("flush");
        }
      }
      /**
       * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP
       * long-polling)
       *
       * @private
       */
      _getWritablePackets() {
        const shouldCheckPayloadSize = this._maxPayload && this.transport.name === "polling" && this.writeBuffer.length > 1;
        if (!shouldCheckPayloadSize) {
          return this.writeBuffer;
        }
        let payloadSize = 1;
        for (let i = 0; i < this.writeBuffer.length; i++) {
          const data = this.writeBuffer[i].data;
          if (data) {
            payloadSize += (0, util_js_1.byteLength)(data);
          }
          if (i > 0 && payloadSize > this._maxPayload) {
            debug("only send %d out of %d packets", i, this.writeBuffer.length);
            return this.writeBuffer.slice(0, i);
          }
          payloadSize += 2;
        }
        debug("payload size is %d (max: %d)", payloadSize, this._maxPayload);
        return this.writeBuffer;
      }
      /**
       * Checks whether the heartbeat timer has expired but the socket has not yet been notified.
       *
       * Note: this method is private for now because it does not really fit the WebSocket API, but if we put it in the
       * `write()` method then the message would not be buffered by the Socket.IO client.
       *
       * @return {boolean}
       * @private
       */
      /* private */
      _hasPingExpired() {
        if (!this._pingTimeoutTime)
          return true;
        const hasExpired = Date.now() > this._pingTimeoutTime;
        if (hasExpired) {
          debug("throttled timer detected, scheduling connection close");
          this._pingTimeoutTime = 0;
          (0, globals_node_js_1.nextTick)(() => {
            this._onClose("ping timeout");
          }, this.setTimeoutFn);
        }
        return hasExpired;
      }
      /**
       * Sends a message.
       *
       * @param {String} msg - message.
       * @param {Object} options.
       * @param {Function} fn - callback function.
       * @return {Socket} for chaining.
       */
      write(msg, options, fn) {
        this._sendPacket("message", msg, options, fn);
        return this;
      }
      /**
       * Sends a message. Alias of {@link Socket#write}.
       *
       * @param {String} msg - message.
       * @param {Object} options.
       * @param {Function} fn - callback function.
       * @return {Socket} for chaining.
       */
      send(msg, options, fn) {
        this._sendPacket("message", msg, options, fn);
        return this;
      }
      /**
       * Sends a packet.
       *
       * @param {String} type: packet type.
       * @param {String} data.
       * @param {Object} options.
       * @param {Function} fn - callback function.
       * @private
       */
      _sendPacket(type, data, options, fn) {
        if ("function" === typeof data) {
          fn = data;
          data = void 0;
        }
        if ("function" === typeof options) {
          fn = options;
          options = null;
        }
        if ("closing" === this.readyState || "closed" === this.readyState) {
          return;
        }
        options = options || {};
        options.compress = false !== options.compress;
        const packet = {
          type,
          data,
          options
        };
        this.emitReserved("packetCreate", packet);
        this.writeBuffer.push(packet);
        if (fn)
          this.once("flush", fn);
        this.flush();
      }
      /**
       * Closes the connection.
       */
      close() {
        const close = () => {
          this._onClose("forced close");
          debug("socket closing - telling transport to close");
          this.transport.close();
        };
        const cleanupAndClose = () => {
          this.off("upgrade", cleanupAndClose);
          this.off("upgradeError", cleanupAndClose);
          close();
        };
        const waitForUpgrade = () => {
          this.once("upgrade", cleanupAndClose);
          this.once("upgradeError", cleanupAndClose);
        };
        if ("opening" === this.readyState || "open" === this.readyState) {
          this.readyState = "closing";
          if (this.writeBuffer.length) {
            this.once("drain", () => {
              if (this.upgrading) {
                waitForUpgrade();
              } else {
                close();
              }
            });
          } else if (this.upgrading) {
            waitForUpgrade();
          } else {
            close();
          }
        }
        return this;
      }
      /**
       * Called upon transport error
       *
       * @private
       */
      _onError(err) {
        debug("socket error %j", err);
        _SocketWithoutUpgrade.priorWebsocketSuccess = false;
        if (this.opts.tryAllTransports && this.transports.length > 1 && this.readyState === "opening") {
          debug("trying next transport");
          this.transports.shift();
          return this._open();
        }
        this.emitReserved("error", err);
        this._onClose("transport error", err);
      }
      /**
       * Called upon transport close.
       *
       * @private
       */
      _onClose(reason, description) {
        if ("opening" === this.readyState || "open" === this.readyState || "closing" === this.readyState) {
          debug('socket close with reason: "%s"', reason);
          this.clearTimeoutFn(this._pingTimeoutTimer);
          this.transport.removeAllListeners("close");
          this.transport.close();
          this.transport.removeAllListeners();
          if (withEventListeners) {
            if (this._beforeunloadEventListener) {
              removeEventListener("beforeunload", this._beforeunloadEventListener, false);
            }
            if (this._offlineEventListener) {
              const i = OFFLINE_EVENT_LISTENERS.indexOf(this._offlineEventListener);
              if (i !== -1) {
                debug("removing listener for the 'offline' event");
                OFFLINE_EVENT_LISTENERS.splice(i, 1);
              }
            }
          }
          this.readyState = "closed";
          this.id = null;
          this.emitReserved("close", reason, description);
          this.writeBuffer = [];
          this._prevBufferLen = 0;
        }
      }
    };
    exports.SocketWithoutUpgrade = SocketWithoutUpgrade;
    SocketWithoutUpgrade.protocol = engine_io_parser_1.protocol;
    var SocketWithUpgrade = class extends SocketWithoutUpgrade {
      constructor() {
        super(...arguments);
        this._upgrades = [];
      }
      onOpen() {
        super.onOpen();
        if ("open" === this.readyState && this.opts.upgrade) {
          debug("starting upgrade probes");
          for (let i = 0; i < this._upgrades.length; i++) {
            this._probe(this._upgrades[i]);
          }
        }
      }
      /**
       * Probes a transport.
       *
       * @param {String} name - transport name
       * @private
       */
      _probe(name) {
        debug('probing transport "%s"', name);
        let transport = this.createTransport(name);
        let failed = false;
        SocketWithoutUpgrade.priorWebsocketSuccess = false;
        const onTransportOpen = () => {
          if (failed)
            return;
          debug('probe transport "%s" opened', name);
          transport.send([{ type: "ping", data: "probe" }]);
          transport.once("packet", (msg) => {
            if (failed)
              return;
            if ("pong" === msg.type && "probe" === msg.data) {
              debug('probe transport "%s" pong', name);
              this.upgrading = true;
              this.emitReserved("upgrading", transport);
              if (!transport)
                return;
              SocketWithoutUpgrade.priorWebsocketSuccess = "websocket" === transport.name;
              debug('pausing current transport "%s"', this.transport.name);
              this.transport.pause(() => {
                if (failed)
                  return;
                if ("closed" === this.readyState)
                  return;
                debug("changing transport and sending upgrade packet");
                cleanup();
                this.setTransport(transport);
                transport.send([{ type: "upgrade" }]);
                this.emitReserved("upgrade", transport);
                transport = null;
                this.upgrading = false;
                this.flush();
              });
            } else {
              debug('probe transport "%s" failed', name);
              const err = new Error("probe error");
              err.transport = transport.name;
              this.emitReserved("upgradeError", err);
            }
          });
        };
        function freezeTransport() {
          if (failed)
            return;
          failed = true;
          cleanup();
          transport.close();
          transport = null;
        }
        const onerror = (err) => {
          const error = new Error("probe error: " + err);
          error.transport = transport.name;
          freezeTransport();
          debug('probe transport "%s" failed because of error: %s', name, err);
          this.emitReserved("upgradeError", error);
        };
        function onTransportClose() {
          onerror("transport closed");
        }
        function onclose() {
          onerror("socket closed");
        }
        function onupgrade(to) {
          if (transport && to.name !== transport.name) {
            debug('"%s" works - aborting "%s"', to.name, transport.name);
            freezeTransport();
          }
        }
        const cleanup = () => {
          transport.removeListener("open", onTransportOpen);
          transport.removeListener("error", onerror);
          transport.removeListener("close", onTransportClose);
          this.off("close", onclose);
          this.off("upgrading", onupgrade);
        };
        transport.once("open", onTransportOpen);
        transport.once("error", onerror);
        transport.once("close", onTransportClose);
        this.once("close", onclose);
        this.once("upgrading", onupgrade);
        if (this._upgrades.indexOf("webtransport") !== -1 && name !== "webtransport") {
          this.setTimeoutFn(() => {
            if (!failed) {
              transport.open();
            }
          }, 200);
        } else {
          transport.open();
        }
      }
      onHandshake(data) {
        this._upgrades = this._filterUpgrades(data.upgrades);
        super.onHandshake(data);
      }
      /**
       * Filters upgrades, returning only those matching client transports.
       *
       * @param {Array} upgrades - server upgrades
       * @private
       */
      _filterUpgrades(upgrades) {
        const filteredUpgrades = [];
        for (let i = 0; i < upgrades.length; i++) {
          if (~this.transports.indexOf(upgrades[i]))
            filteredUpgrades.push(upgrades[i]);
        }
        return filteredUpgrades;
      }
    };
    exports.SocketWithUpgrade = SocketWithUpgrade;
    var Socket = class extends SocketWithUpgrade {
      constructor(uri, opts = {}) {
        const o = typeof uri === "object" ? uri : opts;
        if (!o.transports || o.transports && typeof o.transports[0] === "string") {
          o.transports = (o.transports || ["polling", "websocket", "webtransport"]).map((transportName) => index_js_1.transports[transportName]).filter((t) => !!t);
        }
        super(uri, o);
      }
    };
    exports.Socket = Socket;
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-fetch.js
var require_polling_fetch = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/transports/polling-fetch.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Fetch = void 0;
    var polling_js_1 = require_polling();
    var Fetch = class extends polling_js_1.Polling {
      doPoll() {
        this._fetch().then((res) => {
          if (!res.ok) {
            return this.onError("fetch read error", res.status, res);
          }
          res.text().then((data) => this.onData(data));
        }).catch((err) => {
          this.onError("fetch read error", err);
        });
      }
      doWrite(data, callback) {
        this._fetch(data).then((res) => {
          if (!res.ok) {
            return this.onError("fetch write error", res.status, res);
          }
          callback();
        }).catch((err) => {
          this.onError("fetch write error", err);
        });
      }
      _fetch(data) {
        var _a;
        const isPost = data !== void 0;
        const headers = new Headers(this.opts.extraHeaders);
        if (isPost) {
          headers.set("content-type", "text/plain;charset=UTF-8");
        }
        (_a = this.socket._cookieJar) === null || _a === void 0 ? void 0 : _a.appendCookies(headers);
        return fetch(this.uri(), {
          method: isPost ? "POST" : "GET",
          body: isPost ? data : null,
          headers,
          credentials: this.opts.withCredentials ? "include" : "omit"
        }).then((res) => {
          var _a2;
          (_a2 = this.socket._cookieJar) === null || _a2 === void 0 ? void 0 : _a2.parseCookies(res.headers.getSetCookie());
          return res;
        });
      }
    };
    exports.Fetch = Fetch;
  }
});

// ../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/index.js
var require_cjs7 = __commonJS({
  "../../node_modules/.pnpm/engine.io-client@6.6.2/node_modules/engine.io-client/build/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebTransport = exports.WebSocket = exports.NodeWebSocket = exports.XHR = exports.NodeXHR = exports.Fetch = exports.nextTick = exports.parse = exports.installTimerFunctions = exports.transports = exports.TransportError = exports.Transport = exports.protocol = exports.SocketWithUpgrade = exports.SocketWithoutUpgrade = exports.Socket = void 0;
    var socket_js_1 = require_socket();
    Object.defineProperty(exports, "Socket", { enumerable: true, get: function() {
      return socket_js_1.Socket;
    } });
    var socket_js_2 = require_socket();
    Object.defineProperty(exports, "SocketWithoutUpgrade", { enumerable: true, get: function() {
      return socket_js_2.SocketWithoutUpgrade;
    } });
    Object.defineProperty(exports, "SocketWithUpgrade", { enumerable: true, get: function() {
      return socket_js_2.SocketWithUpgrade;
    } });
    exports.protocol = socket_js_1.Socket.protocol;
    var transport_js_1 = require_transport();
    Object.defineProperty(exports, "Transport", { enumerable: true, get: function() {
      return transport_js_1.Transport;
    } });
    Object.defineProperty(exports, "TransportError", { enumerable: true, get: function() {
      return transport_js_1.TransportError;
    } });
    var index_js_1 = require_transports();
    Object.defineProperty(exports, "transports", { enumerable: true, get: function() {
      return index_js_1.transports;
    } });
    var util_js_1 = require_util();
    Object.defineProperty(exports, "installTimerFunctions", { enumerable: true, get: function() {
      return util_js_1.installTimerFunctions;
    } });
    var parseuri_js_1 = require_parseuri();
    Object.defineProperty(exports, "parse", { enumerable: true, get: function() {
      return parseuri_js_1.parse;
    } });
    var globals_node_js_1 = require_globals();
    Object.defineProperty(exports, "nextTick", { enumerable: true, get: function() {
      return globals_node_js_1.nextTick;
    } });
    var polling_fetch_js_1 = require_polling_fetch();
    Object.defineProperty(exports, "Fetch", { enumerable: true, get: function() {
      return polling_fetch_js_1.Fetch;
    } });
    var polling_xhr_node_js_1 = require_polling_xhr();
    Object.defineProperty(exports, "NodeXHR", { enumerable: true, get: function() {
      return polling_xhr_node_js_1.XHR;
    } });
    var polling_xhr_js_1 = require_polling_xhr();
    Object.defineProperty(exports, "XHR", { enumerable: true, get: function() {
      return polling_xhr_js_1.XHR;
    } });
    var websocket_node_js_1 = require_websocket();
    Object.defineProperty(exports, "NodeWebSocket", { enumerable: true, get: function() {
      return websocket_node_js_1.WS;
    } });
    var websocket_js_1 = require_websocket();
    Object.defineProperty(exports, "WebSocket", { enumerable: true, get: function() {
      return websocket_js_1.WS;
    } });
    var webtransport_js_1 = require_webtransport();
    Object.defineProperty(exports, "WebTransport", { enumerable: true, get: function() {
      return webtransport_js_1.WT;
    } });
  }
});

// ../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/url.js
var require_url = __commonJS({
  "../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/url.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.url = url;
    var engine_io_client_1 = require_cjs7();
    var debug_1 = __importDefault(require_browser());
    var debug = (0, debug_1.default)("socket.io-client:url");
    function url(uri, path = "", loc) {
      let obj = uri;
      loc = loc || typeof location !== "undefined" && location;
      if (null == uri)
        uri = loc.protocol + "//" + loc.host;
      if (typeof uri === "string") {
        if ("/" === uri.charAt(0)) {
          if ("/" === uri.charAt(1)) {
            uri = loc.protocol + uri;
          } else {
            uri = loc.host + uri;
          }
        }
        if (!/^(https?|wss?):\/\//.test(uri)) {
          debug("protocol-less url %s", uri);
          if ("undefined" !== typeof loc) {
            uri = loc.protocol + "//" + uri;
          } else {
            uri = "https://" + uri;
          }
        }
        debug("parse %s", uri);
        obj = (0, engine_io_client_1.parse)(uri);
      }
      if (!obj.port) {
        if (/^(http|ws)$/.test(obj.protocol)) {
          obj.port = "80";
        } else if (/^(http|ws)s$/.test(obj.protocol)) {
          obj.port = "443";
        }
      }
      obj.path = obj.path || "/";
      const ipv6 = obj.host.indexOf(":") !== -1;
      const host = ipv6 ? "[" + obj.host + "]" : obj.host;
      obj.id = obj.protocol + "://" + host + ":" + obj.port + path;
      obj.href = obj.protocol + "://" + host + (loc && loc.port === obj.port ? "" : ":" + obj.port);
      return obj;
    }
  }
});

// ../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/is-binary.js
var require_is_binary = __commonJS({
  "../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/is-binary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.hasBinary = exports.isBinary = void 0;
    var withNativeArrayBuffer = typeof ArrayBuffer === "function";
    var isView = (obj) => {
      return typeof ArrayBuffer.isView === "function" ? ArrayBuffer.isView(obj) : obj.buffer instanceof ArrayBuffer;
    };
    var toString = Object.prototype.toString;
    var withNativeBlob = typeof Blob === "function" || typeof Blob !== "undefined" && toString.call(Blob) === "[object BlobConstructor]";
    var withNativeFile = typeof File === "function" || typeof File !== "undefined" && toString.call(File) === "[object FileConstructor]";
    function isBinary(obj) {
      return withNativeArrayBuffer && (obj instanceof ArrayBuffer || isView(obj)) || withNativeBlob && obj instanceof Blob || withNativeFile && obj instanceof File;
    }
    exports.isBinary = isBinary;
    function hasBinary(obj, toJSON) {
      if (!obj || typeof obj !== "object") {
        return false;
      }
      if (Array.isArray(obj)) {
        for (let i = 0, l = obj.length; i < l; i++) {
          if (hasBinary(obj[i])) {
            return true;
          }
        }
        return false;
      }
      if (isBinary(obj)) {
        return true;
      }
      if (obj.toJSON && typeof obj.toJSON === "function" && arguments.length === 1) {
        return hasBinary(obj.toJSON(), true);
      }
      for (const key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key) && hasBinary(obj[key])) {
          return true;
        }
      }
      return false;
    }
    exports.hasBinary = hasBinary;
  }
});

// ../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/binary.js
var require_binary = __commonJS({
  "../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/binary.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.reconstructPacket = exports.deconstructPacket = void 0;
    var is_binary_js_1 = require_is_binary();
    function deconstructPacket(packet) {
      const buffers = [];
      const packetData = packet.data;
      const pack = packet;
      pack.data = _deconstructPacket(packetData, buffers);
      pack.attachments = buffers.length;
      return { packet: pack, buffers };
    }
    exports.deconstructPacket = deconstructPacket;
    function _deconstructPacket(data, buffers) {
      if (!data)
        return data;
      if ((0, is_binary_js_1.isBinary)(data)) {
        const placeholder = { _placeholder: true, num: buffers.length };
        buffers.push(data);
        return placeholder;
      } else if (Array.isArray(data)) {
        const newData = new Array(data.length);
        for (let i = 0; i < data.length; i++) {
          newData[i] = _deconstructPacket(data[i], buffers);
        }
        return newData;
      } else if (typeof data === "object" && !(data instanceof Date)) {
        const newData = {};
        for (const key in data) {
          if (Object.prototype.hasOwnProperty.call(data, key)) {
            newData[key] = _deconstructPacket(data[key], buffers);
          }
        }
        return newData;
      }
      return data;
    }
    function reconstructPacket(packet, buffers) {
      packet.data = _reconstructPacket(packet.data, buffers);
      delete packet.attachments;
      return packet;
    }
    exports.reconstructPacket = reconstructPacket;
    function _reconstructPacket(data, buffers) {
      if (!data)
        return data;
      if (data && data._placeholder === true) {
        const isIndexValid = typeof data.num === "number" && data.num >= 0 && data.num < buffers.length;
        if (isIndexValid) {
          return buffers[data.num];
        } else {
          throw new Error("illegal attachments");
        }
      } else if (Array.isArray(data)) {
        for (let i = 0; i < data.length; i++) {
          data[i] = _reconstructPacket(data[i], buffers);
        }
      } else if (typeof data === "object") {
        for (const key in data) {
          if (Object.prototype.hasOwnProperty.call(data, key)) {
            data[key] = _reconstructPacket(data[key], buffers);
          }
        }
      }
      return data;
    }
  }
});

// ../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/index.js
var require_cjs8 = __commonJS({
  "../../node_modules/.pnpm/socket.io-parser@4.2.4/node_modules/socket.io-parser/build/cjs/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Decoder = exports.Encoder = exports.PacketType = exports.protocol = void 0;
    var component_emitter_1 = (init_esm(), __toCommonJS(esm_exports));
    var binary_js_1 = require_binary();
    var is_binary_js_1 = require_is_binary();
    var debug_1 = require_browser();
    var debug = (0, debug_1.default)("socket.io-parser");
    var RESERVED_EVENTS = [
      "connect",
      "connect_error",
      "disconnect",
      "disconnecting",
      "newListener",
      "removeListener"
      // used by the Node.js EventEmitter
    ];
    exports.protocol = 5;
    var PacketType;
    (function(PacketType2) {
      PacketType2[PacketType2["CONNECT"] = 0] = "CONNECT";
      PacketType2[PacketType2["DISCONNECT"] = 1] = "DISCONNECT";
      PacketType2[PacketType2["EVENT"] = 2] = "EVENT";
      PacketType2[PacketType2["ACK"] = 3] = "ACK";
      PacketType2[PacketType2["CONNECT_ERROR"] = 4] = "CONNECT_ERROR";
      PacketType2[PacketType2["BINARY_EVENT"] = 5] = "BINARY_EVENT";
      PacketType2[PacketType2["BINARY_ACK"] = 6] = "BINARY_ACK";
    })(PacketType = exports.PacketType || (exports.PacketType = {}));
    var Encoder = class {
      /**
       * Encoder constructor
       *
       * @param {function} replacer - custom replacer to pass down to JSON.parse
       */
      constructor(replacer) {
        this.replacer = replacer;
      }
      /**
       * Encode a packet as a single string if non-binary, or as a
       * buffer sequence, depending on packet type.
       *
       * @param {Object} obj - packet object
       */
      encode(obj) {
        debug("encoding packet %j", obj);
        if (obj.type === PacketType.EVENT || obj.type === PacketType.ACK) {
          if ((0, is_binary_js_1.hasBinary)(obj)) {
            return this.encodeAsBinary({
              type: obj.type === PacketType.EVENT ? PacketType.BINARY_EVENT : PacketType.BINARY_ACK,
              nsp: obj.nsp,
              data: obj.data,
              id: obj.id
            });
          }
        }
        return [this.encodeAsString(obj)];
      }
      /**
       * Encode packet as string.
       */
      encodeAsString(obj) {
        let str = "" + obj.type;
        if (obj.type === PacketType.BINARY_EVENT || obj.type === PacketType.BINARY_ACK) {
          str += obj.attachments + "-";
        }
        if (obj.nsp && "/" !== obj.nsp) {
          str += obj.nsp + ",";
        }
        if (null != obj.id) {
          str += obj.id;
        }
        if (null != obj.data) {
          str += JSON.stringify(obj.data, this.replacer);
        }
        debug("encoded %j as %s", obj, str);
        return str;
      }
      /**
       * Encode packet as 'buffer sequence' by removing blobs, and
       * deconstructing packet into object with placeholders and
       * a list of buffers.
       */
      encodeAsBinary(obj) {
        const deconstruction = (0, binary_js_1.deconstructPacket)(obj);
        const pack = this.encodeAsString(deconstruction.packet);
        const buffers = deconstruction.buffers;
        buffers.unshift(pack);
        return buffers;
      }
    };
    exports.Encoder = Encoder;
    function isObject(value) {
      return Object.prototype.toString.call(value) === "[object Object]";
    }
    var Decoder = class _Decoder extends component_emitter_1.Emitter {
      /**
       * Decoder constructor
       *
       * @param {function} reviver - custom reviver to pass down to JSON.stringify
       */
      constructor(reviver) {
        super();
        this.reviver = reviver;
      }
      /**
       * Decodes an encoded packet string into packet JSON.
       *
       * @param {String} obj - encoded packet
       */
      add(obj) {
        let packet;
        if (typeof obj === "string") {
          if (this.reconstructor) {
            throw new Error("got plaintext data when reconstructing a packet");
          }
          packet = this.decodeString(obj);
          const isBinaryEvent = packet.type === PacketType.BINARY_EVENT;
          if (isBinaryEvent || packet.type === PacketType.BINARY_ACK) {
            packet.type = isBinaryEvent ? PacketType.EVENT : PacketType.ACK;
            this.reconstructor = new BinaryReconstructor(packet);
            if (packet.attachments === 0) {
              super.emitReserved("decoded", packet);
            }
          } else {
            super.emitReserved("decoded", packet);
          }
        } else if ((0, is_binary_js_1.isBinary)(obj) || obj.base64) {
          if (!this.reconstructor) {
            throw new Error("got binary data when not reconstructing a packet");
          } else {
            packet = this.reconstructor.takeBinaryData(obj);
            if (packet) {
              this.reconstructor = null;
              super.emitReserved("decoded", packet);
            }
          }
        } else {
          throw new Error("Unknown type: " + obj);
        }
      }
      /**
       * Decode a packet String (JSON data)
       *
       * @param {String} str
       * @return {Object} packet
       */
      decodeString(str) {
        let i = 0;
        const p = {
          type: Number(str.charAt(0))
        };
        if (PacketType[p.type] === void 0) {
          throw new Error("unknown packet type " + p.type);
        }
        if (p.type === PacketType.BINARY_EVENT || p.type === PacketType.BINARY_ACK) {
          const start = i + 1;
          while (str.charAt(++i) !== "-" && i != str.length) {
          }
          const buf = str.substring(start, i);
          if (buf != Number(buf) || str.charAt(i) !== "-") {
            throw new Error("Illegal attachments");
          }
          p.attachments = Number(buf);
        }
        if ("/" === str.charAt(i + 1)) {
          const start = i + 1;
          while (++i) {
            const c = str.charAt(i);
            if ("," === c)
              break;
            if (i === str.length)
              break;
          }
          p.nsp = str.substring(start, i);
        } else {
          p.nsp = "/";
        }
        const next = str.charAt(i + 1);
        if ("" !== next && Number(next) == next) {
          const start = i + 1;
          while (++i) {
            const c = str.charAt(i);
            if (null == c || Number(c) != c) {
              --i;
              break;
            }
            if (i === str.length)
              break;
          }
          p.id = Number(str.substring(start, i + 1));
        }
        if (str.charAt(++i)) {
          const payload = this.tryParse(str.substr(i));
          if (_Decoder.isPayloadValid(p.type, payload)) {
            p.data = payload;
          } else {
            throw new Error("invalid payload");
          }
        }
        debug("decoded %s as %j", str, p);
        return p;
      }
      tryParse(str) {
        try {
          return JSON.parse(str, this.reviver);
        } catch (e) {
          return false;
        }
      }
      static isPayloadValid(type, payload) {
        switch (type) {
          case PacketType.CONNECT:
            return isObject(payload);
          case PacketType.DISCONNECT:
            return payload === void 0;
          case PacketType.CONNECT_ERROR:
            return typeof payload === "string" || isObject(payload);
          case PacketType.EVENT:
          case PacketType.BINARY_EVENT:
            return Array.isArray(payload) && (typeof payload[0] === "number" || typeof payload[0] === "string" && RESERVED_EVENTS.indexOf(payload[0]) === -1);
          case PacketType.ACK:
          case PacketType.BINARY_ACK:
            return Array.isArray(payload);
        }
      }
      /**
       * Deallocates a parser's resources
       */
      destroy() {
        if (this.reconstructor) {
          this.reconstructor.finishedReconstruction();
          this.reconstructor = null;
        }
      }
    };
    exports.Decoder = Decoder;
    var BinaryReconstructor = class {
      constructor(packet) {
        this.packet = packet;
        this.buffers = [];
        this.reconPack = packet;
      }
      /**
       * Method to be called when binary data received from connection
       * after a BINARY_EVENT packet.
       *
       * @param {Buffer | ArrayBuffer} binData - the raw binary data received
       * @return {null | Object} returns null if more binary data is expected or
       *   a reconstructed packet object if all buffers have been received.
       */
      takeBinaryData(binData) {
        this.buffers.push(binData);
        if (this.buffers.length === this.reconPack.attachments) {
          const packet = (0, binary_js_1.reconstructPacket)(this.reconPack, this.buffers);
          this.finishedReconstruction();
          return packet;
        }
        return null;
      }
      /**
       * Cleans up binary packet reconstruction variables.
       */
      finishedReconstruction() {
        this.reconPack = null;
        this.buffers = [];
      }
    };
  }
});

// ../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/on.js
var require_on = __commonJS({
  "../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/on.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.on = on;
    function on(obj, ev, fn) {
      obj.on(ev, fn);
      return function subDestroy() {
        obj.off(ev, fn);
      };
    }
  }
});

// ../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/socket.js
var require_socket2 = __commonJS({
  "../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/socket.js"(exports) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Socket = void 0;
    var socket_io_parser_1 = require_cjs8();
    var on_js_1 = require_on();
    var component_emitter_1 = (init_esm(), __toCommonJS(esm_exports));
    var debug_1 = __importDefault(require_browser());
    var debug = (0, debug_1.default)("socket.io-client:socket");
    var RESERVED_EVENTS = Object.freeze({
      connect: 1,
      connect_error: 1,
      disconnect: 1,
      disconnecting: 1,
      // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener
      newListener: 1,
      removeListener: 1
    });
    var Socket = class extends component_emitter_1.Emitter {
      /**
       * `Socket` constructor.
       */
      constructor(io, nsp, opts) {
        super();
        this.connected = false;
        this.recovered = false;
        this.receiveBuffer = [];
        this.sendBuffer = [];
        this._queue = [];
        this._queueSeq = 0;
        this.ids = 0;
        this.acks = {};
        this.flags = {};
        this.io = io;
        this.nsp = nsp;
        if (opts && opts.auth) {
          this.auth = opts.auth;
        }
        this._opts = Object.assign({}, opts);
        if (this.io._autoConnect)
          this.open();
      }
      /**
       * Whether the socket is currently disconnected
       *
       * @example
       * const socket = io();
       *
       * socket.on("connect", () => {
       *   console.log(socket.disconnected); // false
       * });
       *
       * socket.on("disconnect", () => {
       *   console.log(socket.disconnected); // true
       * });
       */
      get disconnected() {
        return !this.connected;
      }
      /**
       * Subscribe to open, close and packet events
       *
       * @private
       */
      subEvents() {
        if (this.subs)
          return;
        const io = this.io;
        this.subs = [
          (0, on_js_1.on)(io, "open", this.onopen.bind(this)),
          (0, on_js_1.on)(io, "packet", this.onpacket.bind(this)),
          (0, on_js_1.on)(io, "error", this.onerror.bind(this)),
          (0, on_js_1.on)(io, "close", this.onclose.bind(this))
        ];
      }
      /**
       * Whether the Socket will try to reconnect when its Manager connects or reconnects.
       *
       * @example
       * const socket = io();
       *
       * console.log(socket.active); // true
       *
       * socket.on("disconnect", (reason) => {
       *   if (reason === "io server disconnect") {
       *     // the disconnection was initiated by the server, you need to manually reconnect
       *     console.log(socket.active); // false
       *   }
       *   // else the socket will automatically try to reconnect
       *   console.log(socket.active); // true
       * });
       */
      get active() {
        return !!this.subs;
      }
      /**
       * "Opens" the socket.
       *
       * @example
       * const socket = io({
       *   autoConnect: false
       * });
       *
       * socket.connect();
       */
      connect() {
        if (this.connected)
          return this;
        this.subEvents();
        if (!this.io["_reconnecting"])
          this.io.open();
        if ("open" === this.io._readyState)
          this.onopen();
        return this;
      }
      /**
       * Alias for {@link connect()}.
       */
      open() {
        return this.connect();
      }
      /**
       * Sends a `message` event.
       *
       * This method mimics the WebSocket.send() method.
       *
       * @see https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/send
       *
       * @example
       * socket.send("hello");
       *
       * // this is equivalent to
       * socket.emit("message", "hello");
       *
       * @return self
       */
      send(...args) {
        args.unshift("message");
        this.emit.apply(this, args);
        return this;
      }
      /**
       * Override `emit`.
       * If the event is in `events`, it's emitted normally.
       *
       * @example
       * socket.emit("hello", "world");
       *
       * // all serializable datastructures are supported (no need to call JSON.stringify)
       * socket.emit("hello", 1, "2", { 3: ["4"], 5: Uint8Array.from([6]) });
       *
       * // with an acknowledgement from the server
       * socket.emit("hello", "world", (val) => {
       *   // ...
       * });
       *
       * @return self
       */
      emit(ev, ...args) {
        var _a, _b, _c;
        if (RESERVED_EVENTS.hasOwnProperty(ev)) {
          throw new Error('"' + ev.toString() + '" is a reserved event name');
        }
        args.unshift(ev);
        if (this._opts.retries && !this.flags.fromQueue && !this.flags.volatile) {
          this._addToQueue(args);
          return this;
        }
        const packet = {
          type: socket_io_parser_1.PacketType.EVENT,
          data: args
        };
        packet.options = {};
        packet.options.compress = this.flags.compress !== false;
        if ("function" === typeof args[args.length - 1]) {
          const id = this.ids++;
          debug("emitting packet with ack id %d", id);
          const ack = args.pop();
          this._registerAckCallback(id, ack);
          packet.id = id;
        }
        const isTransportWritable = (_b = (_a = this.io.engine) === null || _a === void 0 ? void 0 : _a.transport) === null || _b === void 0 ? void 0 : _b.writable;
        const isConnected = this.connected && !((_c = this.io.engine) === null || _c === void 0 ? void 0 : _c._hasPingExpired());
        const discardPacket = this.flags.volatile && !isTransportWritable;
        if (discardPacket) {
          debug("discard packet as the transport is not currently writable");
        } else if (isConnected) {
          this.notifyOutgoingListeners(packet);
          this.packet(packet);
        } else {
          this.sendBuffer.push(packet);
        }
        this.flags = {};
        return this;
      }
      /**
       * @private
       */
      _registerAckCallback(id, ack) {
        var _a;
        const timeout = (_a = this.flags.timeout) !== null && _a !== void 0 ? _a : this._opts.ackTimeout;
        if (timeout === void 0) {
          this.acks[id] = ack;
          return;
        }
        const timer = this.io.setTimeoutFn(() => {
          delete this.acks[id];
          for (let i = 0; i < this.sendBuffer.length; i++) {
            if (this.sendBuffer[i].id === id) {
              debug("removing packet with ack id %d from the buffer", id);
              this.sendBuffer.splice(i, 1);
            }
          }
          debug("event with ack id %d has timed out after %d ms", id, timeout);
          ack.call(this, new Error("operation has timed out"));
        }, timeout);
        const fn = (...args) => {
          this.io.clearTimeoutFn(timer);
          ack.apply(this, args);
        };
        fn.withError = true;
        this.acks[id] = fn;
      }
      /**
       * Emits an event and waits for an acknowledgement
       *
       * @example
       * // without timeout
       * const response = await socket.emitWithAck("hello", "world");
       *
       * // with a specific timeout
       * try {
       *   const response = await socket.timeout(1000).emitWithAck("hello", "world");
       * } catch (err) {
       *   // the server did not acknowledge the event in the given delay
       * }
       *
       * @return a Promise that will be fulfilled when the server acknowledges the event
       */
      emitWithAck(ev, ...args) {
        return new Promise((resolve, reject) => {
          const fn = (arg1, arg2) => {
            return arg1 ? reject(arg1) : resolve(arg2);
          };
          fn.withError = true;
          args.push(fn);
          this.emit(ev, ...args);
        });
      }
      /**
       * Add the packet to the queue.
       * @param args
       * @private
       */
      _addToQueue(args) {
        let ack;
        if (typeof args[args.length - 1] === "function") {
          ack = args.pop();
        }
        const packet = {
          id: this._queueSeq++,
          tryCount: 0,
          pending: false,
          args,
          flags: Object.assign({ fromQueue: true }, this.flags)
        };
        args.push((err, ...responseArgs) => {
          if (packet !== this._queue[0]) {
            return;
          }
          const hasError = err !== null;
          if (hasError) {
            if (packet.tryCount > this._opts.retries) {
              debug("packet [%d] is discarded after %d tries", packet.id, packet.tryCount);
              this._queue.shift();
              if (ack) {
                ack(err);
              }
            }
          } else {
            debug("packet [%d] was successfully sent", packet.id);
            this._queue.shift();
            if (ack) {
              ack(null, ...responseArgs);
            }
          }
          packet.pending = false;
          return this._drainQueue();
        });
        this._queue.push(packet);
        this._drainQueue();
      }
      /**
       * Send the first packet of the queue, and wait for an acknowledgement from the server.
       * @param force - whether to resend a packet that has not been acknowledged yet
       *
       * @private
       */
      _drainQueue(force = false) {
        debug("draining queue");
        if (!this.connected || this._queue.length === 0) {
          return;
        }
        const packet = this._queue[0];
        if (packet.pending && !force) {
          debug("packet [%d] has already been sent and is waiting for an ack", packet.id);
          return;
        }
        packet.pending = true;
        packet.tryCount++;
        debug("sending packet [%d] (try n°%d)", packet.id, packet.tryCount);
        this.flags = packet.flags;
        this.emit.apply(this, packet.args);
      }
      /**
       * Sends a packet.
       *
       * @param packet
       * @private
       */
      packet(packet) {
        packet.nsp = this.nsp;
        this.io._packet(packet);
      }
      /**
       * Called upon engine `open`.
       *
       * @private
       */
      onopen() {
        debug("transport is open - connecting");
        if (typeof this.auth == "function") {
          this.auth((data) => {
            this._sendConnectPacket(data);
          });
        } else {
          this._sendConnectPacket(this.auth);
        }
      }
      /**
       * Sends a CONNECT packet to initiate the Socket.IO session.
       *
       * @param data
       * @private
       */
      _sendConnectPacket(data) {
        this.packet({
          type: socket_io_parser_1.PacketType.CONNECT,
          data: this._pid ? Object.assign({ pid: this._pid, offset: this._lastOffset }, data) : data
        });
      }
      /**
       * Called upon engine or manager `error`.
       *
       * @param err
       * @private
       */
      onerror(err) {
        if (!this.connected) {
          this.emitReserved("connect_error", err);
        }
      }
      /**
       * Called upon engine `close`.
       *
       * @param reason
       * @param description
       * @private
       */
      onclose(reason, description) {
        debug("close (%s)", reason);
        this.connected = false;
        delete this.id;
        this.emitReserved("disconnect", reason, description);
        this._clearAcks();
      }
      /**
       * Clears the acknowledgement handlers upon disconnection, since the client will never receive an acknowledgement from
       * the server.
       *
       * @private
       */
      _clearAcks() {
        Object.keys(this.acks).forEach((id) => {
          const isBuffered = this.sendBuffer.some((packet) => String(packet.id) === id);
          if (!isBuffered) {
            const ack = this.acks[id];
            delete this.acks[id];
            if (ack.withError) {
              ack.call(this, new Error("socket has been disconnected"));
            }
          }
        });
      }
      /**
       * Called with socket packet.
       *
       * @param packet
       * @private
       */
      onpacket(packet) {
        const sameNamespace = packet.nsp === this.nsp;
        if (!sameNamespace)
          return;
        switch (packet.type) {
          case socket_io_parser_1.PacketType.CONNECT:
            if (packet.data && packet.data.sid) {
              this.onconnect(packet.data.sid, packet.data.pid);
            } else {
              this.emitReserved("connect_error", new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));
            }
            break;
          case socket_io_parser_1.PacketType.EVENT:
          case socket_io_parser_1.PacketType.BINARY_EVENT:
            this.onevent(packet);
            break;
          case socket_io_parser_1.PacketType.ACK:
          case socket_io_parser_1.PacketType.BINARY_ACK:
            this.onack(packet);
            break;
          case socket_io_parser_1.PacketType.DISCONNECT:
            this.ondisconnect();
            break;
          case socket_io_parser_1.PacketType.CONNECT_ERROR:
            this.destroy();
            const err = new Error(packet.data.message);
            err.data = packet.data.data;
            this.emitReserved("connect_error", err);
            break;
        }
      }
      /**
       * Called upon a server event.
       *
       * @param packet
       * @private
       */
      onevent(packet) {
        const args = packet.data || [];
        debug("emitting event %j", args);
        if (null != packet.id) {
          debug("attaching ack callback to event");
          args.push(this.ack(packet.id));
        }
        if (this.connected) {
          this.emitEvent(args);
        } else {
          this.receiveBuffer.push(Object.freeze(args));
        }
      }
      emitEvent(args) {
        if (this._anyListeners && this._anyListeners.length) {
          const listeners = this._anyListeners.slice();
          for (const listener of listeners) {
            listener.apply(this, args);
          }
        }
        super.emit.apply(this, args);
        if (this._pid && args.length && typeof args[args.length - 1] === "string") {
          this._lastOffset = args[args.length - 1];
        }
      }
      /**
       * Produces an ack callback to emit with an event.
       *
       * @private
       */
      ack(id) {
        const self2 = this;
        let sent = false;
        return function(...args) {
          if (sent)
            return;
          sent = true;
          debug("sending ack %j", args);
          self2.packet({
            type: socket_io_parser_1.PacketType.ACK,
            id,
            data: args
          });
        };
      }
      /**
       * Called upon a server acknowledgement.
       *
       * @param packet
       * @private
       */
      onack(packet) {
        const ack = this.acks[packet.id];
        if (typeof ack !== "function") {
          debug("bad ack %s", packet.id);
          return;
        }
        delete this.acks[packet.id];
        debug("calling ack %s with %j", packet.id, packet.data);
        if (ack.withError) {
          packet.data.unshift(null);
        }
        ack.apply(this, packet.data);
      }
      /**
       * Called upon server connect.
       *
       * @private
       */
      onconnect(id, pid) {
        debug("socket connected with id %s", id);
        this.id = id;
        this.recovered = pid && this._pid === pid;
        this._pid = pid;
        this.connected = true;
        this.emitBuffered();
        this.emitReserved("connect");
        this._drainQueue(true);
      }
      /**
       * Emit buffered events (received and emitted).
       *
       * @private
       */
      emitBuffered() {
        this.receiveBuffer.forEach((args) => this.emitEvent(args));
        this.receiveBuffer = [];
        this.sendBuffer.forEach((packet) => {
          this.notifyOutgoingListeners(packet);
          this.packet(packet);
        });
        this.sendBuffer = [];
      }
      /**
       * Called upon server disconnect.
       *
       * @private
       */
      ondisconnect() {
        debug("server disconnect (%s)", this.nsp);
        this.destroy();
        this.onclose("io server disconnect");
      }
      /**
       * Called upon forced client/server side disconnections,
       * this method ensures the manager stops tracking us and
       * that reconnections don't get triggered for this.
       *
       * @private
       */
      destroy() {
        if (this.subs) {
          this.subs.forEach((subDestroy) => subDestroy());
          this.subs = void 0;
        }
        this.io["_destroy"](this);
      }
      /**
       * Disconnects the socket manually. In that case, the socket will not try to reconnect.
       *
       * If this is the last active Socket instance of the {@link Manager}, the low-level connection will be closed.
       *
       * @example
       * const socket = io();
       *
       * socket.on("disconnect", (reason) => {
       *   // console.log(reason); prints "io client disconnect"
       * });
       *
       * socket.disconnect();
       *
       * @return self
       */
      disconnect() {
        if (this.connected) {
          debug("performing disconnect (%s)", this.nsp);
          this.packet({ type: socket_io_parser_1.PacketType.DISCONNECT });
        }
        this.destroy();
        if (this.connected) {
          this.onclose("io client disconnect");
        }
        return this;
      }
      /**
       * Alias for {@link disconnect()}.
       *
       * @return self
       */
      close() {
        return this.disconnect();
      }
      /**
       * Sets the compress flag.
       *
       * @example
       * socket.compress(false).emit("hello");
       *
       * @param compress - if `true`, compresses the sending data
       * @return self
       */
      compress(compress) {
        this.flags.compress = compress;
        return this;
      }
      /**
       * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not
       * ready to send messages.
       *
       * @example
       * socket.volatile.emit("hello"); // the server may or may not receive it
       *
       * @returns self
       */
      get volatile() {
        this.flags.volatile = true;
        return this;
      }
      /**
       * Sets a modifier for a subsequent event emission that the callback will be called with an error when the
       * given number of milliseconds have elapsed without an acknowledgement from the server:
       *
       * @example
       * socket.timeout(5000).emit("my-event", (err) => {
       *   if (err) {
       *     // the server did not acknowledge the event in the given delay
       *   }
       * });
       *
       * @returns self
       */
      timeout(timeout) {
        this.flags.timeout = timeout;
        return this;
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback.
       *
       * @example
       * socket.onAny((event, ...args) => {
       *   console.log(`got ${event}`);
       * });
       *
       * @param listener
       */
      onAny(listener) {
        this._anyListeners = this._anyListeners || [];
        this._anyListeners.push(listener);
        return this;
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback. The listener is added to the beginning of the listeners array.
       *
       * @example
       * socket.prependAny((event, ...args) => {
       *   console.log(`got event ${event}`);
       * });
       *
       * @param listener
       */
      prependAny(listener) {
        this._anyListeners = this._anyListeners || [];
        this._anyListeners.unshift(listener);
        return this;
      }
      /**
       * Removes the listener that will be fired when any event is emitted.
       *
       * @example
       * const catchAllListener = (event, ...args) => {
       *   console.log(`got event ${event}`);
       * }
       *
       * socket.onAny(catchAllListener);
       *
       * // remove a specific listener
       * socket.offAny(catchAllListener);
       *
       * // or remove all listeners
       * socket.offAny();
       *
       * @param listener
       */
      offAny(listener) {
        if (!this._anyListeners) {
          return this;
        }
        if (listener) {
          const listeners = this._anyListeners;
          for (let i = 0; i < listeners.length; i++) {
            if (listener === listeners[i]) {
              listeners.splice(i, 1);
              return this;
            }
          }
        } else {
          this._anyListeners = [];
        }
        return this;
      }
      /**
       * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
       * e.g. to remove listeners.
       */
      listenersAny() {
        return this._anyListeners || [];
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback.
       *
       * Note: acknowledgements sent to the server are not included.
       *
       * @example
       * socket.onAnyOutgoing((event, ...args) => {
       *   console.log(`sent event ${event}`);
       * });
       *
       * @param listener
       */
      onAnyOutgoing(listener) {
        this._anyOutgoingListeners = this._anyOutgoingListeners || [];
        this._anyOutgoingListeners.push(listener);
        return this;
      }
      /**
       * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the
       * callback. The listener is added to the beginning of the listeners array.
       *
       * Note: acknowledgements sent to the server are not included.
       *
       * @example
       * socket.prependAnyOutgoing((event, ...args) => {
       *   console.log(`sent event ${event}`);
       * });
       *
       * @param listener
       */
      prependAnyOutgoing(listener) {
        this._anyOutgoingListeners = this._anyOutgoingListeners || [];
        this._anyOutgoingListeners.unshift(listener);
        return this;
      }
      /**
       * Removes the listener that will be fired when any event is emitted.
       *
       * @example
       * const catchAllListener = (event, ...args) => {
       *   console.log(`sent event ${event}`);
       * }
       *
       * socket.onAnyOutgoing(catchAllListener);
       *
       * // remove a specific listener
       * socket.offAnyOutgoing(catchAllListener);
       *
       * // or remove all listeners
       * socket.offAnyOutgoing();
       *
       * @param [listener] - the catch-all listener (optional)
       */
      offAnyOutgoing(listener) {
        if (!this._anyOutgoingListeners) {
          return this;
        }
        if (listener) {
          const listeners = this._anyOutgoingListeners;
          for (let i = 0; i < listeners.length; i++) {
            if (listener === listeners[i]) {
              listeners.splice(i, 1);
              return this;
            }
          }
        } else {
          this._anyOutgoingListeners = [];
        }
        return this;
      }
      /**
       * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,
       * e.g. to remove listeners.
       */
      listenersAnyOutgoing() {
        return this._anyOutgoingListeners || [];
      }
      /**
       * Notify the listeners for each packet sent
       *
       * @param packet
       *
       * @private
       */
      notifyOutgoingListeners(packet) {
        if (this._anyOutgoingListeners && this._anyOutgoingListeners.length) {
          const listeners = this._anyOutgoingListeners.slice();
          for (const listener of listeners) {
            listener.apply(this, packet.data);
          }
        }
      }
    };
    exports.Socket = Socket;
  }
});

// ../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/contrib/backo2.js
var require_backo2 = __commonJS({
  "../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/contrib/backo2.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Backoff = Backoff;
    function Backoff(opts) {
      opts = opts || {};
      this.ms = opts.min || 100;
      this.max = opts.max || 1e4;
      this.factor = opts.factor || 2;
      this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;
      this.attempts = 0;
    }
    Backoff.prototype.duration = function() {
      var ms = this.ms * Math.pow(this.factor, this.attempts++);
      if (this.jitter) {
        var rand = Math.random();
        var deviation = Math.floor(rand * this.jitter * ms);
        ms = (Math.floor(rand * 10) & 1) == 0 ? ms - deviation : ms + deviation;
      }
      return Math.min(ms, this.max) | 0;
    };
    Backoff.prototype.reset = function() {
      this.attempts = 0;
    };
    Backoff.prototype.setMin = function(min) {
      this.ms = min;
    };
    Backoff.prototype.setMax = function(max) {
      this.max = max;
    };
    Backoff.prototype.setJitter = function(jitter) {
      this.jitter = jitter;
    };
  }
});

// ../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/manager.js
var require_manager = __commonJS({
  "../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/manager.js"(exports) {
    "use strict";
    var __createBinding = exports && exports.__createBinding || (Object.create ? function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0) k2 = k;
      o[k2] = m[k];
    });
    var __setModuleDefault = exports && exports.__setModuleDefault || (Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    });
    var __importStar = exports && exports.__importStar || function(mod) {
      if (mod && mod.__esModule) return mod;
      var result = {};
      if (mod != null) {
        for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
      }
      __setModuleDefault(result, mod);
      return result;
    };
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Manager = void 0;
    var engine_io_client_1 = require_cjs7();
    var socket_js_1 = require_socket2();
    var parser = __importStar(require_cjs8());
    var on_js_1 = require_on();
    var backo2_js_1 = require_backo2();
    var component_emitter_1 = (init_esm(), __toCommonJS(esm_exports));
    var debug_1 = __importDefault(require_browser());
    var debug = (0, debug_1.default)("socket.io-client:manager");
    var Manager = class extends component_emitter_1.Emitter {
      constructor(uri, opts) {
        var _a;
        super();
        this.nsps = {};
        this.subs = [];
        if (uri && "object" === typeof uri) {
          opts = uri;
          uri = void 0;
        }
        opts = opts || {};
        opts.path = opts.path || "/socket.io";
        this.opts = opts;
        (0, engine_io_client_1.installTimerFunctions)(this, opts);
        this.reconnection(opts.reconnection !== false);
        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);
        this.reconnectionDelay(opts.reconnectionDelay || 1e3);
        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5e3);
        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);
        this.backoff = new backo2_js_1.Backoff({
          min: this.reconnectionDelay(),
          max: this.reconnectionDelayMax(),
          jitter: this.randomizationFactor()
        });
        this.timeout(null == opts.timeout ? 2e4 : opts.timeout);
        this._readyState = "closed";
        this.uri = uri;
        const _parser = opts.parser || parser;
        this.encoder = new _parser.Encoder();
        this.decoder = new _parser.Decoder();
        this._autoConnect = opts.autoConnect !== false;
        if (this._autoConnect)
          this.open();
      }
      reconnection(v) {
        if (!arguments.length)
          return this._reconnection;
        this._reconnection = !!v;
        if (!v) {
          this.skipReconnect = true;
        }
        return this;
      }
      reconnectionAttempts(v) {
        if (v === void 0)
          return this._reconnectionAttempts;
        this._reconnectionAttempts = v;
        return this;
      }
      reconnectionDelay(v) {
        var _a;
        if (v === void 0)
          return this._reconnectionDelay;
        this._reconnectionDelay = v;
        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);
        return this;
      }
      randomizationFactor(v) {
        var _a;
        if (v === void 0)
          return this._randomizationFactor;
        this._randomizationFactor = v;
        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);
        return this;
      }
      reconnectionDelayMax(v) {
        var _a;
        if (v === void 0)
          return this._reconnectionDelayMax;
        this._reconnectionDelayMax = v;
        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);
        return this;
      }
      timeout(v) {
        if (!arguments.length)
          return this._timeout;
        this._timeout = v;
        return this;
      }
      /**
       * Starts trying to reconnect if reconnection is enabled and we have not
       * started reconnecting yet
       *
       * @private
       */
      maybeReconnectOnOpen() {
        if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {
          this.reconnect();
        }
      }
      /**
       * Sets the current transport `socket`.
       *
       * @param {Function} fn - optional, callback
       * @return self
       * @public
       */
      open(fn) {
        debug("readyState %s", this._readyState);
        if (~this._readyState.indexOf("open"))
          return this;
        debug("opening %s", this.uri);
        this.engine = new engine_io_client_1.Socket(this.uri, this.opts);
        const socket = this.engine;
        const self2 = this;
        this._readyState = "opening";
        this.skipReconnect = false;
        const openSubDestroy = (0, on_js_1.on)(socket, "open", function() {
          self2.onopen();
          fn && fn();
        });
        const onError = (err) => {
          debug("error");
          this.cleanup();
          this._readyState = "closed";
          this.emitReserved("error", err);
          if (fn) {
            fn(err);
          } else {
            this.maybeReconnectOnOpen();
          }
        };
        const errorSub = (0, on_js_1.on)(socket, "error", onError);
        if (false !== this._timeout) {
          const timeout = this._timeout;
          debug("connect attempt will timeout after %d", timeout);
          const timer = this.setTimeoutFn(() => {
            debug("connect attempt timed out after %d", timeout);
            openSubDestroy();
            onError(new Error("timeout"));
            socket.close();
          }, timeout);
          if (this.opts.autoUnref) {
            timer.unref();
          }
          this.subs.push(() => {
            this.clearTimeoutFn(timer);
          });
        }
        this.subs.push(openSubDestroy);
        this.subs.push(errorSub);
        return this;
      }
      /**
       * Alias for open()
       *
       * @return self
       * @public
       */
      connect(fn) {
        return this.open(fn);
      }
      /**
       * Called upon transport open.
       *
       * @private
       */
      onopen() {
        debug("open");
        this.cleanup();
        this._readyState = "open";
        this.emitReserved("open");
        const socket = this.engine;
        this.subs.push(
          (0, on_js_1.on)(socket, "ping", this.onping.bind(this)),
          (0, on_js_1.on)(socket, "data", this.ondata.bind(this)),
          (0, on_js_1.on)(socket, "error", this.onerror.bind(this)),
          (0, on_js_1.on)(socket, "close", this.onclose.bind(this)),
          // @ts-ignore
          (0, on_js_1.on)(this.decoder, "decoded", this.ondecoded.bind(this))
        );
      }
      /**
       * Called upon a ping.
       *
       * @private
       */
      onping() {
        this.emitReserved("ping");
      }
      /**
       * Called with data.
       *
       * @private
       */
      ondata(data) {
        try {
          this.decoder.add(data);
        } catch (e) {
          this.onclose("parse error", e);
        }
      }
      /**
       * Called when parser fully decodes a packet.
       *
       * @private
       */
      ondecoded(packet) {
        (0, engine_io_client_1.nextTick)(() => {
          this.emitReserved("packet", packet);
        }, this.setTimeoutFn);
      }
      /**
       * Called upon socket error.
       *
       * @private
       */
      onerror(err) {
        debug("error", err);
        this.emitReserved("error", err);
      }
      /**
       * Creates a new socket for the given `nsp`.
       *
       * @return {Socket}
       * @public
       */
      socket(nsp, opts) {
        let socket = this.nsps[nsp];
        if (!socket) {
          socket = new socket_js_1.Socket(this, nsp, opts);
          this.nsps[nsp] = socket;
        } else if (this._autoConnect && !socket.active) {
          socket.connect();
        }
        return socket;
      }
      /**
       * Called upon a socket close.
       *
       * @param socket
       * @private
       */
      _destroy(socket) {
        const nsps = Object.keys(this.nsps);
        for (const nsp of nsps) {
          const socket2 = this.nsps[nsp];
          if (socket2.active) {
            debug("socket %s is still active, skipping close", nsp);
            return;
          }
        }
        this._close();
      }
      /**
       * Writes a packet.
       *
       * @param packet
       * @private
       */
      _packet(packet) {
        debug("writing packet %j", packet);
        const encodedPackets = this.encoder.encode(packet);
        for (let i = 0; i < encodedPackets.length; i++) {
          this.engine.write(encodedPackets[i], packet.options);
        }
      }
      /**
       * Clean up transport subscriptions and packet buffer.
       *
       * @private
       */
      cleanup() {
        debug("cleanup");
        this.subs.forEach((subDestroy) => subDestroy());
        this.subs.length = 0;
        this.decoder.destroy();
      }
      /**
       * Close the current socket.
       *
       * @private
       */
      _close() {
        debug("disconnect");
        this.skipReconnect = true;
        this._reconnecting = false;
        this.onclose("forced close");
      }
      /**
       * Alias for close()
       *
       * @private
       */
      disconnect() {
        return this._close();
      }
      /**
       * Called when:
       *
       * - the low-level engine is closed
       * - the parser encountered a badly formatted packet
       * - all sockets are disconnected
       *
       * @private
       */
      onclose(reason, description) {
        var _a;
        debug("closed due to %s", reason);
        this.cleanup();
        (_a = this.engine) === null || _a === void 0 ? void 0 : _a.close();
        this.backoff.reset();
        this._readyState = "closed";
        this.emitReserved("close", reason, description);
        if (this._reconnection && !this.skipReconnect) {
          this.reconnect();
        }
      }
      /**
       * Attempt a reconnection.
       *
       * @private
       */
      reconnect() {
        if (this._reconnecting || this.skipReconnect)
          return this;
        const self2 = this;
        if (this.backoff.attempts >= this._reconnectionAttempts) {
          debug("reconnect failed");
          this.backoff.reset();
          this.emitReserved("reconnect_failed");
          this._reconnecting = false;
        } else {
          const delay = this.backoff.duration();
          debug("will wait %dms before reconnect attempt", delay);
          this._reconnecting = true;
          const timer = this.setTimeoutFn(() => {
            if (self2.skipReconnect)
              return;
            debug("attempting reconnect");
            this.emitReserved("reconnect_attempt", self2.backoff.attempts);
            if (self2.skipReconnect)
              return;
            self2.open((err) => {
              if (err) {
                debug("reconnect attempt error");
                self2._reconnecting = false;
                self2.reconnect();
                this.emitReserved("reconnect_error", err);
              } else {
                debug("reconnect success");
                self2.onreconnect();
              }
            });
          }, delay);
          if (this.opts.autoUnref) {
            timer.unref();
          }
          this.subs.push(() => {
            this.clearTimeoutFn(timer);
          });
        }
      }
      /**
       * Called upon successful reconnect.
       *
       * @private
       */
      onreconnect() {
        const attempt = this.backoff.attempts;
        this._reconnecting = false;
        this.backoff.reset();
        this.emitReserved("reconnect", attempt);
      }
    };
    exports.Manager = Manager;
  }
});

// ../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/index.js
var require_cjs9 = __commonJS({
  "../../node_modules/.pnpm/socket.io-client@4.8.1/node_modules/socket.io-client/build/cjs/index.js"(exports, module) {
    "use strict";
    var __importDefault = exports && exports.__importDefault || function(mod) {
      return mod && mod.__esModule ? mod : { "default": mod };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.WebTransport = exports.WebSocket = exports.NodeWebSocket = exports.XHR = exports.NodeXHR = exports.Fetch = exports.Socket = exports.Manager = exports.protocol = void 0;
    exports.io = lookup;
    exports.connect = lookup;
    exports.default = lookup;
    var url_js_1 = require_url();
    var manager_js_1 = require_manager();
    Object.defineProperty(exports, "Manager", { enumerable: true, get: function() {
      return manager_js_1.Manager;
    } });
    var socket_js_1 = require_socket2();
    Object.defineProperty(exports, "Socket", { enumerable: true, get: function() {
      return socket_js_1.Socket;
    } });
    var debug_1 = __importDefault(require_browser());
    var debug = (0, debug_1.default)("socket.io-client");
    var cache = {};
    function lookup(uri, opts) {
      if (typeof uri === "object") {
        opts = uri;
        uri = void 0;
      }
      opts = opts || {};
      const parsed = (0, url_js_1.url)(uri, opts.path || "/socket.io");
      const source = parsed.source;
      const id = parsed.id;
      const path = parsed.path;
      const sameNamespace = cache[id] && path in cache[id]["nsps"];
      const newConnection = opts.forceNew || opts["force new connection"] || false === opts.multiplex || sameNamespace;
      let io;
      if (newConnection) {
        debug("ignoring socket cache for %s", source);
        io = new manager_js_1.Manager(source, opts);
      } else {
        if (!cache[id]) {
          debug("new io instance for %s", source);
          cache[id] = new manager_js_1.Manager(source, opts);
        }
        io = cache[id];
      }
      if (parsed.query && !opts.query) {
        opts.query = parsed.queryKey;
      }
      return io.socket(parsed.path, opts);
    }
    Object.assign(lookup, {
      Manager: manager_js_1.Manager,
      Socket: socket_js_1.Socket,
      io: lookup,
      connect: lookup
    });
    var socket_io_parser_1 = require_cjs8();
    Object.defineProperty(exports, "protocol", { enumerable: true, get: function() {
      return socket_io_parser_1.protocol;
    } });
    var engine_io_client_1 = require_cjs7();
    Object.defineProperty(exports, "Fetch", { enumerable: true, get: function() {
      return engine_io_client_1.Fetch;
    } });
    Object.defineProperty(exports, "NodeXHR", { enumerable: true, get: function() {
      return engine_io_client_1.NodeXHR;
    } });
    Object.defineProperty(exports, "XHR", { enumerable: true, get: function() {
      return engine_io_client_1.XHR;
    } });
    Object.defineProperty(exports, "NodeWebSocket", { enumerable: true, get: function() {
      return engine_io_client_1.NodeWebSocket;
    } });
    Object.defineProperty(exports, "WebSocket", { enumerable: true, get: function() {
      return engine_io_client_1.WebSocket;
    } });
    Object.defineProperty(exports, "WebTransport", { enumerable: true, get: function() {
      return engine_io_client_1.WebTransport;
    } });
    module.exports = lookup;
  }
});

// ../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/utils/utils.js
var require_utils = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/utils/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createBufferTime = void 0;
    var createBufferTime = function(time, subscriber) {
      var buffer = [];
      var timeout = null;
      var emitBuffer = function() {
        subscriber(buffer);
        buffer = [];
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
      };
      return function(value) {
        buffer.push(value);
        if (timeout === null) {
          timeout = setTimeout(emitBuffer, time);
        }
      };
    };
    exports.createBufferTime = createBufferTime;
  }
});

// ../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/api/Updates.service.js
var require_Updates_service = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/api/Updates.service.js"(exports) {
    "use strict";
    var __extends = exports && exports.__extends || /* @__PURE__ */ function() {
      var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
          d2.__proto__ = b2;
        } || function(d2, b2) {
          for (var p in b2) if (Object.prototype.hasOwnProperty.call(b2, p)) d2[p] = b2[p];
        };
        return extendStatics(d, b);
      };
      return function(d, b) {
        if (typeof b !== "function" && b !== null)
          throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() {
          this.constructor = d;
        }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
      };
    }();
    var __decorate = exports && exports.__decorate || function(decorators, target, key, desc) {
      var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
      if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
      else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
      return c > 3 && r && Object.defineProperty(target, key, r), r;
    };
    var __metadata = exports && exports.__metadata || function(k, v) {
      if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
    };
    var __param = exports && exports.__param || function(paramIndex, decorator) {
      return function(target, key) {
        decorator(target, key, paramIndex);
      };
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.Updates = void 0;
    var events_1 = require_events2();
    var socket_io_client_1 = require_cjs9();
    var schemas_1 = require_dist();
    var utils_1 = require_utils();
    var inversify_1 = require_cjs4();
    var Http_service_1 = require_Http_service();
    var config_1 = require_config();
    var Logger_service_1 = require_Logger_service();
    var uniqueReducer = function(accumulator, currentValue) {
      if (!accumulator.includes(currentValue)) {
        accumulator.push(currentValue);
      }
      return accumulator;
    };
    (0, inversify_1.decorate)((0, inversify_1.injectable)(), events_1.EventEmitter);
    var Updates = (
      /** @class */
      function(_super) {
        __extends(Updates2, _super);
        function Updates2(httpService, options, logger) {
          var _this = _super.call(this) || this;
          _this.httpService = httpService;
          _this.options = options;
          _this.logger = logger;
          _this.httpService.onUserTokenChange(function() {
            _this.logger.log("User token changed. Reconnecting to websocket");
            _this.init();
          });
          _this.init();
          return _this;
        }
        Updates2.prototype.init = function() {
          var _this = this;
          this.logger.log("Initializing websocket connection", this.options, this.httpService.userToken);
          if (!this.httpService.userToken) {
            this.logger.log("No token provided. Skipping socket connection.");
            return;
          }
          this.socket = (0, socket_io_client_1.io)(this.options.apiServerEndpoint, {
            addTrailingSlash: false,
            path: "/nbc/events/socket.io",
            transports: ["websocket"],
            extraHeaders: {
              Authorization: "Bearer ".concat(this.httpService.userToken)
            }
          });
          var bufferNext = (0, utils_1.createBufferTime)(500, function(events) {
            _this.emit("game.events", events);
            var tags = events.flatMap(function(event) {
              return schemas_1.EVENT_INVALIDATION_MAPPING[event];
            }).reduce(uniqueReducer, []).filter(function(tag) {
              return Boolean(tag);
            });
            _this.emit("refresh.events", tags);
          });
          this.socket.once("connect", function() {
            _this.logger.log("Connected to Scrimmage Rewards websocket");
          });
          this.socket.on("game.events.update", bufferNext);
          this.socket.on("connect_error", function(err) {
            _this.logger.log("connect_error due to ".concat(err));
          });
        };
        Updates2 = __decorate([
          (0, inversify_1.injectable)(),
          __param(0, (0, inversify_1.inject)(Http_service_1.HttpService)),
          __param(1, (0, inversify_1.inject)(config_1.CONFIG_INJECT_KEY)),
          __param(2, (0, inversify_1.inject)(Logger_service_1.LoggerService)),
          __metadata("design:paramtypes", [Http_service_1.HttpService, Object, Logger_service_1.LoggerService])
        ], Updates2);
        return Updates2;
      }(events_1.EventEmitter)
    );
    exports.Updates = Updates;
  }
});

// ../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/create.js
var require_create = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/create.js"(exports) {
    "use strict";
    var __awaiter = exports && exports.__awaiter || function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    var __generator = exports && exports.__generator || function(thisArg, body) {
      var _ = { label: 0, sent: function() {
        if (t[0] & 1) throw t[1];
        return t[1];
      }, trys: [], ops: [] }, f, y, t, g;
      return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
        return this;
      }), g;
      function verb(n) {
        return function(v) {
          return step([n, v]);
        };
      }
      function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
          if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
          if (y = 0, t) op = [op[0] & 2, t.value];
          switch (op[0]) {
            case 0:
            case 1:
              t = op;
              break;
            case 4:
              _.label++;
              return { value: op[1], done: false };
            case 5:
              _.label++;
              y = op[1];
              op = [0];
              continue;
            case 7:
              op = _.ops.pop();
              _.trys.pop();
              continue;
            default:
              if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
                _ = 0;
                continue;
              }
              if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
                _.label = op[1];
                break;
              }
              if (op[0] === 6 && _.label < t[1]) {
                _.label = t[1];
                t = op;
                break;
              }
              if (t && _.label < t[2]) {
                _.label = t[2];
                _.ops.push(op);
                break;
              }
              if (t[2]) _.ops.pop();
              _.trys.pop();
              continue;
          }
          op = body.call(thisArg, _);
        } catch (e) {
          op = [6, e];
          y = 0;
        } finally {
          f = t = 0;
        }
        if (op[0] & 5) throw op[1];
        return { value: op[0] ? op[1] : void 0, done: true };
      }
    };
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.create = void 0;
    var inversify_1 = require_cjs4();
    var GameRule_service_1 = require_GameRule_service();
    var Player_service_1 = require_Player_service();
    var config_1 = require_config();
    var Http_service_1 = require_Http_service();
    var Logger_service_1 = require_Logger_service();
    var Updates_service_1 = require_Updates_service();
    var Components = [
      Player_service_1.PlayerService,
      GameRule_service_1.GameRuleService,
      Http_service_1.HttpService,
      Updates_service_1.Updates,
      Logger_service_1.LoggerService
    ];
    var create = function(options) {
      var isInitialized = false;
      if (!options.apiServerEndpoint) {
        throw new Error("API Server Endpoint is required");
      }
      if (!options.refreshToken) {
        throw new Error("Refresh Token is required");
      }
      options.apiServerEndpoint = options.apiServerEndpoint.endsWith("/") ? options.apiServerEndpoint.slice(0, -1) : options.apiServerEndpoint;
      var container = new inversify_1.Container();
      container.bind(config_1.CONFIG_INJECT_KEY).toConstantValue(options);
      for (var _i = 0, Components_1 = Components; _i < Components_1.length; _i++) {
        var provider = Components_1[_i];
        container.bind(provider).toSelf().inSingletonScope();
      }
      handleInstanceInitForComponent(container, Components).then(function() {
        var _a;
        (_a = options.onReady) === null || _a === void 0 ? void 0 : _a.call(options);
        isInitialized = true;
      });
      return {
        _container: container,
        api: {
          gameRules: container.get(GameRule_service_1.GameRuleService),
          player: container.get(Player_service_1.PlayerService),
          updates: container.get(Updates_service_1.Updates)
        },
        isInitialized: function() {
          return isInitialized;
        }
      };
    };
    exports.create = create;
    var handleInstanceInitForComponent = function(container, components) {
      return __awaiter(void 0, void 0, void 0, function() {
        var _i, components_1, provider, component;
        return __generator(this, function(_a) {
          switch (_a.label) {
            case 0:
              _i = 0, components_1 = components;
              _a.label = 1;
            case 1:
              if (!(_i < components_1.length)) return [3, 4];
              provider = components_1[_i];
              component = container.get(provider);
              if (!component.onInstanceInit) return [3, 3];
              return [4, component.onInstanceInit()];
            case 2:
              _a.sent();
              _a.label = 3;
            case 3:
              _i++;
              return [3, 1];
            case 4:
              return [
                2
                /*return*/
              ];
          }
        });
      });
    };
  }
});

// ../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/index.js
var require_dist3 = __commonJS({
  "../../node_modules/.pnpm/@scrimmage+js-sdk@1.3.3/node_modules/@scrimmage/js-sdk/dist/index.js"(exports) {
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.instance = exports.create = exports.init = void 0;
    require_Reflect();
    var create_1 = require_create();
    Object.defineProperty(exports, "create", { enumerable: true, get: function() {
      return create_1.create;
    } });
    var instance;
    var init4 = function(options) {
      exports.instance = instance = (0, create_1.create)(options);
    };
    exports.init = init4;
  }
});
export default require_dist3();
//# sourceMappingURL=@scrimmage_js-sdk.js.map
